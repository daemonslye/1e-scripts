<!--new character?-->
<input type="hidden" name="attr_old_character" value="0" />
<!--background hidden inputs-->
<input type="checkbox" name="attr_background" value="1" class="background-selection hidden" checked />
<input type="checkbox" name="attr_background" value="2" class="background-selection hidden" />
<input type="checkbox" name="attr_background" value="3" class="background-selection hidden" />
<input type="checkbox" name="attr_background" value="4" class="background-selection hidden" />

<!--option toggles-->
<input type="hidden" name="attr_is_npc" value="0" class="is-npc" />
<input type="hidden" name="attr_toggle_npc" value="0" class="toggle-npc" />
<input type="checkbox" name="attr_toggle_costs" value="1" class="toggle-costs hidden" />
<input type="checkbox" name="attr_toggle_thief_skills" value="1" class="toggle-thief-skills hidden" checked />
<input type="checkbox" name="attr_toggle_spells" value="1" class="toggle-spells hidden" />
<input type="checkbox" name="attr_toggle_nwp" value="1" class="toggle-nwp hidden" />
<input type="checkbox" name="attr_toggle_exceptional" value="1" class="toggle-exceptional hidden" checked />
<input type="checkbox" name="attr_toggle_comeliness" value="1" class="toggle-comeliness hidden" checked />
<input type="checkbox" name="attr_toggle_multiclass" value="1" class="toggle-multiclass hidden" />
<input type="checkbox" name="attr_toggle_macros" value="1" class="toggle-macros hidden" checked />
<input type="checkbox" name="attr_toggle_single_column_notes" class="toggle-single-column-notes hidden" value="1" />
<input type="checkbox" name="attr_toggle_single_column_spells" class="toggle-single-column-spells hidden" value="1" />
<input type="checkbox" name="attr_toggle_critdamage" class="toggle-critdamage hidden" value="1" />
<div class="background">
  <div class="wrapper">
    <!-- Sheet Header-->
    <section class="top-header">
      <!-- NPC/Monster toggle-->
      <section class="npc-toggle npc-tabs">
        <input type="radio" name="attr_toggle_npc" value="0" class="toggle-npc tab-hidden tab" title="Player Character" checked /><span class="tab">PC</span>
        <input type="radio" name="attr_toggle_npc" value="1" class="toggle-npc tab-hidden tab" title="Non-Player Character/Monster" /><span class="tab">NPC</span>
        <input type="radio" name="attr_toggle_npc" value="99" class="toggle-npc tab-hidden tab" title="Sheet Settings" /><span class="material-icons custom-btn-nav"></span>
      </section>
      <!-- Announcements -->
      <section class="announcements-box">
        <input type="checkbox" class="sect-show" name="attr_toggle_announcements" value="1" title="Open to read about important sheet changes." checked />
        <span class="header announcements-title">Announcements</span><span class="material-icons"></span>
        <span class="pc-npc">
          <span class="inline-label text-small" title="@{is_npc} | Indicates that the sheet is either a PC or NPC/Monster.">
            <input type="radio" class="width-smallest is-pc" name="attr_is_npc" value="0" checked /><span></span>
            <input type="radio" class="width-smallest is-npc" style="margin-left: .75em;" name="attr_is_npc" value="1" /><span></span>
          </span>
        </span>
        <div class="sect announcements">
          <h4>
            <span>Important Sheet Announcements</span>
            <span class="two-columns">
              <label class="left">
                <span class="version">v.</span>
                <span name="attr_sheet_version" class="width-smaller version left"></span>
                <span class="text-small version">beta</span>
              </label>
              <label class="right">8/31/22'</label>
            </span>
          </h4>
          <ul>
            <li>Small changes to improve weapon Range field validation. Normal input will accept S/M/L ranges as numbers seperated by '/'. ie 1/2/3. You may also include single or double quotes as distance indicators. ie 1"/2"/3" or 10'/20'/30'. Entering a single value will result in all ranges using that value.</li>
            <li>NPC/Monster: added @{monsterHD} to help differentiate player class hit dice vs monster hit dice.</li>
            <li>Armor Details: Dex Adj. can be toggled to adjust AC for certain conditions.</li>
            <li>Added a PC/NPC radio selector. Located directly under the sheet "Announcements". @{is_npc} Added to the Default Settings page as well.</li>
            <li>Comeliness: added @{comeliness_base} which should represent the Comeliness rolled.ie un-adjusted.</li>
            <li>Sheet Rolls: macro-text for rolls have been updated to allow bonuses(in fields and/or the modifier prompts) to include the '+' symbol. ie '+2'. Prior to this update, including the plus symbol ie '+2' would result in a '++2' which would break the macro.</li>
            <li>Abilities: bonuses and penalties are now displayed with the appropriate +/- symbols as per the Ability table. The sheet used to show the mathematically correct value, but now shows the table value instead.</li>
            <li>Armor Details: changed Magic and Misc. Adj fields from dropdown selectors to regular input fields. Bonuses lower AC. Penalties raise AC. ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2. The AC calculations row has also been updated to display the inverted Defensive Adjustment for Dex as well as Armor Adj. and Shield Adj.</li>
            <li>Armor Details: Magic Adj. and Misc. Adj dropdowns have been expanded to allow -6(penalty) thru +6(bonus).</li>
            <li>Added Default Settings options(only available once the sheet goes live) that allow the game's creator to set sheet defaults. These will be applied to all new sheets automatically (ie npc, whispers, hide/show various areas, auto-calc ac, hp, crit damage, etc.), but can also be applied to ALL existing sheets through an additional in-game step from the 'My Settings' page, 'Apply Default Settings'.</li>
            <li>Repeating Weapons/Attacks: added weapon_ammo/weapon_ammo_max to help track arrows, bolts, etc. Ammo will be shown with ranged and ranged touch attacks. Also added weapon_num_attacks to indicate multiple/iterative attacks. Shown with Melee and Touch attacks. #Attacks is only serves as a visual indicator at this time. May be used in a future update to roll multiple attacks.</li>
            <li>Critical Damage: "Use Crit Damage" has been added to the sheet options. If enabled, natural 20 rolls will use Crit Damage in lieu of normal damage. Defaults to normal weapon damage x2 and can be modified per attack.</li>
            <li>Added Ability Checks(click an ability to make a roll). Defaults to 1d20 vs the Ability score, but the check can be customized from the sheet settings: Ability Check die. </li>
            <li>Bug Fix: Range and Backstab fields were not toggling based on weapon_type.(melee, range, touch, ranged touch).</li>
            <li>Moved sheet Settings(gear icon) to the top tab bar.</li>
            <li>Comeliness: Charisma adjustment (same race) is auto-calculated.</li>
            <li>Sync HP option added to Class Details and Advanced Settings. Let the sheet sync Total HP from Class Details with HP ( @{hitpoints_max} )</li>
            <li>Sync AC option added to Armor Details and Advanced Settings. Enabling "Sync AC" will lock AC Total from Armor Details with AC ie @{armorclass} at the top of the sheet.</li>
            <li>Bug Fix: backstab adj. that were enabled for attacks were still active even when Thief Skills were hidden. Hiding Thief Skills also hides and disables Backstab adjustments.</li>
            <li>Dual-Wield: dual-wield primary and secondary penalty has been added to the top of the Weapons section. Directly below Weapon Proficiencies. ( @{dual_pen_primary} and @{dual_pen_secondary} ) Dual-wield penalties are calculated based on Dexterity. You can override these penalties locally, per attack, if desired.</li>
            <li>Armor Rating: clicking "Ignore AR" sets armorclass_rating and unarmored_base to "-".</li>
            <li>Choosing "Ranged Touch" will now accept a single range and or text in the Range field without displaying an input error. The Range field label also changes from "S/M/L" to "Range" which might avoid any confusion that you must enter three range values.</li>
            <li>Armor Rating has also been added to the top of the sheet. Matches AR found in the Armor Details section.</li>
            <li>Fixed Total Ac CALC. Bug was introduced after last the last changes for shields.</li>
            <li>Changed Size2 to "Temp Size" for both PC and NPC for consistency.</li>
            <li>Armor Details - Shield: the AC Rating and AC dropdown selectors have been changed to "+1 through +10". The bottom column totals, "In Use/Best" have also been updated to reflect a shield's impact on AC Rating and AC accordingly.</li>
            <li>Bug Fix: Shield AC was being included in the AC Base.</li>
            <li>Added Comeliness to non-weapon proficiencies dropdown selector for nwp checks/rolls. Also added two new fields to the Comeliness row to track CHA and Racial adjustments.</li>
            <li>Weapons: Range now includes three hidden attributes, weapon_range_short, weapon_range_medium, and weapon_range_long. While the weapon_range field excepts any text value, the preferred format should be three numbers separated by a forward slash. Dash, space, or comma should also work. ie '1/2/3', '10-20-30', '1 2 3', '1,2,3'. The sheet will attempt to extract the three range values but will show a red/gold border with red text if it cannot extract all three ranges.</li>
            <li>Weapons: added a new Attack Type selector to indicate "Melee, Ranged, Touch, or Ranged Touch". Mostly a visual indicator, but can also help differentiate attack types for API. Range and Fire Rate are hidden for Melee attacks. Backstab is hidden for Ranged attacks. Changed the older Dual-wield "Attack Type" attributes ie weapon_attack_type_pen to weapon_dual_pen and have also updated the macro-text accordingly.</li>
            <li>Morale check button added. Basic roll: d100 vs @{morale_base} + mod</li>
            <li>Backstab: the Backstab Multiplier,@{backstab} and Backstab Bonus,@{backstab_bonus} are now included with attack rolls. The multiplier defaults to "1", and the bonus defaults to "0" so they will not affect normal attacks. Enabling the "Backstab" checkbox on the attack adds the To-Hit bonus (defaults to "+4") to the attack roll and multiply weapon damage rolled. Any damage, magic, misc. bonuses are applied after the damage multiplier. The backstab checkbox is hidden if "Thief Skills" are being hidden in the sheet settings.</li>
            <li>Roll Templates: brought back alternating row shading.</li>
            <li>Added a one-time version check/update that auto-calcs ability rows, saves, and thief skills.</li>
            <li>Added a one-time version check/update that updates the macro-text for repeating weapons, abilities, nwp, and spells. Only unedited, default macro-text will be updated to the latest default roll automatically. Customized macro-text will be skipped. FYI: to force a field to update to the latest default, simply delete the text. Using the "Reset Now" button in the sheet settings forces updates of multiple sheet-wide macro-text fields. Use with caution.</li>
            <li>Auto-updating ability stats. Completed: Strength, Intelligence(bonuslanguages only auto-fills for humans), Wisdom, Dexterity, Constitution(checks for fighter, paladin, or ranger, to expand bonuses past +2), Charisma.</li>
            <li>Attack Type: updated 'Normal' so that the roll template does not show '(Normal Attack)'. Only '(Primary Attack)' and '(Secondary Attack)' will be included with an attack roll.</li>
            <li>AC Details: added the option 'Auto-Calc AC'. Enabled by default so that any changes to the armor detail rows will auto-calculate the AC totals at the bottom of the section. The best AC at the top of the sheet is still manual so you may enter whatever you want regardless of any auto-calculated 'suggestions'. Also, the 'Calc AC' button can be used to force a re-calc regardless of the 'Auto-Calc AC' checkbox.</li>
            <li>Adjustments to help the roll templates better handle inserted images.</li>
            <li>Armor Details: added a column to list Bulk. Info tracking only. Not used in any calculations.</li>
            <li>Repositioned the Rear and Shieldless AC boxes to a vertical postion nearer AC. Made fields editable to match Armor Details.</li>
            <li>Armor Details: reworked this section as per forum discussions. Bottom row numbers can be manually changed and they will only gets auto-calculated, (based on the table above) if you use the "Calc AC" button.</li>
            <li>Added Secondary Skill field. Added Weapon Proficiency fields to the top of the Weapons section.</li>
            <li>NPC: attacks and special abilities will be shared between pc/npc. Same attributes.</li>
            <li>Settings: added "pink" and "darkpink" to the roll template options.(Khruc) and "colorized" the roll template selector to help visualize your selection. Also made a few small teaks to the header text contrast to help with a few of the color choices.</li>
            <li>NPC: added Save rolls. These are shared with the PC tab and use the Base number to keep things simple.</li>
            <li>Thief Functions: each row is now auto-calculated. While you can temporarily override the total, any changes made to the row will trigger a recalc. Special handling for pre-existing characters; older thief values will be copied to the Base column. This allows for the "new" total to still match the old value, but will auto-calc once the row is manually adjusted. New sheets default to level 1 Thief base values.</li>
            <li>Settings: Toggle Multi-Class fields. Toggle is also included inside the Class Details section.</li>
            <li>Settings: Toggles all macro-text fields. Only show when you want to edit rolls.</li>
            <li>Equipment: moved Wealth below the repeating equipment rows.</li>
            <li>Armor Details: Added No Armor/Natural field.</li>
            <li>NPC: added an Wears Armor checkbox. Used to indicate that the AC includes unnatural armor. Weapons vs Armor Type should apply. Unchecked by default. Uses a new attribute: @{armor_rating_flag}</li>
            <li>NPC: added Type. Uses the existing attribute: @{race}.</li>
            <li>PC/NPC: added Size and Temp Size. Size can be used for the Natural/Unaltered size, where as Temp Size can be used to track the current size. Uses new attributes: @{size} and @{size2}</li>
            <li>NPC: added a Secondary/Other movement field. Only the primary movement is used for sheet speed calcs. Uses a new attribute: @{movement2}</li>
            <li>NPC: No Apperaing will now expand to match text entered.</li>
            <li>Darkmode: More adjustments.</li>
            <li>Settings: Option to hide comeliness row.</li>
            <li>Darkmode: Fixed HP and AC weirdness.</li>
            <li>Special Abilities: added die and modifier. A roll will be included with the Special Ability roll only if the die field is more than 1d0 or if the modifier is greater than 0.</li>
            <li>Settings: added an Advanced Option to reset all sheet macros. **WARNING:** This option will clear all repeating macro-text which forces the macro fields to re-populate to the latest sheet defaults. Any customization/editing that was done to any existing macro-text fields will be lost if the reset option is utilized. I will include an auto-matic check and reset of non-edited macro-text once the sheet is ready to to go live. For testing purposes, using the Reset option is the easiest method to ensure the sheet is using the latest macros.</li>
            <li>Settings: added options to whisper PC and NPC rolls.</li>
            <li>Attacks: added Attack Type for dual wielding attacks. normal, primary, and secondary option. Penalties are auto-calculated and adjusted for Dex.</li>
            <li>Attacks: added Damage Type. Also displayed with damage rolls.</li>
            <li>Initiative and Surprise: exposed macro text in settings to allow for more customization.</li>
            <li>Fixed logo from being resized by roll20 image server which was causing the image to look blurry. Changed the logo to a background-image instead of an img element.</li>
            <li>Saves: each save row is now auto-calculated. While you can temporarily override the save total, any changes made to the row will trigger a recalc. Special handling for pre-existing characters; older save values will be copied to the Base/Class column. This allows for the "new" save total to still match the old value, but will auto-calc once the row is manually adjusted. New sheets default to 20.</li>
            <li>Hit Adj. vs AC type: Added additional fields beyond AC 2. ie 1 and 0.</li>
            <li>Attack row: alignment adjustments.</li>
            <li>Included a check that adds a single repeating row if no rows have been added. Serves as a placeholder entry.</li>
            <li>Updated navigational indicators (hide/show triangles have been changed to chevrons).</li>
            <li>Updated logo with a cleaner more scalable image. (Thanks David)</li>
            <li>Saves: removed Class Adj. column and added Temp. Adj.</li>
            <li>Added hide/show toggle for custom saves and custom thief functions.</li>
            <li>Minor adjustments to navigational section headings and button rolls.</li>
            <li>Adjustments made to help better control portrait image.</li>
            <li>Added some adjustments for dark mode.</li>
            <li>Bug Fix: Equip weight- newly added items were not calculating weight properly.</li>
            <li>Spells: changed Spell Type/School field to a datalist. Type to sort and choose, or enter any text.</li>
            <li>Made the sheet a "little" more friendly to resizing the journal window. YMMV...</li>
            <li>Attack Matrix: autofill to hit table automatically by selecting class/monster and level/HD.</li>
            <li>NPC/Monster(WIP): added a toggle at the top of the sheet to switch sheet from PC to NPC/Monster.</li>
            <li>Equipment: added carried options(yes,no,mount) with additional filtering(carried, not carried, mount). items that are not carried or on mount are not included in the character's weight calcs.</li>
            <li>Bug Fix: Spells - toggling memorized spells(wasn't actually filtering correctly...) and also prevented seeing a newly added spell. Oops.</li>
            <li>Spells: memorized spells will be slightly emphasized over non-prepared using a subtle opacity difference.</li>
            <li>Settings: additional toggles added to hide Thief Skills, Spells, and Non-Weapon Proficiencies.</li>
            <li>Notes: added repeating notes with the ability to output the note to chat with a roll.</li>
            <li>Created an additional roll template for the attack table that places the matrix/thac0 output directly below the attack roll in chat. Should take up less room in chat make it a little easier if/when the Hit Armor Type table is also used.</li>
            <li>Settings: added an option to either use a sheet's avatar or a custom url for the sheet's image/portrait.</li>
            <li>Font updates to the sheet and templates. Also added a linear gradient to the template header color.</li>
            <li>Attack Matrix and THAC0 table have been moved into the top of the Weapons section.</li>
            <li>Settings: toggle Attack Matrix or THAC0 table.</li>
            <li>Spells: toggle added to display memorized spells only.</li>
            <li>Updated Saving Throws to show Success/Failure.</li>
            <li>Repeating sections have been "condensed" and now include an option to expand the row for descriptions and macro-text.</li>
            <li>Equipment: added tabs to help organize items. Includes a expanding section with description, macro-text and a sheet roll. Currently I'm hiding weight and cost for armor and weapons since you can enter that info outside of equipment. I'm toward removing the weight and cost field from the other sections entirely and simply track those in one location, Equipment...</li>
            <li>Settings: added toggles to hide Costs and Exceptional Ability column.</li>
            <li>Carrying Capacities and Movement Rates beyond 'Normal' are now calculated by the sheet.</li>
            <li>Armor Details now has a carried option to handle armor weight.</li>
            <li>Armor Details; now includes a auto-calculations based off of the armor "matrix". Best selected/worn base will be used for AC. All selected/worn armor adjustment and magical adjustments are applied. Calcs, Rear, Shieldless, and Total AC. </li>
            <li>Still wrestling with how best to track multi-class hp. See the "Class Details" sub-section. Currently, the Total HP calc is all class hp+con/# of classes. Result can be a fraction for a multi-class character. Use this the Total HP result to determine what to enter in the HitPoint|max field. There is a spot to track any fractional HP if desired.</li>
            <li>Sheet has now been converted over to be CSE(character sheet enhancement) mode and will break if the sheet is loaded in as a Custom game as Legacy.</li>
            <li>added additional custom rows for saves and thief functions.</li>
            <li>Added a Weapon Proficiency adj. checkbox toggle. Non-proficiency(unchecked) reveals a "penalty" field. Sheet auto-calcs weapon_prof_pen based on checkbox state and weapon_prof value. @{weapon_prof_pen} has been added to the default attack macro-text.</li>
            <li>Added to hit vs armor type adj. Incldes a checkbox to toggle the table with the attack roll. Sheet auto-calcs whether to use "{{ToHitACadj2to10}}" or "{{ToHitACadj2to10=<complete hit adj. by armor type table values>}}" and saves this value to @{weapon_ToHitACadj} which has been added to the default attack macro-text.</li>
            <li>Small updates to the roll template to better accommodate the To Hit table.</li>
            <li>All the older table data has been replaced. Moving to a grid/flex-based layout should help to make future changes easier.</li>
            <li>Settings; Init and Surprise have a "die" option in the settings(located in the footer). d6 is the default. Hide/Show Costs has not been enabled yet.</li>
            <li>Still planning to auto-hide the extra class and levels fields at the top of the sheet if not a multi-class.</li>
            <li>Continuing to convert sheet layout from tables (only the roll templates are left to convert...)</li>
            <li>Added a character portrait that pulls the sheet's avatar. Todo: add a default image(generic siloute) in cases where there is not an image to pull or if it's not desired.</li>
            <li>Working out a better class sub-section to better handle tracking xp and hp calcs for multiclass. Currently all manual entry, but auto-calculation "possibly" planned for hitpoints|max.</li>
            <li>Added additional types of AC. ie Shieldless, Surprised, and Rear.</li>
            <li>Updated some of the ability-based rolls to show target/threshold number as well as any adjustments included with the roll.</li>
            <li>Updated Mental Save macro. 1d20+wis adj + query adj</li>
            <li>Saving throw "matrix" added to handle multiple adjustments for saving throws. ie ability, racial, class, and misc. Currently all manual entry, but auto-calculation planned for the total of each type of saving throw. Also added an additional custom save row.</li>
            <li>Updated saving throw rolls to show target/threshold and any adjustments included with the roll. Removed the success/fail border indicator for now... since it did not actually work correctly when appling modifiers. Border color was only based on the raw roll(system limitation). This will be addressed once the roll templates are updated.</li>
            <li>Added notes for armor/defenses, racial, history/bio, and saving throws.</li>
            <li>Thief skills now uses a matrix layout similar to saves. Add additional attributes to track adj. Also added an additional custom save row.</li>
          </ul>
        </div>
      </section>
    </section>
    <!-- NPC/Monster statblock1-4 -->
    <section class="npc-box statblock1">
      <input type="text" class="width-large text-large left" style="padding:0 0 0 4px;margin: .25em 0 .25em .35em;" name="attr_character_name" title="@{character_name}" placeholder="Character Name">
      <span class="inline-label">
        <label>
          <span>TYPE:</span>
          <input type="text" class="width-medium" name="attr_race" value="" title="@{race}" placeholder="Type, Race, etc." />
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>FREQUENCY:</span>
          <select class="field-select" name="attr_frequency">
            <option selected>Nil</option>
            <option>Very rare</option>
            <option>Rare</option>
            <option>Uncommon</option>
            <option>Common</option>
            <option>Unique</option>
          </select>
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>NO. APPEARING:</span>
          <span class="autoexpand">
            <input type="text" name="attr_number_appearing" value="1" />
            <span name="attr_number_appearing"></span>
          </span>
        </label>
      </span>
      <span class="inline-label split">
        <label>
          <span>ARMOR CLASS:</span>
          <input type="text" class="width-smallest field-border" name="attr_armorclass" title="@{armorclass} | Best AC." value="10">
        </label>
        <label style="width: 6em;">
          <span>AR:</span>
          <select name="attr_unarmored_base" title="@{unarmored_base}" class="select width-small-plus" style="margin: 0;">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
            <option value="-">-</option>
          </select>
        </label>
        <label title="AC is not from armor. Weapons vs Armor Type does not apply.">
          <span>Ignore AR:</span>
          <input class="width-small" type="checkbox" name="attr_armor_rating_flag" value="1" title="@{armor_rating_flag}" />
        </label>
      </span>
      <span class="inline-label split">
        <label title="Primary Movement. NOTE: only the Primary movement is used for sheet calculations.">
          <span>MOVE:</span>
          <input type="text" class="width-small-plus" name="attr_movement" title="@{movement}" value="12" />
        </label>
        <label title="Other Movement. NOTE: not used for sheet calculations.">
          <span>OTHER:</span>
          <input type="text" class="width-small-plus" name="attr_movement2" title="@{movement2}" value="" placeholder="Nil" />
        </label>
      </span>
      <span class="inline-label split">
        <label>
          <span>HIT DICE:</span>
          <input type="text" class="width-small-plus" name="attr_monsterHD" title="@{monsterHD}" value="" placeholder="Nil" />
        </label>
        <label style="align-items: center; width:min-content;">
          <span>HIT POINTS:</span>
          <input type="text" class="field-border" name="attr_hitpoints" title="@{hitpoints}" value="0" />
        </label>
        <label>/
          <input type="text" class="width-small" name="attr_hitpoints_max" title="@{hitpoints_max}" value="0" />
        </label>
      </span>
      <span class="inline-label split">
        <label></label>
        <label>
          <button class="button stack-text" type="roll" name="attr_morale-roll" title="%{selected|morale-roll} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Morale Check}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{morale_base}[BASE] + ( ?{Modifier?|0}[MOD] ) ]]%}} {{mod_applied=[[ ?{Modifier?|0} ]]%}}">Morale</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_morale_base" title="@{morale_base} | Base is 50%. Adjust +/- per circumstances." value="50" />
          </label>
        </label>
      </span>
      <span class="inline-label split">
        <label>
          <span>% IN LAIR:</span>
          <input type="text" class="width-small" name="attr_lair" title="@{lair}" value="" placeholder="Nil" />
        </label>
        <label>
          <span>TREASURE TYPE:</span>
          <input type="text" class="width-fill" name="attr_treasure_type" title="@{treasure_type}" value="" placeholder="Nil" />
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>NO. OF ATTACKS:</span>
          <input type="text" class="width-small" name="attr_number_of_attacks" title="@{number_of_attacks}" value="1" />
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>DAMAGE/ATTACK:</span>
          <textarea class="height-short" name="attr_attack_damage" title="@{attack_damage}" value="" placeholder="e.g. 1d4/1d4/1d6"></textarea>
        </label>
      </span>
    </section>
    <section class="npc-box statblock2">
      <span class="inline-label">
        <label>
          <span>SPECIAL ATTACKS:</span>
          <textarea class="height-short" name="attr_special_attacks" title="@{special_attacks}" placeholder="Nil"></textarea>
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>SPECIAL DEFENSES:</span>
          <textarea class="height-short" name="attr_special_defenses" title="@{special_defenses}" placeholder="Nil"></textarea>
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>MAGIC RESISTANCE:</span>
          <textarea class="height-short" name="attr_magic_resistance" title="@{magic_resistance}" placeholder="Nil"></textarea>
        </label>
      </span>
      <div class="five-columns center">
        <span>
          <button type="roll" class="button stack-text" name="roll_saveparalysispoisondeath" title="%{selected|saveparalysispoisondeath} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Paralysis, Poison or Death Magic}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{saveparalysispoisondeath}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">POISON</button>
          <input type="text" class="width-smaller border" name="attr_saveparalysispoisondeath_base" title="@{saveparalysispoisondeath_base}" value="20">
        </span>
        <span>
          <button class="button stack-text" type="roll" name="roll_savepetrificationpolymorph" title="%{selected|savepetrificationpolymorph} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Petrification or Polymorph}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savepetrificationpolymorph}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">PETRIFY</button>
          <input type="text" class="width-smaller border" name="attr_savepetrificationpolymorph_base" title="@{savepetrificationpolymorph_base}" value="20">
        </span>
        <span>
          <button type="roll" class="button stack-text" name="roll_saverodsstaveswands" title="%{selected|saverodsstaveswands} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Rods, Staves, or Wands}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{saverodsstaveswands}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">WAND</button>
          <input type="text" class="width-smaller border" name="attr_saverodsstaveswands_base" title="@{saverodsstaveswands_base}" value="20">
        </span>
        <span>
          <button type="roll" class="button stack-text" name="roll_savebreathweapons" title="%{selected|savebreathweapons} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Breath Weapon}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savebreathweapons}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">BREATH</button>
          <input type="text" class="width-smaller border" name="attr_savebreathweapons_base" title="@{savebreathweapons_base}" value="20">
        </span>
        <span>
          <button type="roll" class="button stack-text" name="roll_savespells" title="%{selected|savespells} | NPC Roll" value="@{whisper_npc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Spells}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savespells}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">SPELL</button>
          <input type="text" class="width-smaller border" name="attr_savespells_base" title="@{savespells_base}" value="20">
        </span>
      </div>
      <span class="inline-label">
        <label>
          <span>INTELLIGENCE:</span>
          <select class="field-select width-fill" name="attr_intelligence_npc" title="@{intelligence_npc}">
            <option selected>Nil</option>
            <option>Non-intelligent/not ratable</option>
            <option>Animal intelligence</option>
            <option>Semi-intelligent</option>
            <option>Low intelligence</option>
            <option>Average (human) intelligence</option>
            <option>Very intelligent</option>
            <option>Highly intelligent</option>
            <option>Exceptionally intelligent</option>
            <option>Genius-level intelligence</option>
            <option>Supra-genius</option>
            <option>Godlike intelligence</option>
          </select>
        </label>
        <textarea class="height-short" name="attr_intelligence_npc2" title="@{intelligence_npc2}" value="" placeholder="notes"></textarea>
      </span>
      <span class="inline-label">
        <label>
          <span>ALIGNMENT:</span>
          <input type="text" class="width-medium" name="attr_alignment" title="@{alignment}" />
        </label>
      </span>
      <span class="inline-label split">
        <label title="Natural/Unaltered size.">
          <span>SIZE:</span>
          <select class="field-select" name="attr_size" title="@{size}">
            <option>S</option>
            <option selected>M</option>
            <option>L</option>
          </select>
        </label>
        <label title="Current/Altered size.">
          <span>Temp Size:</span>
          <select class="field-select" name="attr_size2" title="@{size2}">
            <option>S</option>
            <option selected>M</option>
            <option>L</option>
          </select>
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>PSlONlC ABILITY:</span>
          <input type="text" class="width-medium" name="attr_psionic_ability" title="@{psionic_ability}" value="" placeholder="Nil" />
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>Attack/Defense Modes</span>
          <input type="text" class="width-medium" name="attr_psionic_modes" title="@{psionic_modes}" value="" placeholder="Nil" />
        </label>
      </span>
      <span class="inline-label">
        <label>
          <span>LEVEL/XP VALUE:</span>
          <input type="text" class="width-large" name="attr_level_xp_value" title="@{level_xp_value}" value="" placeholder="Nil" />
      </span>
      </span>
    </section>
    <section class="npc-box statblock3">
      <input type="checkbox" class="hidden toggle-avatar" name="attr_sheet_image" value="1" checked />
      <div class="image-avatar" name="attr_sheet_image_url" title="Avatar">
        <img alt="" name="attr_character_avatar" title="Avatar">&nbsp;
      </div>
    </section>
    <section class="npc-box statblock4">
      <textarea name="attr_npc_notes" title="@{npc_notes}" placeholder="Enter Notes/Description..." style="height:100%;"></textarea>
    </section>
    <!-- Header -->
    <section class="header-box">
      <!--Details-->
      <div class="heading-box">
        <span class="sect">
          <input type="text" class="width-fill border text-large" style="padding:5px;margin: -1em 0 .85em 0;" name="attr_character_name" title="@{character_name}" placeholder="Character Name">
          <span class="inline-label">
            <label>
              <span>Race:</span>
              <input type="text" class="width-fill" name="attr_race" title="@{race}" placeholder="Description" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Alignment:</span>
              <input type="text" class="width-fill" name="attr_alignment" title="@{alignment}" placeholder="Description" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Class:</span>
              <input type="text" class="width-large" name="attr_class" title="@{class}" placeholder="Class" />
            </label>
            <label>
              <span>Lvl:</span>
              <input type="text" class="width-smaller" name="attr_level" title="@{level}" value="0" />
            </label>
          </span>
          <span class="inline-label toggle-multiclass">
            <label>
              <span>Class:</span>
              <input type="text" class="width-large" name="attr_secondclass" title="@{secondclass}" placeholder="Class" />
            </label>
            <label>
              <span>Lvl:</span>
              <input type="text" class="width-smaller" name="attr_level_2" title="@{level_2}" value="0" />
            </label>
          </span>
          <span class="inline-label toggle-multiclass">
            <label>
              <span>Class:</span>
              <input type="text" class="width-large" name="attr_thirdclass" title="@{thirdclass}" placeholder="Class" />
            </label>
            <label>
              <span>Lvl:</span>
              <input type="text" class="width-smaller" name="attr_level_3" title="@{level_3}" value="0" />
            </label>
          </span>
          <span class="inline-label toggle-multiclass-swap">
            <label style="width: min-content;">
              <span>XP:</span>
              <input type="text" class="width-medium" name="attr_xp" title="@{xp}" value="0" />
            </label>
            <label>
              <input type="checkbox" class="width-smallest" name="attr_xp_bonus" title="@{xp_bonus}" value="1" />
              <span>10%</span>
            </label>
          </span>
        </span>
      </div>
      <!-- Logo and HP/AC-->
      <div class="logo-box center">
        <span class="span-all normalmode">
          &nbsp;
        </span>
        <span class="span-all darkmode">
          &nbsp;
        </span>
        <span class="span-two two-columns">
          <label>
            <span class="text-large">HP:</span>
            <span class="heart">
              <input type="text" class="heart-input" name="attr_hitpoints" title="@{hitpoints} | Current Hit Points." value="0" />
            </span>
            <span>/</span>
            <input type="text" class="width-smaller" name="attr_hitpoints_max" title="@{hitpoints|max} | Maximum Hit Points. No Damage." value="0" style="height: 1.85em;" />
          </label>
          <label>
            <span class="text-large">AC:</span>
            <span class="shield">
              <input type="text" class="shield-input" name="attr_armorclass" title="@{armorclass} | Best AC." value="10" />
            </span>
          </label>
          <span class="class-details">
            <input type="checkbox" class="sect-show" title="@{class-details-show}" name="attr_class-details_show" value="1" checked />
            <span class="subheader">Class Details</span><span class="material-icons"></span>
          </span>
          <span class="armor-details">
            <input type="checkbox" class="sect-show" title="@{armor-details-show}" name="attr_armor-details_show" value="1" checked />
            <span class="subheader">Armor Details</span><span class="material-icons"></span>
          </span>
        </span>
        <span class="ac-columns">
          <label class="label-under">
            <input type="text" class="readonly-span width-smaller" name="attr_armorclass_shieldless" title="@{armorclass_shieldless} | Best AC without a Shield bonus." value="0" />
            <span class="text-medium">Shieldless</span>
          </label>
          <label class="label-under">
            <input type="text" class="readonly-span width-smaller" name="attr_armorclass_rear" title="@{armorclass_rear} | Best AC without a Dex bonus." value="0" />
            <span class="text-medium">Rear</span>
          </label>
          <label class="label-under" title="@{armorclass_rating} | Best Armor Rating">
            <input type="text" class="readonly-span width-small" name="attr_armorclass_rating" value="-" />
            <span class="text-medium">AR</span>
          </label>
        </span>
      </div>
      <!-- Portrait -->
      <div class="portrait-box">
        <input type="checkbox" class="hidden toggle-avatar" name="attr_sheet_image" value="1" checked />
        <div class="image-avatar" name="attr_sheet_image_url" title="Avatar">
          <img alt="" name="attr_character_avatar" title="Avatar">
        </div>
      </div>
    </section>
    <!-- Class Details -->
    <section class="class-box">
      <input type="checkbox" class="hidden sect-show" name="attr_class-details_show" value="1" checked />
      <div class="sect border">
        <span class="class-columns column-header">
          <span>Class</span>
          <span>Lvl</span>
          <span>HD</span>
          <span>HP/Level</span>
          <span></span>
          <span>HP+Con</span>
          <span></span>
          <span>XP</span>
          <span>Next Level</span>
          <span>+10%</span>
        </span>
        <span class="class-columns">
          <input type="text" class="width-fill" name="attr_class" title="@{class}" placeholder="Class" />
          <input type="text" class="width-smaller" name="attr_level" title="@{level}" value="0" />
          <input type="text" class="width-medium" name="attr_hitdice" title="@{hitdice}" value="" placeholder="1d6" />
          <textarea class="width-medium" name="attr_hitpoints_1_tracked" title="@{hitpoints_1_tracked} | Track rolled HP and CON adjustments per level." placeholder="Track HP 1 hp+con 2 hp+con 3 hp+con etc."></textarea>
          <span class="text-large">=</span>
          <input type="text" class="width-smaller" name="attr_hitpoints_1_class" title="@{hitpoints_1_class} | Enter a running total of HP+CON." value="0" />
          <span></span>
          <input type="text" class="width-large" name="attr_xp" title="@{xp}" value="0" />
          <input type="text" class="width-large" name="attr_xp_next" title="@{xp_next}" value="0" />
          <input type="checkbox" class="width-smaller" name="attr_xp_bonus" title="@{xp_bonus} | XP bonus applies." value="1">
        </span>
        <span class="class-columns toggle-multiclass">
          <input type="text" class="width-fill" name="attr_secondclass" title="@{secondclass}" placeholder="2rd class" />
          <input type="text" class="width-smaller" name="attr_level_2" title="@{level_2}" value="0" />
          <input type="text" class="width-medium" name="attr_hitdice_2" title="@{hitdice_2}" value="" placeholder="1d6" />
          <textarea class="width-medium" name="attr_hitpoints_2_tracked" title="@{hitpoints_2_tracked} | Track rolled HP and CON adjustments per level." placeholder="Track HP 1 hp+con 2 hp+con 3 hp+con etc."></textarea>
          <span class="text-large">=</span>
          <input type="text" class="width-smaller" name="attr_hitpoints_2_class" title="@{hitpoints_2_class} | Enter a running total of HP+CON." value="0" />
          <span></span>
          <input type="text" class="width-large" name="attr_xp_2" title="@{xp_2}" value="0" />
          <input type="text" class="width-large" name="attr_xp_2_next" title="@{xp_2_next}" value="0" />
          <input type="checkbox" class="width-smaller" name="attr_xp_2_bonus" title="@{xp_2_bonus} | XP bonus applies." value="1">
        </span>
        <span class="class-columns toggle-multiclass">
          <input type="text" class="width-fill" name="attr_thirdclass" title="@{thirdclass}" placeholder="3rd class" />
          <input type="text" class="width-smaller" name="attr_level_3" title="@{level_3}" value="0" />
          <input type="text" class="width-medium" name="attr_hitdice_3" title="@{hitdice_3}" value="" placeholder="1d6" />
          <textarea class="width-medium" name="attr_hitpoints_3_tracked" title="@{hitpoints_3_tracked} | Track rolled HP and CON adjustments per level." placeholder="Track HP 1 hp+con 2 hp+con 3 hp+con etc."></textarea>
          <span class="text-large">=</span>
          <input type="text" class="width-smaller" name="attr_hitpoints_3_class" title="@{hitpoints_3_class} | Enter a running total of HP+CON." value="0" />
          <span></span>
          <input type="text" class="width-large" name="attr_xp_3" title="@{xp_3}" value="0" />
          <input type="text" class="width-large" name="attr_xp_3_next" title="@{xp_3_next}" value="0" />
          <input type="checkbox" class="width-smaller" name="attr_xp_3_bonus" title="@{xp_3_bonus} | XP bonus applies." value="1">
        </span>
        <hr class="toggle-multiclass">
        <span class="class-columns">
          <label>
            <span>Hide Multi-Class:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_multiclass" value="1" title="@{toggle_multiclass}" />
          </label>
          <span class="hp-calc-columns">
            <label class="label-under toggle-multiclass" title="@{hitpoints_class_total} | Uses the total HP+Con from table above.">
              <input type="text" class="width-medium" name="attr_hitpoints_class_total" value="0" readonly />
              <span>Total</span>
            </label>
            <label class="text-large toggle-multiclass" style="margin-top: -.85em;">/</label>
            <label class="label-under toggle-multiclass">
              <input type="text" class="width-medium" name="attr_hp_quotient" title="@{hp_quotient}" value="0" readonly />
              <span># of Classes</span>
            </label>
            <label class="text-large toggle-multiclass" style="margin-top: -.85em;">=</label>
            <label class="label-under" title="@{hitpoints_total} | Max Hit Points.">
              <input type="text" class="width-medium" name="attr_hitpoints_total" value="0" readonly />
              <span>TOTAL HP</span>
            </label>
            <span class="toggle-multiclass"></span>
            <label class="toggle-multiclass" title="@{hitpoints_remainder_total} | Used to track any remainder HP that would be lost due to rounding for mult-class characters.">
              <span>Partial HP:</span>
              <input type="number" class="width-small" name="attr_hitpoints_remainder_total" step="any" value="0" />
            </label>
            <label class="sync-lock" title="@{sync_hp_flag} | Let the sheet sync Total HP from Class Details with HP ( @{hitpoints_max} ).">
              <span style="white-space: nowrap;">Sync HP:</span>
              <input type="checkbox" class="width-small" name="attr_sync_hp_flag" value="1" />
              <span></span>
            </label>
          </span>
        </span>
      </div>
      <hr>
    </section>
    <!-- Armor Details-->
    <section class="armor-box">
      <input type="checkbox" class="hidden sect-show" name="attr_armor-details_show" value="1" checked />
      <div class="sect border">
        <span class="armor-columns column-header">
          <span></span>
          <span title="Only worn items are included in the AC calculations below.">In Use</span>
          <span>Armor Type</span>
          <span>AC</span>
          <span>AC Rating</span>
          <span title="Magical Bonuses">Magic Adj.</span>
          <span title="Additional AC adjustments for helm, shield, etc.">Misc. Adj.</span>
          <span>Bulk</span>
          <span title="Only carried items are included in weight calculations.">Carried?</span>
          <span>Wt</span>
          <span class="toggle-costs">Cost</span>
        </span>
        <span class="armor-columns">
          <span class="span-three center">
            <span class="two-columns inline-label">
              <label>Unarmored Base</label>
              <input type="checkbox" class="hidden" name="attr_unarmored_worn" title="@{unarmored_worn}" value="1" checked />
              <input type="text" class="width-fill" name="attr_unarmored" title="@{unarmored}" placeholder="No Armor (10)" />
            </span>
          </span>
          <select class="select" name="attr_unarmored_ac" title="@{unarmored_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_unarmored_base" title="@{unarmored_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
            <option value="-">-</option>
          </select>
        </span>
        <span class="armor-columns">
          <label>Armor 1</label>
          <input type="checkbox" name="attr_armortype_worn" title="@{armortype_worn}" value="1" checked />
          <input type="text" class="width-fill" name="attr_armortype" title="@{armortype}" placeholder="Description" />
          <select class="select" name="attr_armortype_ac" title="@{armortype_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
            <!-- additional range to handle magrating AC-->
            <option class="hidden" value="-1">-1</option>
            <option class="hidden" value="-2">-2</option>
            <option class="hidden" value="-3">-3</option>
            <option class="hidden" value="-4">-4</option>
            <option class="hidden" value="-5">-5</option>
            <option class="hidden" value="-6">-6</option>
            <option class="hidden" value="-7">-7</option>
            <option class="hidden" value="-8">-8</option>
            <option class="hidden" value="-9">-9</option>
            <option class="hidden" value="-10">-10</option>
          </select>
          <select class="select" name="attr_armortype_base" title="@{armortype_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armortype_magic_error" value="1" checked/>
          <input type="text" class="width-small" name="attr_armortype_magic" value="0" title="@{armortype_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <span></span>
          <select class="select width-fill" name="attr_armortype_bulk" title="@{armortype_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armortype_carried" title="@{armortype_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armor_weight" title="@{armor_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armor_cost" title="@{armor_cost}" value="0" />
        </span>
        <span class="armor-columns">
          <label>Armor 2</label>
          <input type="checkbox" name="attr_armortype2_worn" title="@{armortype2_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armortype2" title="@{armortype2}" placeholder="Description" />
          <select class="select" name="attr_armortype2_ac" title="@{armortype2_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_armortype2_base" title="@{armortype2_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armortype2_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armortype2_magic" value="0" title="@{armortype2_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <span></span>
          <select class="select width-fill" name="attr_armortype2_bulk" title="@{armortype2_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armortype2_carried" title="@{armortype2_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armortype2_weight" title="@{armortype2_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armortype2_cost" title="@{armortype2_cost}" value="0" />
        </span>
        <span class="armor-columns">
          <label>Shield</label>
          <input type="checkbox" name="attr_armorshield_worn" title="@{armorshield_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armorshield" title="@{armorshield}" placeholder="Description" />
          <select class="select" name="attr_armorshield_ac" title="@{armorshield_ac} | ie +2 lowers AC by -2.">
            <option value="0" selected>0</option>
            <option value="-1">+1</option>
            <option value="-2">+2</option>
            <option value="-3">+3</option>
            <option value="-4">+4</option>
            <option value="-5">+5</option>
            <option value="-6">+6</option>
            <option value="-7">+7</option>
            <option value="-8">+8</option>
            <option value="-9">+9</option>
            <option value="-10">+10</option>
          </select>
          <select class="select" name="attr_armorshield_base" title="@{armorshield_base}">
            <option value="0" selected>0</option>
            <option value="-1">+1</option>
            <option value="-2">+2</option>
            <option value="-3">+3</option>
            <option value="-4">+4</option>
            <option value="-5">+5</option>
            <option value="-6">+6</option>
            <option value="-7">+7</option>
            <option value="-8">+8</option>
            <option value="-9">+9</option>
            <option value="-10">+10</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorshield_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorshield_magic" value="0" title="@{armorshield_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorshield_mod_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorshield_mod" value="0" title="@{armorshield_mod} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <select class="select width-fill" name="attr_armorshield_bulk" title="@{armorshield_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armorshield_carried" title="@{armorshield_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorshield_weight" title="@{armorshield_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorshield_cost" title="@{armorshield_cost}" value="0" />
        </span>
        <span class="armor-columns">
          <label>Helm</label>
          <input type="checkbox" name="attr_armorhelmet_worn" title="@{armorhelmet_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armorhelmet" title="@{armorhelmet}" placeholder="Description" />
          <select class="select" name="attr_armorhelmet_ac" title="@{armorhelmet_ac} | Other than Magic Bonuses, Helms do not impact Total AC calculations.">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <span></span>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorhelmet_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorhelmet_magic" value="0" title="@{armorhelmet_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <span></span>
          <span></span>
          <input type="checkbox" name="attr_armorhelmet_carried" title="@{armorhelmet_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorhelmet_weight" title="@{armorhelmet_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorhelmet_cost" title="@{armorhelmet_cost}" value="0" />
        </span>
        <span class="armor-columns" style="margin-bottom: -.25em;">
          <label>Other</label>
          <input type="checkbox" name="attr_armorother_worn" title="@{armorother_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armorother" title="@{armorother}" placeholder="Description" />
          <select class="select" name="attr_armorother_ac" title="@{armorother_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_armorother_base" title="@{armorother_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother_magic" value="0" title="@{armorother_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother_mod_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother_mod" value="0" title="@{armorother_mod} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <select class="select width-fill" name="attr_armorother_bulk" title="@{armorother_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armorother_carried" title="@{armorother_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother_weight" title="@{armorother_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorother_cost" title="@{armorother_cost}" value="0" />
        </span>
        <input type="checkbox" class="sect-show" style="margin-top: -6px;" title="@{armorother-show}" name="attr_armorother_show" value="1" />
        <span style="top: -6px;position: relative;">More</span><span class="material-icons" style="padding-bottom: 6px;"></span>
        <span class="sect armor-columns">
          <label>Other</label>
          <input type="checkbox" name="attr_armorother2_worn" title="@{armorother2_worn}" value="1" />
          <input type="text" class="width-fill" style="z-index:2;" name="attr_armorother2" title="@{armorother2}" placeholder="Description" />
          <select class="select" name="attr_armorother2_ac" title="@{armorother2_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_armorother2_base" title="@{armorother2_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother2_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother2_magic" value="0" title="@{armorother2_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother2_mod_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother2_mod" value="0" title="@{armorother2_mod} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <select class="select width-fill" name="attr_armorother2_bulk" title="@{armorother2_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armorother2_carried" title="@{armorother2_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother2_weight" title="@{armorother2_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorother2_cost" title="@{armorother2_cost}" value="0" />
        </span>
        <span class="sect armor-columns">
          <label>Other</label>
          <input type="checkbox" name="attr_armorother3_worn" title="@{armorother3_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armorother3" title="@{armorother3}" placeholder="Description" />
          <select class="select" name="attr_armorother3_ac" title="@{armorother3_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_armorother3_base" title="@{armorother3_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother3_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother3_magic" value="0" title="@{armorother3_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother3_mod_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother3_mod" value="0" title="@{armorother3_mod} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <select class="select width-fill" name="attr_armorother3_bulk" title="@{armorother3_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armorother3_carried" title="@{armorother3_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother3_weight" title="@{armorother3_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorother3_cost" title="@{armorother3_cost}" value="0" />
        </span>
        <span class="sect armor-columns">
          <label>Other</label>
          <input type="checkbox" name="attr_armorother4_worn" title="@{armorother4_worn}" value="1" />
          <input type="text" class="width-fill" name="attr_armorother4" title="@{armorother4}" placeholder="Description" />
          <select class="select" name="attr_armorother4_ac" title="@{armorother4_ac}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <select class="select" name="attr_armorother4_base" title="@{armorother4_base}">
            <option value="10" selected>10</option>
            <option value="9">9</option>
            <option value="8">8</option>
            <option value="7">7</option>
            <option value="6">6</option>
            <option value="5">5</option>
            <option value="4">4</option>
            <option value="3">3</option>
            <option value="2">2</option>
            <option value="1">1</option>
            <option value="0">0</option>
          </select>
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother4_magic_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother4_magic" value="0" title="@{armorother4_magic} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <input type="checkbox" class="hidden toggle-input-error" name="attr_armorother4_mod_error" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother4_mod" value="0" title="@{armorother4_mod} | Bonuses lower AC.  Penalties raise AC.  ie '+2' bonus lowers AC by -2 while a '-2' penalty will raise AC by 2." />
          <select class="select width-fill" name="attr_armorother4_bulk" title="@{armorother4_bulk}">
            <option value="0" selected>n/a</option>
            <option value="1">non-Bulky 12"</option>
            <option value="2">Fairly 9"</option>
            <option value="3">Bulky 6"</option>
          </select>
          <input type="checkbox" name="attr_armorother4_carried" title="@{armorother4_carried}" value="1" checked />
          <input type="text" class="width-small" name="attr_armorother4_weight" title="@{armorother4_weight}" value="0" />
          <input type="text" class="width-small toggle-costs" name="attr_armorother4_cost" title="@{armorother4_cost}" value="0" />
        </span>
        <span class="armor-columns">
          <!--column tally - In Use/Total-->
          <span class="span-three"></span>
          <span class="readonly-span-textonly" title="In Use/Best AC">
            <span>
              <span name="attr_armorclass_base_used"></span>
              <input type="text" class="hidden" name="attr_armorclass_base_used" value="0" readonly />
            </span>
            <span>/</span>
            <span>
              <span name="attr_armorclass_base_best"></span>
              <input type="text" class="hidden" name="attr_armorclass_base_best" value="0" readonly />
            </span>
          </span>
          <span class="readonly-span-textonly" title="In Use/Best AR">
            <span>
              <span name="attr_armorclass_rating_used"></span>
              <input type="text" class="hidden" name="attr_armorclass_rating_used" value="0" readonly />
            </span>
            <span>/</span>
            <span>
              <span name="attr_armorclass_rating_best"></span>
              <input type="text" class="hidden" name="attr_armorclass_rating_best" value="0" readonly />
            </span>
          </span>
          <span class="readonly-span-textonly" title="In Use/Total Magic">
            <span>
              <span name="attr_armorclass_magic_with_shield"></span>
              <input type="text" class="hidden" name="attr_armorclass_magic_with_shield" value="0" readonly />
            </span>
            <span>/</span>
            <span>
              <span name="attr_armorclass_magic_total"></span>
              <input type="text" class="hidden" name="attr_armorclass_magic_total" value="0" readonly />
            </span>
          </span>
          <span class="readonly-span-textonly" title="In Use/Total Misc.">
            <span>
              <span name="attr_armorclass_mod_with_shield"></span>
              <input type="text" class="hidden" name="attr_armorclass_mod_with_shield" value="0" readonly />
            </span>
            <span>/</span>
            <span>
              <span name="attr_armorclass_mod_total"></span>
              <input type="text" class="hidden" name="attr_armorclass_mod_total" value="0" readonly />
            </span>
          </span>
          <span class="span-three"></span>
        </span>
        <hr>
        <!--AC Calcs-->
        <span class="armor-columns">
          <span class="ac-calc-columns">
            <label class="label-under-small" title="@{unarmored_base} | Enter a value for Natural Armor or a No Armor rating. Default is 10.">
              <input type="text" class="readonly-span width-small" name="attr_unarmored_base" value="10" />
              <span>UnArmored</span>
            </label>
            <label class="label-under-small" title="@{armorclass_base} | Compares the UnArmored Base AC value to the AC from above and uses the lowest.">
              <input type="text" class="readonly-span width-small" name="attr_armorclass_base" value="0" />
              <span>AC Base</span>
            </label>
            <label class="label-under-small" title="@{armorclass_combined_mod_magic} | Magic + Misc. Adjustments from above.">
              <input type="text" class="hidden" name="attr_armorclass_combined_mod_magic" value="0" />
              <input type="text" class="readonly-span width-small" name="attr_armorclass_combined_mod_magic_inverted" value="0" />
              <!--mod and magic totals stored here if needed-->
              <input type="text" class="hidden" name="attr_armorclass_magic" value="0" readonly />
              <input type="text" class="hidden" name="attr_armorclass_mod" value="0" readonly />
              <span>Armor Adj.</span>
            </label>
            <label class="text-large" style="margin-top: -.85em;">=</label>
            <label class="label-under" title="@{armorclass_rear} | Best AC without a Dex bonus." >
              <input type="text" class="readonly-span field-border" name="attr_armorclass_rear" value="0" />
              <span>Rear</span>
            </label>
            <label class="label-under-small" title="@{armorbonus} | Defensive Adjustment from Dexterity row.">
              <input type="text" class="readonly-span width-small" name="attr_armorbonus_inverted" value="0" />
              <span class="inline-label center">
                <span>Dex Adj.</span>
                <input type="checkbox" style="width:1em;" name="attr_armorbonus_toggle" title="@{armorbonus_toggle} | Dex bonus may need to be removed for certain conditions." value="1" checked/>
              </span>
            </label>
            <label class="text-large" style="margin-top: -.85em;">=</label>
            <label class="label-under" title="@{armorclass_shieldless} | Best AC without a Shield bonus.">
              <input type="text" class="readonly-span field-border" name="attr_armorclass_shieldless" value="0" />
              <span>Shieldless</span>
            </label>
            <label class="label-under-small" title="@{armorclass_combined_shield_mod_magic} | Magic + Misc. Adjustments from Shield above.">
              <input type="text" class="hidden" name="attr_armorclass_combined_shield_mod_magic" value="0" />
              <input type="text" class="readonly-span width-small" name="attr_armorclass_combined_shield_mod_magic_inverted" value="0" />
              <!--mod and magic totals stored here if needed-->
              <input type="text" class="hidden" name="attr_armorclass_shield_mod" value="0" readonly />
              <input type="text" class="hidden" name="attr_armorclass_shield_magic" value="0" readonly />
              <span>Shield Adj.</span>
            </label>
            <label class="text-large" style="margin-top: -.85em;">=</label>
            <label class="label-under" title="@{armorclass_total} | Best AC">
              <input type="text" class="readonly-span field-border" name="attr_armorclass_total" value="0" />
              <span>Total AC</span>
            </label>
            <label class="label-under-small" title="@{armorclass_rating} | Best AR">
              <input type="text" class="readonly-span width-small" name="attr_armorclass_rating" value="-" />
              <span>Armor Rating</span>
            </label>
          </span>
        </span>
        <span class="armor-columns">
          <span class="span-four"></span>
          <span class="inline-label span-six">
            <span class="inline-label" title="@{autocalc_ac} | This is a persistant setting. Let the sheet auto-calculate AC based on the values entered in the Armor Details table above. This will overwrite all values in the bottom row.">
              <label style="align-items: end;width: 7em;">Auto-Calc AC:</label>
              <input type="checkbox" class="width-small" name="attr_autocalc_ac" value="1" checked />
              <button type="action" class="button width-medium" name="act_calcac" title="This is an immediate action and works regardless of the Auto-Calc AC setting. Let the sheet auto-calculate AC based on the values entered in the Armor Details table above. This will overwrite all values in the bottom row." style="margin: .5em;">Calc AC</button>
            </span>
            <span class="inline-label sync-lock" title="@{sync_ac_flag} | Let the sheet sync Total AC from Armor Details with AC ( @{armorclass} ).">
              <label style="align-items: end;">Sync AC:</label>
              <input type="checkbox" class="width-small" name="attr_sync_ac_flag" value="1" />
              <span></span>
            </span>
            <span class="inline-label" title="@{armor_rating_flag} | AC is not from armor. Weapons vs Armor Type does not apply.">
              <label style="align-items: end;">
                Ignore AR:
              </label>
              <input class="width-small" type="checkbox" name="attr_armor_rating_flag" value="1" />
            </span>
          </span>
        </span>
        </span>
        <span class="inline-label">
          <label>Notes:
            <textarea class="height-short" name="attr_defensive_notes" title="@{defensive_notes}" placeholder="Enter Defensive Notes..."></textarea>
          </label>
        </span>
      </div>
    </section>
    <!-- Personal -->
    <section class="personal-attributes-box">
      <input type="checkbox" class="sect-show" title="@{personal_attributes-info-show}" name="attr_personal_attributes_info_show" value="1" checked />
      <div class="header">PERSONAL ATTRIBUTES</div><span class="material-icons"></span>
      <div class="sect">
        <span class="details-row1">
          <span class="inline-label">
            <label>
              <span>Gender:</span>
              <input type="text" class="width-fill" name="attr_gender" title="@{gender}" placeholder="n/a" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Age:</span>
              <input type="text" class="width-small-plus" name="attr_age" title="@{age}" value="0" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Ht:</span>
              <input type="text" class="width-small-plus" name="attr_height" title="@{height}" value="0" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Wt:</span>
              <input type="text" class="width-small-plus" name="attr_weight" title="@{weight}" value="0" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Eyes:</span>
              <input type="text" class="width-fill" name="attr_eyes" title="@{eyes}" placeholder="Color" />
            </label>
          </span>
          <span class="inline-label">
            <label>
              <span>Hair:</span>
              <input type="text" class="width-fill" name="attr_hair" title="@{hair}" placeholder="Color" />
            </label>
          </span>
          <span class="inline-label">
            <label title="Natural/Unaltered size.">
              <span>Natural Size:</span>
              <select class="width-small field-select" name="attr_size" title="@{size}">
                <option>S</option>
                <option selected>M</option>
                <option>L</option>
              </select>
            </label>
            <label title="Altered size.">
              <span>Temp Size:</span>
              <select class="width-small field-select" name="attr_size2" title="@{size2}">
                <option>S</option>
                <option selected>M</option>
                <option>L</option>
              </select>
            </label>
          </span>
        </span>
        </span>
        <span class="details-row2">
          <span class="inline-label">
            <label>
              <span>Languages:</span>
              <textarea class="height-short" name="attr_languages" title="@{languages}" placeholder="languages known"></textarea>
            </label>
          </span>
        </span>
        <span class="details-row">
          <label class="inline-label long">
            <span>Deity:</span>
            <input type="text" class="width-fill left" name="attr_deity" title="@{deity}" placeholder="Description" />
          </label>
          <label class="inline-label long">
            <span>Secondary Skill:</span>
            <input type="text" class="width-fill left" name="attr_secondary_skill" title="@{secondary_skill}" placeholder="Description" />
          </label>
        </span>
        <span class="details-row2">
          <span class="inline-label">
            <label>
              <span>Notes:</span>
              <textarea class="height-half" name="attr_racial_notes" title="@{racial_notes}" placeholder="Enter Racial Notes..."></textarea>
            </label>
          </span>
        </span>
        <span class="details-row2">
          <input type="checkbox" class="sect-show" title="@{character-description-show}" name="attr_character-description_show" value="1" checked />
          <span class="subheader">Character History/Bio</span><span class="material-icons"></span>
          <textarea class="sect height-half" name="attr_character_description" placeholder="Enter Character Description..."></textarea>
        </span>
      </div>
      <hr>
    </section>
    <!-- Abilities -->
    <section class="abilities-box">
      <input type="checkbox" class="sect-show" title="@{abilities_info_show}" name="attr_abilities_info_show" value="1" checked />
      <div class="header">ABILITIES</div><span class="material-icons"></span>
      <div class="sect">
        <span class="abilities-columns">
          <!-- STR -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_strength_check_roll" title="%{selected|strength_check_roll}" value="@{strength_check_macro_text}">STR</button>
            <input type="text" class="hidden" name="attr_strength_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Strength Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{strength} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_strength" title="@{strength}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalstrength" title="@{exceptionalstrength}" value="0" />
          </label>
          <label>
            <span class="stack-text">To-Hit Adj.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_meleebonus" title="@{meleebonus} | Melee attack &quot;To-Hit&quot; adjustment." value="0" />
          <label>
            <span class="stack-text">Damage Adj.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_dmgbonus" title="@{dmgbonus} | Melee attack Damage adjustment." value="0" />
          <label>
            <span class="stack-text">Weight All.</span>
          </label>
          <input type="text" class="width-small" name="attr_encumbrancebonus" title="@{encumbrancebonus} | Weight Allowance in gp." value="0" />
          <button class="button stack-text" type="roll" name="attr_minorstrengthfeat-roll" title="%{selected|minorstrengthfeat-roll} | Minor Strength Feat" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Open Doors 1d?{Choose a die roll based on Strength|STR 3-18(00) 1d6,6|STR 19-20 1d8,8|STR 21 1d10,10|STR 22-23 1d12,12|STR 24 1d20,20|STR 25 1d24,24}}} {{roll_low=[[ 1d?{Choose a die roll based on Strength|STR 3-18(00) 1d6,6|STR 19-20 1d8,8|STR 21 1d10,10|STR 22-23 1d12,12|STR 24 1d20,20|STR 25 1d24,24} ]] }} {{roll_target=[[ @{minorstrengthfeat} ]]}} {{[Open a Locked Door?](~@{character_id}|minorstrengthfeat_locked-roll)}} {{freetext=[[ @{minorstrengthfeat_locked} ]] in 6 chance to force open a locked, barred, magically held, or wizard locked door. Fighter's only.}}">Open Doors</button>
          <span class="two-columns">
            <input type="text" class="width-smallest" name="attr_minorstrengthfeat" title="@{minorstrengthfeat} | Minor Strength Feat: uses the highest # from STR table." value="0">
            <span>
              <span class="text-superscript" title="@{minorstrengthfeat_locked} | Fighter's can attempt to force open a locked, barred, magically held, or wizard locked door.">
                (<span name="attr_minorstrengthfeat_locked">0</span>)
              </span>
              <button class="hidden" type="roll" name="attr_minorstrengthfeat_locked-roll" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Open Locked Door 1d6}} {{roll_low=[[ 1d6 ]] }} {{roll_target=[[ @{minorstrengthfeat_locked} ]]}}"></button>
            </span>
            <input type="hidden" name="attr_minorstrengthfeat_locked" value="0" />
          </span>
          <button class="button stack-text" type="roll" name="attr_majorstrengthfeat-roll" title="%{selected|majorstrengthfeat-roll} | Major Strength Feat" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Bend Bars/Lift Gates}} {{roll_low=[[1d100cs]]%}} {{roll_target=[[ @{majorstrengthfeat}]]%}}">Bend Bars</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_majorstrengthfeat" title="@{majorstrengthfeat} | Major Strength Feat" value="0" />
          </label>
          <!-- INT -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_intelligence_check_roll" title="%{selected|intelligence_check_roll}" value="@{intelligence_check_macro_text}">INT</button>
            <input type="text" class="hidden" name="attr_intelligence_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Intelligence Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{intelligence} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_intelligence" title="@{intelligence}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalintelligence" title="@{exceptionalintelligence}" value="0" />
          </label>
          <label>
            <span class="stack-text">Add. Lang.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_bonuslanguages" title="@{bonuslanguages} | Auto-filled for humans. Manual entry required for demi-humans." value="0" />
          <button class="button stack-text" type="roll" name="attr_knowspell-roll" title="%{selected|knowspell-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Chance to Know Spell}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{knowspell} ]]%}}">Know Spell</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_knowspell" title="@{knowspell}" value="0" />
          </label>
          <label>
            <span class="stack-text">Min # Spells</span>
          </label>
          <input type="text" class="width-smaller" name="attr_minspells" title="@{minspells}" value="0" />
          <label>
            <span class="stack-text">Max # Spells</span>
          </label>
          <input type="text" class="width-smaller" name="attr_maxspells" title="@{maxspells}" value="0" />
          <label></label>
          <label></label>
          <!-- WIS -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_wisdom_check_roll" title="%{selected|wisdom_check_roll}" value="@{wisdom_check_macro_text}">WIS</button>
            <input type="text" class="hidden" name="attr_wisdom_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Wisdom Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{wisdom} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_wisdom" title="@{wisdom}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalwisdom" title="@{exceptionalwisdom}" value="0" />
          </label>
          <button class="button stack-text" type="roll" name="attr_mentalsave-roll" title="%{selected|mentalsave-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Mental Save}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] + [[ @{mentalsavebonus} ]][BON] ]]}} {{roll_target=[[?{Target # for success?|20}]]}} {{wis_applied=[[ @{mentalsavebonus} ]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">Mental Save</button>
          <input type="text" class="width-smaller" name="attr_mentalsavebonus" title="@{mentalsavebonus}" value="0" />
          <label>
            <span class="stack-text">Spell Bonus</span>
          </label>
          <span class="autoexpand span-two">
            <input type="text" name="attr_spellbonus" class="no-border" title="@{spellbonus} | Track the # of bonus spells/level as per the PHB." value="0/0/0/0/0/0/0" />
            <span name="attr_spellbonus"></span>
          </span>
          <label></label>
          <button class="button stack-text" type="roll" name="attr_spellfailure-roll" title="%{selected|spellfailure-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Chance of Spell Failure}} {{roll_high=[[ 1d100 ]]%}} {{roll_target=[[ @{spellfailure} ]]%}}">Spell Failure</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_spellfailure" title="@{spellfailure}" value="0" />
          </label>
          <label></label>
          <label></label>
          <!-- DEX -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_dexterity_check_roll" title="%{selected|dexterity_check_roll}" value="@{dexterity_check_macro_text}">DEX</button>
            <input type="text" class="hidden" name="attr_dexterity_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Dexterity Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{dexterity} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_dexterity" title="@{dexterity}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional">
            <input type="text" class="width-smallest no-border" name="attr_exceptionaldexterity" title="@{exceptionaldexterity}" value="0" />
          </label>
          <label>
            <span class="stack-text">Reaction Adj.</span>
          </label>
          <input type="text" class="hidden" name="attr_surprisebonus" value="0" />
          <input type="text" class="width-smaller" name="attr_surprisebonus_inverted" title="@{surprisebonus} | Penalty or bonus for both surprise situations and missile combat attacks." value="0" />
          <label>
            <span class="stack-text">Missile Adj.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_rangedbonus" title="@{rangedbonus} | Ranged attack &quot;To-Hit&quot; adjustment." value="0" />
          <label>
            <span class="stack-text">Defensive Adj.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_armorbonus" title="@{armorbonus} | Used to compute AC in the &quot;Armor Details&quot; section above." value="0" />
          <span class="span-three right">
            <button class="button stack-text" type="roll" name="attr_surprise-roll" title="%{selected|surprise-roll}" value="@{surprise_macro_text}">Surprise</button>
            <button class="button stack-text" type="roll" name="attr_init-roll" title="%{selected|init-roll}" value="@{init_macro_text}">Initiative</button>
          </span>
          <label></label>
          <!-- CON -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_constitution_check_roll" title="%{selected|constitution_check_roll}" value="@{constitution_check_macro_text}">CON</button>
            <input type="text" class="hidden" name="attr_constitution_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Constitution Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{constitution} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_constitution" title="@{constitution}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalconstitution" title="@{exceptionalconstitution}" value="0" />
          </label>
          <label>
            <span class="stack-text">HP Adj.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_hitpointbonus" title="@{hitpointbonus} | Max +2 unless Fighter, Paladin, or Ranger." value="0" />
          <button class="button stack-text" type="roll" name="attr_systemshock-roll" title="%{selected|systemshock-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=System Shock Survival}} {{roll_low=[[ 1d100 ]] %}} {{roll_target=[[ @{systemshock} ]]%}}">System Shock</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_systemshock" title="@{systemshock}" value="0" />
          </label>
          <button class="button stack-text" type="roll" name="attr_resurrectionsurvival-roll" title="%{selected|resurrectionsurvival-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Resurrection Survival}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{resurrectionsurvival} ]]%}}">Res. Survival</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_resurrectionsurvival" title="@{resurrectionsurvival}" value="0" />
          </label>
          <label></label>
          <label></label>
          <label></label>
          <label></label>
          <!-- CHA -->
          <label>
            <button type="roll" class="button stack-text text-large" name="attr_charisma_check_roll" title="%{selected|charisma_check_roll}" value="@{charisma_check_macro_text}">CHA</button>
            <input type="text" class="hidden" name="attr_charisma_check_macro_text" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Charisma Check}} {{roll_low=[[ @{ability_check_die}cs ]]}} {{roll_target=[[ @{charisma} ]]}}" />
          </label>
          <input type="text" class="field-border" name="attr_charisma" title="@{charisma}" value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalcharisma" title="@{exceptionalcharisma}" value="0" />
          </label>
          <label>
            <span class="stack-text">Max # Hench.</span>
          </label>
          <input type="text" class="width-smaller" name="attr_maximumhenchmen" title="@{maximumhenchmen}" value="0" />
          <button class="button stack-text" type="roll" name="attr_loyalty-roll" title="%{selected|loyalty-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Loyalty}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ 50 + (@{loyaltybonus}[LOYALTY]) + ( ?{Modifier?|0}[MOD] ) ]]%}} {{Loyalty Applied=[[@{loyaltybonus}]]%}} {{mod_applied=[[ ?{Modifier?|0} ]]%}}">Loyalty</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_loyaltybonus" title="@{loyaltybonus}" value="0" />
          </label>
          <button class="button stack-text" type="roll" name="attr_reaction-roll" title="%{selected|reaction-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Reaction}} {{roll=[[ 1d100 + (@{reactionbonus}[BON]) + ( ?{Modifier?|0}[MOD] ) ]]%}} {{Reaction Applied=[[@{reactionbonus}]]%}} {{mod_applied=[[ ?{Modifier?|0} ]]%}}">React.</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_reactionbonus" title="@{reactionbonus}" value="0" />
          </label>
          <button class="button stack-text" type="roll" name="attr_morale-roll" title="%{selected|morale-roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Morale Check}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{morale_base}[BASE] + ( ?{Modifier?|0}[MOD] ) ]]%}} {{mod_applied=[[ ?{Modifier?|0} ]]%}}">Morale</button>
          <label class="label-percent">
            <input type="text" class="width-smaller" name="attr_morale_base" title="@{morale_base} | Base is 50%. Adjust +/- per circumstances." value="50" />
          </label>
          <label></label>
          <label></label>
          <!-- COM -->
          <label class="toggle-comeliness">
            <span class="text-large">COM</span>
          </label>

          <input type="text" class="field-border toggle-comeliness" name="attr_comeliness" title="@{comeliness} | Score should reflect 'Adjusted Comeliness' which takes into account Charisma and/or any racial adjustments." value="10" />
          <label class="label-parenthesis-left label-parenthesis-right toggle-exceptional toggle-comeliness">
            <input type="text" class="width-smallest no-border" name="attr_exceptionalcomeliness" title="@{exceptionalcomeliness}" value="0" />
          </label>

          <span class="span-ten inline-label toggle-comeliness">
            <b class="text-large">=</b>
            <span class="stack-text">Base COM</span>
            <input type="text" class="width-smaller" name="attr_comeliness_base" title="@{comeliness_base} | Comeliness base score. ie un-adjusted roll." value="8" />
            <b class="text-large">+</b>
            <span class="stack-text">CHA Adj.</span>
            <input type="text" class="width-smaller" name="attr_comeliness_cha_adj" title="@{comeliness_cha_adj} | Same race Bonus/Penalty adjustment. Auto-calculated based on Charisma." value="0" readonly />
            <b class="text-large">+</b>
            <span class="stack-text">Racial Adj.</span>
            <select class="select" name="attr_comeliness_racial_adj" title="@{comeliness_racial_adj} | Bonus/Penalty adjustment as perceived by other races.">
              <option value="-3">Half-Orcs</option>
              <option value="-1">Dwarves, Gnomes</option>
              <option value="0" selected>Halflings, Humans</option>
              <option value="1">Half-Elves, Sylvan Elves</option>
              <option value="2">Gray Elves, High Elves</option>
            </select>
            <input class="width-smaller" name="attr_comeliness_racial_adj" value="0" readonly/>
          </span>
        </span>
      </div>
      <!-- Movement -->
      <div class="sect border">
        <label class="text-large center">Speed and Movement</label>
        <span class="basemove-columns column-header">
          <span class="span-four">Adjusted Speed</span>
          <span></span>
          <span></span>
          <span>Explore/Map</span>
          <span>Known Route</span>
          <span>Run/Flee</span>
        </span>
        <span class="basemove-columns">
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="0" readonly />
          <label class="label-under">
            <input type="text" class="width-smaller field-border" name="attr_movement" title="@{movement}" value="12" />
            <span>Normal</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="1" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_heavy" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_heavy" title="@{movement_heavy}"></span>
            <span>Heavy</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="2" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_load" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_load" title="@{movement_load}"></span>
            <span>Very Heavy</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="3" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_max" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_max" title="@{movement_max}"></span>
            <span class="long">Encumbered</span>
          </label>
          <h4 class="long">Move/Round</h4>
          <label class="text-large">=</label>
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_normal" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_normal" title="@{movement_normal}"></span>
            <span class="text-small">(Adj.Speed x1')</span>
          </label>
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_known" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_known" title="@{movement_known}"></span>
            <span class="text-small">(Adj.Speed x5')</span>
          </label>
          <label class="label-under">
            <input type="text" class="hidden" name="attr_movement_run" value="0" readonly />
            <span class="readonly-span no-border" name="attr_movement_run" title="@{movement_run}"></span>
            <span class="text-small">(Adj.Speed x10')</span>
          </label>
          <!--deprecated attribute: crawl kept in case attribute is needed -->
          <input type="text" class="hidden" name="attr_movement_crawl" value="0" readonly />
        </span>
      </div>
      <hr>
    </section>
    <!-- Saves -->
    <section class="saves-box">
      <input type="checkbox" class="sect-show" title="@{saves-info-show}" name="attr_saves_info_show" value="1" checked />
      <div class="header">SAVES</div><span class="material-icons"></span>
      <div class="sect">
        <span class="saves-columns column-header">
          <span></span>
          <span>TOTAL</span>
          <span></span>
          <span>Base/Class</span>
          <span></span>
          <span>Racial Adj.</span>
          <span></span>
          <span>Ability Adj.</span>
          <span></span>
          <span>Misc. Adj.</span>
          <span></span>
          <span>Temp. Adj.</span>
        </span>
        <span class="saves-columns">
          <button class="button subheader stack-text" type="roll" name="roll_saveparalysispoisondeath" title="%{selected|saveparalysispoisondeath}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Paralysis, Poison or Death Magic}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{saveparalysispoisondeath}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">POISON</button>
          <span><input type="text" class="width-smaller field-border readonly-span" name="attr_saveparalysispoisondeath" title="@{saveparalysispoisondeath}" value="20" /></span>
          <span class="text-large">=</span>
          <span><input type="text" class="width-smaller" name="attr_saveparalysispoisondeath_base" title="@{saveparalysispoisondeath_base}" value="20" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saveparalysispoisondeath_racial_mod" title="@{saveparalysispoisondeath_racial_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saveparalysispoisondeath_ability_mod" title="@{saveparalysispoisondeath_ability_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saveparalysispoisondeath_misc_mod" title="@{saveparalysispoisondeath_misc_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saveparalysispoisondeath_temp_mod" title="@{saveparalysispoisondeath_temp_mod}" value="0" /></span>
        </span>
        <span class="saves-columns">
          <button class="button subheader stack-text" type="roll" name="roll_savepetrificationpolymorph" title="%{selected|savepetrificationpolymorph}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Petrification or Polymorph}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savepetrificationpolymorph}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">PETRIFY</button>
          <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savepetrificationpolymorph" title="@{savepetrificationpolymorph}" value="20" /></span>
          <span class="text-large">=</span>
          <span><input type="text" class="width-smaller" name="attr_savepetrificationpolymorph_base" title="@{savepetrificationpolymorph_base}" value="20" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savepetrificationpolymorph_racial_mod" title="@{savepetrificationpolymorph_racial_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savepetrificationpolymorph_ability_mod" title="@{savepetrificationpolymorph_ability_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savepetrificationpolymorph_misc_mod" title="@{savepetrificationpolymorph_misc_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savepetrificationpolymorph_temp_mod" title="@{savepetrificationpolymorph_temp_mod}" value="0" /></span>
        </span>
        <span class="saves-columns">
          <button class="button subheader stack-text" type="roll" name="roll_saverodsstaveswands" title="%{selected|saverodsstaveswands}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Rods, Staves, or Wands}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{saverodsstaveswands}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">WAND</button>
          <span><input type="text" class="width-smaller field-border readonly-span" name="attr_saverodsstaveswands" title="@{saverodsstaveswands}" value="20" /></span>
          <span class="text-large">=</span>
          <span><input type="text" class="width-smaller" name="attr_saverodsstaveswands_base" title="@{saverodsstaveswands_base}" value="20" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saverodsstaveswands_racial_mod" title="@{saverodsstaveswands_racial_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saverodsstaveswands_ability_mod" title="@{saverodsstaveswands_ability_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saverodsstaveswands_misc_mod" title="@{saverodsstaveswands_misc_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_saverodsstaveswands_temp_mod" title="@{saverodsstaveswands_temp_mod}" value="0" /></span>
        </span>
        <span class="saves-columns">
          <button class="button subheader stack-text" type="roll" name="roll_savebreathweapons" title="%{selected|savebreathweapons}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Breath Weapon}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savebreathweapons}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">BREATH</button>
          <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savebreathweapons" title="@{savebreathweapons}" value="20" /></span>
          <span class="text-large">=</span>
          <span><input type="text" class="width-smaller" name="attr_savebreathweapons_base" title="@{savebreathweapons_base}" value="20" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savebreathweapons_racial_mod" title="@{savebreathweapons_racial_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savebreathweapons_ability_mod" title="@{savebreathweapons_ability_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savebreathweapons_misc_mod" title="@{savebreathweapons_misc_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savebreathweapons_temp_mod" title="@{savebreathweapons_temp_mod}" value="0" /></span>
        </span>
        <span class="saves-columns">
          <button class="button subheader stack-text" type="roll" name="roll_savespells" title="%{selected|savespells}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Spells}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savespells}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}">SPELL</button>
          <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savespells" title="@{savespells}" value="20" /></span>
          <span class="text-large">=</span>
          <span><input type="text" class="width-smaller" name="attr_savespells_base" title="@{savespells_base}" value="20" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savespells_racial_mod" title="@{savespells_racial_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type="text" class="width-smaller" name="attr_savespells_ability_mod" title="@{savespells_ability_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type=" text" class="width-smaller" name="attr_savespells_misc_mod" title="@{savespells_misc_mod}" value="0" /></span>
          <span class="text-large">+</span>
          <span><input type=" text" class="width-smaller" name="attr_savespells_temp_mod" title="@{savespells_temp_mod}" value="0" /></span>
        </span>
        <input type="checkbox" class="sect-show" title="@{custom-saves-show}" name="attr_custom_saves_show" value="1" />
        <span class="subheader">Custom Saves</span><span class="material-icons"></span>
        <div class="sect">
          <span class="saves-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_savemisc" title="%{selected|savemisc}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{savemisc_name}}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savemisc}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}"><span name="attr_savemisc_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_savemisc_name" title="@{savemisc_name}" value="Custom..." />
            </details>
            <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savemisc" title="@{savemisc}" value="20" /></span>
            <span class="text-large">=</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc_base" title="@{savemisc_base}" value="20" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc_racial_mod" title="@{savemisc_racial_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc_ability_mod" title="@{savemisc_ability_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc_misc_mod" title="@{savemisc_misc_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc_temp_mod" title="@{savemisc_temp_mod}" value="0" /></span>
          </span>
          <span class="saves-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_savemisc1" title="%{selected|savemisc1}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{savemisc1_name}}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savemisc1}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}"><span name="attr_savemisc1_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_savemisc1_name" title="@{savemisc1_name}" value="Custom..." />
            </details>
            <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savemisc1" title="@{savemisc1}" value="20" /></span>
            <span class="text-large">=</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc1_base" title="@{savemisc1_base}" value="20" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc1_racial_mod" title="@{savemisc1_racial_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc1_ability_mod" title="@{savemisc1_ability_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc1_misc_mod" title="@{savemisc1_misc_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc1_temp_mod" title="@{savemisc1_temp_mod}" value="0" /></span>
          </span>
          <span class="saves-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_savemisc2" title="%{selected|savemisc2}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{savemisc2_name}}} {{roll_high=[[ 1d20 + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[@{savemisc2}]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}}"><span name="attr_savemisc2_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_savemisc2_name" title="@{savemisc2_name}" value="Custom..." />
            </details>
            <span><input type="text" class="width-smaller field-border readonly-span" name="attr_savemisc2" title="@{savemisc2}" value="20" /></span>
            <span class="text-large">=</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc2_base" title="@{savemisc2_base}" value="20" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc2_racial_mod" title="@{savemisc2_racial_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type="text" class="width-smaller" name="attr_savemisc2_ability_mod" title="@{savemisc2_ability_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc2_misc_mod" title="@{savemisc2_misc_mod}" value="0" /></span>
            <span class="text-large">+</span>
            <span><input type=" text" class="width-smaller" name="attr_savemisc2_temp_mod" title="@{savemisc2_temp_mod}" value="0" /></span>
          </span>
        </div>
        <label>
          <span>Notes:</span>
          <textarea class="height-short" name="attr_savingthrow_notes" title="@{savingthrow_notes}" placeholder="Resistances, Immunities, Saving Throw adjustments, etc."></textarea>
        </label>
      </div>
      <hr>
    </section>
    <!-- Weapons -->
    <section class="weapons-box">
      <input type="checkbox" class="sect-show" title="@{weapons-info-show}" name="attr_weapons_info_show" value="1" checked />
      <div class="header">
        <span class="hide-as-npc">WEAPONS</span>
        <span class="hide-as-pc">ATTACKS</span>
      </div>
      <span class="material-icons"></span>
      <!-- Weapon Proficiency -->
      <div class="border sect six-columns hide-as-npc">
        <label>Weapon Proficiency:</label>
        <label>
          <span class="stack-text">Initial # of Weapons:</span>
          <input type="text" class="width-small" name="attr_weapon_proficiency_initial" value="0" title="@{weapon_proficiency_initial}" />
        </label>
        <label>
          <span class="stack-text">Non-<wbr>Proficiency Penalty:</span>
          <select class="select width-small" name="attr_weapon_proficiency_penalty" title="@{weapon_proficiency_penalty}">
            <option value="0">0</option>
            <option value="-1">-1</option>
            <option value="-2" selected>-2</option>
            <option value="-3">-3</option>
            <option value="-4">-4</option>
            <option value="-5">-5</option>
          </select>
          <input type="number" class="hidden" name="attr_weapon_proficiency_penalty" value="-2" />
        </label>
        <label class="span-two">
          <span class="stack-text">Added Proficiency every:</span>
          <input type="text" class="width-small" name="attr_weapon_proficiency_added_per_level" value="0" title="@{weapon_proficiency_added_per_level}" />
          <span class="stack-text">Levels</span>
        </label>
        <label class="span-all">
          <span class="stack-text">Weapons:</span>
          <textarea class="height-short" name="attr_weapon_proficiency_list" title="@{weapon_proficiency_list}" placeholder="List weapon proficiencies" />
        </label>
        <!-- Dual-Wield -->
        <label>Dual-Wield Penalty:</label>
        <label>
          <span class="stack-text">Primary:</span>
          <input type="text" class="width-smaller" name="attr_dual_pen_primary" title="@{dual_pen_primary} | -2 and adjusted as per Dexterity. Auto-calculated based on Dexterity." value="0" readonly />
        </label>
        <label>
          <span class="stack-text">Secondary:</span>
          <input type="text" class="width-smaller" name="attr_dual_pen_secondary" title="@{dual_pen_secondary} | -4 and adjusted as per Dexterity. Auto-calculated based on Dexterity." value="0" readonly />
        </label>
      </div>
      <div class="sect" style="margin-bottom: 2em;">
        <input type="checkbox" class="hidden toggle-to-hit-table" name="attr_toggle_to_hit_table" value="1" />
        <!-- To Hit Table-->
        <details class="matrix-box">
          <summary>
            <span class="material-icons grid"></span>
            <span class="label-matrix">Attack Matrix</span>
            <span class="material-icons"></span>
          </summary>
          <div class="matrix-class section">
            <span></span>
            <label>Autofill using selectors:</label>
            <label>
              <span>Class/Monster:</span>
              <select class="width-medium" name="attr_matrix_class" title="@{matrix_class}">
                <option value="0" selected>Select a Class or Monster</option>
                <option value="1">Clerics, Druids and Monks</option>
                <option value="2">Fighters, Paladins, Rangers,</option>
                <option value="2">Bards, & 0-lvl Halflings & Humans</option>
                <option value="3">Magic-Users and Illusionists</option>
                <option value="4">Thieves and Assassins</option>
                <option value="5">Monsters</option>
              </select>
            </label>
            <input type="checkbox" name="attr_toggle_matrixhd" value="1" class="toggle-matrixhd hidden" />
            <label class="matrix-level">
              <span>Level:</span>
              <input type="number" min="0" name="attr_matrix_level" value="1" title="@{matrix_level}" />
            </label>
            <label class="matrix-hd" style="margin-left: -1em;">
              <span>HD/Lvl:</span>
              <select class="field-select width-small-plus" name="attr_matrix_hitdice" title="@{matrix_hitdice}">
                <option value="0" selected>Select HD/Lvl</option>
                <option value="1">up to 1-1</option>
                <option value="2">1-1</option>
                <option value="3">1</option>
                <option value="4">1+</option>
                <option value="5">2-3+</option>
                <option value="6">4-5+</option>
                <option value="7">6-7+</option>
                <option value="8">8-9+</option>
                <option value="9">10-11+</option>
                <option value="10">12-13+</option>
                <option value="11">14-15+</option>
                <option value="12">16+</option>
              </select>
            </label>
          </div>
          <div class="section center">
            <span class="to-hit">
              <span>-10</span>
              <span>-9</span>
              <span>-8</span>
              <span>-7</span>
              <span>-6</span>
              <span>-5</span>
              <span>-4</span>
              <span>-3</span>
              <span>-2</span>
              <span>-1</span>
              <span>0</span>
              <span>1</span>
              <span>2</span>
              <span>3</span>
              <span>4</span>
              <span>5</span>
              <span>6</span>
              <span>7</span>
              <span>8</span>
              <span>9</span>
              <span>10</span>
            </span>
            <span class="to-hit-input">
              <span><input type="text" name="attr_thac-10" title="@{thac-10}" value="10" /></span>
              <span><input type="text" name="attr_thac-9" title="@{thac-9}" value="10" /></span>
              <span><input type="text" name="attr_thac-8" title="@{thac-8}" value="10" /></span>
              <span><input type="text" name="attr_thac-7" title="@{thac-7}" value="10" /></span>
              <span><input type="text" name="attr_thac-6" title="@{thac-6}" value="10" /></span>
              <span><input type="text" name="attr_thac-5" title="@{thac-5}" value="10" /></span>
              <span><input type="text" name="attr_thac-4" title="@{thac-4}" value="10" /></span>
              <span><input type="text" name="attr_thac-3" title="@{thac-3}" value="10" /></span>
              <span><input type="text" name="attr_thac-2" title="@{thac-2}" value="10" /></span>
              <span><input type="text" name="attr_thac-1" title="@{thac-1}" value="10" /></span>
              <span><input type="text" name="attr_thac0" title="@{thac0}" value="10" /></span>
              <span><input type="text" name="attr_thac1" title="@{thac1}" value="10" /></span>
              <span><input type="text" name="attr_thac2" title="@{thac2}" value="10" /></span>
              <span><input type="text" name="attr_thac3" title="@{thac3}" value="10" /></span>
              <span><input type="text" name="attr_thac4" title="@{thac4}" value="10" /></span>
              <span><input type="text" name="attr_thac5" title="@{thac5}" value="10" /></span>
              <span><input type="text" name="attr_thac6" title="@{thac6}" value="10" /></span>
              <span><input type="text" name="attr_thac7" title="@{thac7}" value="10" /></span>
              <span><input type="text" name="attr_thac8" title="@{thac8}" value="10" /></span>
              <span><input type="text" name="attr_thac9" title="@{thac9}" value="10" /></span>
              <span><input type="text" name="attr_thac10" title="@{thac10}" value="10" /></span>
            </span>
          </div>
        </details>
        <!-- THAC0 Table-->
        <details class="thac0-box">
          <summary>
            <span class="material-icons grid"></span>
            <span class="label-matrix">THAC0</span>
            <span class="material-icons"></span>
          </summary>
          <div class="matrix-class section">
            <span></span>
            <label>Autofill using selectors:</label>
            <label>
              <span>Class/Monster:</span>
              <select class="width-medium" name="attr_matrix_class" title="@{matrix_class}">
                <option value="0" selected>Select a Class or Monster</option>
                <option value="1">Clerics, Druids and Monks</option>
                <option value="2">Fighters, Paladins, Rangers, Bards, & 0-lvl Halflings & Humans</option>
                <option value="3">Magic-Users and Illusionists</option>
                <option value="4">Thieves and Assassins</option>
                <option value="5">Monsters</option>
              </select>
            </label>
            <input type="checkbox" name="attr_toggle_matrixhd" value="1" class="toggle-matrixhd hidden" />
            <label class="matrix-level">
              <span>Level:</span>
              <input type="number" min="0" name="attr_matrix_level" value="1" title="@{matrix_level}" />
            </label>
            <label class="matrix-hd">
              <span>HD/Lvl:</span>
              <select class="field-select width-small-plus" name="attr_matrix_hitdice" title="@{matrix_hitdice}">
                <option value="0" selected>Select HD/Lvl</option>
                <option value="1">up to 1-1</option>
                <option value="2">1-1</option>
                <option value="3">1</option>
                <option value="4">1+</option>
                <option value="5">2-3+</option>
                <option value="6">4-5+</option>
                <option value="7">6-7+</option>
                <option value="8">8-9+</option>
                <option value="9">10-11+</option>
                <option value="10">12-13+</option>
                <option value="11">14-15+</option>
                <option value="12">16+</option>
              </select>
            </label>
          </div>
          <div class="sect center">
            <span class="to-hit">
              <span>-10</span>
              <span>-9</span>
              <span>-8</span>
              <span>-7</span>
              <span>-6</span>
              <span>-5</span>
              <span>-4</span>
              <span>-3</span>
              <span>-2</span>
              <span>-1</span>
              <span>0</span>
              <span>1</span>
              <span>2</span>
              <span>3</span>
              <span>4</span>
              <span>5</span>
              <span>6</span>
              <span>7</span>
              <span>8</span>
              <span>9</span>
              <span>10</span>
            </span>
            <span class="to-hit-input">
              <span><input type="text" name="attr_thac0-10" title="@{thac0-10}" value="[[@{thac00}+10]]" disabled /></span>
              <span><input type="text" name="attr_thac0-9" title="@{thac0-9}" value="[[@{thac00}+9]]" disabled /></span>
              <span><input type="text" name="attr_thac0-8" title="@{thac0-8}" value="[[@{thac00}+8]]" disabled /></span>
              <span><input type="text" name="attr_thac0-7" title="@{thac0-7}" value="[[@{thac00}+7]]" disabled /></span>
              <span><input type="text" name="attr_thac0-6" title="@{thac0-6}" value="[[@{thac00}+6]]" disabled /></span>
              <span><input type="text" name="attr_thac0-5" title="@{thac0-5}" value="[[@{thac00}+5]]" disabled /></span>
              <span><input type="text" name="attr_thac0-4" title="@{thac0-4}" value="[[@{thac00}+4]]" disabled /></span>
              <span><input type="text" name="attr_thac0-3" title="@{thac0-3}" value="[[@{thac00}+3]]" disabled /></span>
              <span><input type="text" name="attr_thac0-2" title="@{thac0-2}" value="[[@{thac00}+2]]" disabled /></span>
              <span><input type="text" name="attr_thac0-1" title="@{thac0-1}" value="[[@{thac00}+1]]" disabled /></span>
              <span><input type="text" name="attr_thac00" title="@{thac00}" value="19" style="font-weight:bold; border: 1px solid black;" /></span>
              <span><input type="text" name="attr_thac01" title="@{thac01}" value="[[@{thac00}-1]]" disabled /></span>
              <span><input type="text" name="attr_thac02" title="@{thac02}" value="[[@{thac00}-2]]" disabled /></span>
              <span><input type="text" name="attr_thac03" title="@{thac03}" value="[[@{thac00}-3]]" disabled /></span>
              <span><input type="text" name="attr_thac04" title="@{thac04}" value="[[@{thac00}-4]]" disabled /></span>
              <span><input type="text" name="attr_thac05" title="@{thac05}" value="[[@{thac00}-5]]" disabled /></span>
              <span><input type="text" name="attr_thac06" title="@{thac06}" value="[[@{thac00}-6]]" disabled /></span>
              <span><input type="text" name="attr_thac07" title="@{thac07}" value="[[@{thac00}-7]]" disabled /></span>
              <span><input type="text" name="attr_thac08" title="@{thac08}" value="[[@{thac00}-8]]" disabled /></span>
              <span><input type="text" name="attr_thac09" title="@{thac09}" value="[[@{thac00}-9]]" disabled /></span>
              <span><input type="text" name="attr_thac010" title="@{thac010}" value="[[@{thac00}-10]]" disabled /></span>
            </span>
          </div>
        </details>
      </div>
      <div class="sect">
        <input type="checkbox" class="hidden toggle-to-hit-table" name="attr_toggle_to_hit_table" value="1" />
        <fieldset class="repeating_weapon">
          <details class="border">
            <summary>
              <span class="material-icons gear-nav"></span>
              <input type="hidden" class="weapon-type-toggle" name="attr_weapon_attack_type_flag" value="0" />
              <span class="weapons-row1 center">
                <button class="normal-roll hide-as-npc" type="roll" name="attr_weapon_attack_roll" title="%{selected|repeating_weapon_$X_weapon_attack_roll} | PC Roll" value="@{whisper_pc} @{weapon_macro_text} @{weapon_whisper_to_hit}"></button>
                <!--NPC version-->
                <button class="normal-roll hide-as-pc" type="roll" name="attr_weapon_attack_npc_roll" title="%{selected|repeating_weapon_$X_weapon_attack_npc_roll} | NPC Roll" value="@{whisper_npc} @{weapon_macro_text} @{weapon_damage_chat_menu_npc} @{weapon_whisper_to_hit}"></button>
                <label class="label-under-small">
                  <input type="text" class="text-larger" name="attr_weapon_name" title="@{repeating_weapon_$X_weapon_name}" placeholder="Enter Weapon" />
                  <span>Name</span>
                </label>
                <span>
                  <select name="attr_weapon_attack_type" class="text-small select-over-label" title="@{repeating_weapon_$X_weapon_attack_type}">
                    <option value="0" selected>Melee</option>
                    <option value="1">Ranged</option>
                    <option value="2">Touch</option>
                    <option value="3">Ranged Touch</option>
                  </select>
                  <label>Attack Type</label>
                </span>
                <span class="label-under toggle-backstab hide-if-ranged">
                  <span class="two-inputs-over-label">
                    <input type="checkbox" class="width-small toggle-field" name="attr_weapon_backstab_flag" title="@{repeating_weapon_$X_weapon_backstab_flag}" value="1">
                    <input type="text" class="width-smaller" name="attr_weapon_backstab_var" value="0" title="@{repeating_weapon_$X_weapon_backstab_bonus} | Uses the @{backstab_bonus} from the Thief's section below." readonly="">
                    <input type="number" class="hidden" name="attr_weapon_backstab_bonus" value="0" />
                  </span>
                  <label title="Apply a Backstab bonus to the attack roll.">Backstab Adj.</label>
                </span>
                <label class="label-under-small">
                  <input type="text" class="width-medium" name="attr_weapon_tohitbonus" title="@{repeating_weapon_$X_weapon_tohitbonus}" value="0" />
                  <span>To-Hit Adj.</span>
                </label>
                <label class="label-under-small">
                  <input type="text" class="width-medium" name="attr_weapon_magicbonus" title="@{repeating_weapon_$X_weapon_magicbonus}" value="0" />
                  <span>Magic Adj.</span>
                </label>
                <span class="label-under">
                  <span class="two-inputs-over-label">
                    <input type="checkbox" class="width-small toggle-field" name="attr_weapon_prof_flag" title="@{repeating_weapon_$X_weapon_prof_flag}" value="1" />
                    <input type="text" class="width-smaller" name="attr_weapon_prof" value="0" title="@{repeating_weapon_$X_weapon_prof_pen} | Uses the value from @{weapon_proficiency_penalty} from Weapon Proficiency section above." readonly />
                    <input type="number" class="hidden" name="attr_weapon_prof_pen" value="0" />
                  </span>
                  <label title="Non-Proficiency penalty will be applied to the attack roll.">NP Penalty</label>
                </span>
                <span class="label-under" title="Dual-wield attack? Defaults to Primary -2, Secondary -4 and then auto-calculated according to Dex.">
                  <span class="two-inputs-over-label">
                    <select class="width-small-plus" name="attr_weapon_dual" title="@{repeating_weapon_$X_weapon_dual}" style="margin: 1px 0 6px 0;height: 1.5em;padding: 0;">
                      <option value="" selected>Normal</option>
                      <option value="Primary">Primary</option>
                      <option value="Secondary">Secondary</option>
                    </select>
                    <input type="text" class="width-smaller" name="attr_weapon_dual_pen" title="@{repeating_weapon_$X_weapon_dual_pen}" value="0" />
                  </span>
                  <label>Dual-Wield</label>
                </span>
                <span>
                  <textarea class="hidden" name="attr_weapon_whisper_to_hit"></textarea>
                  <select class="width-small-plus select-over-label" name="attr_weapon_whisper_to_hit_select" title="@{repeating_weapon_$X_weapon_whisper_to_hit_select}">
                    <option value="0" class="matrix-box" selected>Matrix</option>
                    <option value="1" class="thac0-box">THACO</option>
                    <option value="2">No</option>
                  </select>
                  <label title="Include '/w gm Hit table'?">/w gm?</label>
                </span>
              </span>
              <span class="weapons-row2 center">
                <details>
                  <summary>
                    <span class="material-icons custom-btn-nav toggle-critdamage"></span>
                      <input type="text" class="width-medium" style="margin-top: -0.15em;" name="attr_weapon_damagesmallmedium" title="@{repeating_weapon_$X_weapon_damagesmallmedium}" value="" placeholder="1d4" />
                      <button class="stack-text hide-as-npc" type="roll" name="roll_weapon_damagesmallmedium_roll" title="%{repeating_weapon_$X_weapon_damagesmallmedium_roll} | PC Roll" value="@{weapon_damagesmallmedium_macro_text}">Damage</button>
                      <button class="stack-text hide-as-pc" type="roll" name="roll_weapon_damagesmallmedium_npc_roll" title="%{repeating_weapon_$X_weapon_damagesmallmedium_npc_roll} | NPC Roll" value="@{weapon_damagesmallmedium_macro_npc_text}">Damage</button>

                      <input type="hidden" name="attr_weapon_damagesmallmedium_chat_menu" value="" />
                      <input type="hidden" name="attr_weapon_critdamagesmallmedium_chat_menu" value="" />
                      <!--NPC version-->
                      <input type="hidden" name="attr_weapon_damagesmallmedium_npc_chat_menu" value="" />
                      <input type="hidden" name="attr_weapon_critdamagesmallmedium_npc_chat_menu" value="" />

                      <textarea class="hidden" name="attr_weapon_damagesmallmedium_macro_text">@{whisper_pc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsSM=[[ (@{weapon_damagesmallmedium}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}}</textarea>

                      <textarea class="hidden" name="attr_weapon_critdamagesmallmedium_macro_text">@{whisper_pc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsSM=[[ (@{weapon_critdamagesmallmedium}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{crit=[[ @{toggle_critdamage} ]]}}</textarea>
                      <!--NPC version-->
                      <textarea class="hidden" name="attr_weapon_damagesmallmedium_macro_npc_text">@{whisper_npc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsSM=[[ (@{weapon_damagesmallmedium}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}}</textarea>

                      <textarea class="hidden" name="attr_weapon_critdamagesmallmedium_macro_npc_text">@{whisper_npc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsSM=[[ (@{weapon_critdamagesmallmedium}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{crit=[[ @{toggle_critdamage} ]]}}</textarea>
                  </summary>
                  <label class="label-under toggle-critdamage">
                    <textarea class="height-short" name="attr_weapon_critdamagesmallmedium" title="@{repeating_weapon_$X_weapon_critdamagesmallmedium} | Crit Damage roll in lieu of normal damage roll.  Defaults to x2 of the weapon's normal damage. ie @{weapon_damagesmallmedium}*2">@{weapon_damagesmallmedium}*2</textarea>
                    <button class="hide-as-npc stack-text" type="roll" name="roll_weapon_critdamagesmallmedium_roll" title="%{repeating_weapon_$X_weapon_critdamagesmallmedium_roll} | PC Roll" value="@{weapon_critdamagesmallmedium_macro_text}">Roll Crit</button>
                    <button class="hide-as-pc stack-text" type="roll" name="roll_weapon_critdamagesmallmedium_npc_roll" title="%{repeating_weapon_$X_weapon_critdamagesmallmedium_npc_roll} | NPC Roll" value="@{weapon_critdamagesmallmedium_macro_npc_text}">Roll Crit</button>
                  </label>
                </details>
                <details>
                  <summary>
                    <span class="material-icons custom-btn-nav toggle-critdamage"></span>
                    <input type="text" class="width-medium" style="margin-top: -0.15em;" name="attr_weapon_damagelarge" title="@{repeating_weapon_$X_weapon_damagelarge}" value="" placeholder="1d6" />
                    <button class="stack-text hide-as-npc" type="roll" name="roll_weapon_damagelarge_roll" title="%{repeating_weapon_$X_weapon_damagelarge_roll} | PC Roll" value="@{weapon_damagelarge_macro_text}">Damage LG</button>
                    <button class="stack-text hide-as-pc" type="roll" name="roll_weapon_damagelarge_npc_roll" title="%{repeating_weapon_$X_weapon_damagelarge_npc_roll} | NPC Roll" value="@{weapon_damagelarge_macro_npc_text}">Damage LG</button>
                    <input type="hidden" name="attr_weapon_damagelarge_chat_menu" value="" />
                    <input type="hidden" name="attr_weapon_critdamagelarge_chat_menu" value="" />
                    <!--NPC version-->
                    <input type="hidden" name="attr_weapon_damagelarge_npc_chat_menu" value="" />
                    <input type="hidden" name="attr_weapon_critdamagelarge_npc_chat_menu" value="" />

                    <textarea class="hidden" name="attr_weapon_damagelarge_macro_text">@{whisper_pc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsL=[[ (@{weapon_damagelarge}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}}</textarea>

                    <textarea class="hidden" name="attr_weapon_critdamagelarge_macro_text">@{whisper_pc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsL=[[ (@{weapon_critdamagelarge}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{crit=[[ @{toggle_critdamage} ]]}}</textarea>
                    <!--NPC version-->
                    <textarea class="hidden" name="attr_weapon_damagelarge_macro_npc_text">@{whisper_npc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsL=[[ (@{weapon_damagelarge}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}}</textarea>

                    <textarea class="hidden" name="attr_weapon_critdamagelarge_macro_npc_text">@{whisper_npc} &{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{damage1vsL=[[ (@{weapon_critdamagelarge}) * @{weapon_backstab_mult}[MULT] + ( @{weapon_attackdmgbonus}[DMG_BON] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{Damage Modifier?|0}[MISC_MOD] ) ]]}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{crit=[[ @{toggle_critdamage} ]]}}</textarea>
                  </summary>
                  <label class="label-under toggle-critdamage">
                    <textarea class="height-short" name="attr_weapon_critdamagelarge" title="@{repeating_weapon_$X_weapon_critdamagelarge} | Crit Damage roll instead of normal damage roll.  Defaults to x2 of the weapon's normal damage. ie @{weapon_damagelarge}*2">@{weapon_damagelarge}*2</textarea>
                    <button class="hide-as-npc stack-text" type="roll" name="roll_weapon_critdamagelarge_roll" title="%{repeating_weapon_$X_weapon_critdamagelarge_roll} | PC Roll" value="@{weapon_critdamagelarge_macro_text}">Roll Crit</button>
                    <button class="hide-as-pc stack-text" type="roll" name="roll_weapon_critdamagelarge_npc_roll" title="%{repeating_weapon_$X_weapon_critdamagelarge_npc_roll} | NPC Roll" value="@{weapon_critdamagelarge_macro_npc_text}">Roll Crit</button>
                  </label>
                </details>
                <!--inserted into the NPC attack roll. Needed so that damage chat menu respects the whisper_npc setting-->
                <input type="hidden" name="attr_weapon_damage_chat_menu_npc" value="{{damagevsSMchatmenu=@{weapon_damagesmallmedium_npc_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_npc_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_npc_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_npc_chat_menu}}}" />
                <span class="label-under toggle-backstab hide-if-ranged">
                  <span style="display:inline-flex;">
                    <input type="checkbox" class="width-small toggle-field" name="attr_weapon_backstab_flag" title="@{repeating_weapon_$X_weapon_backstab_flag}" value="1" />
                    <input type="text" class="width-smaller" name="attr_weapon_backstab" value="1" title="@{repeating_weapon_$X_weapon_backstab_mult} | Uses the value from @{backstab} from the Thief Skills section below." readonly />
                    <input type="number" class="hidden" name="attr_weapon_backstab_mult" value="1" />
                  </span>
                  <label title="Apply a multiplier to the weapon damage rolled.">Backstab Mult</label>
                </span>
                <label class="label-under-small">
                  <input type="text" class="width-medium" name="attr_weapon_attackdmgbonus" title="@{repeating_weapon_$X_weapon_attackdmgbonus}" value="0" />
                  <span>DMG Adj.</span>
                </label>
                <label class="label-under-small">
                  <input type="text" class="width-medium" name="attr_weapon_attackdmgtype" title="@{repeating_weapon_$X_weapon_attackdmgtype}" value="" placeholder="-" />
                  <span>DMG Type</span>
                </label>
                <label class="label-under-small hide-if-melee">
                  <input type="text" class="width-small" name="attr_weapon_rateoffire" title="@{repeating_weapon_$X_weapon_rateoffire}" value="" placeholder="-" />
                  <span>Fire Rate</span>
                </label>
                <input type="checkbox" class="hidden toggle-input-error" name="attr_weapon_range_error" value="1" />
                <label class="label-under-small hide-if-melee">
                  <input type="text" class="width-medium" name="attr_weapon_range" title="@{repeating_weapon_$X_weapon_range} | Enter Short/Medium/Long ranges. Enter numbers only, seperated by '/'. Entering a single value will be used for all ranges." value="" placeholder="S/M/L" />
                  <span class="hide-if-ranged-touch">Range S/M/L</span>
                  <span class="ranged-touch">Range</span>
                </label>
                <!--use sheetworker to parse weapon_range into separate ranges-->
                <input type="text" class="hidden" name="attr_weapon_range_short" value="1" />
                <input type="text" class="hidden" name="attr_weapon_range_medium" value="2" />
                <input type="text" class="hidden" name="attr_weapon_range_long" value="3" />
                <label class="label-under-small hide-if-ranged">
                  <input type="text" class="width-smaller" name="attr_weapon_num_attacks" value="1" title="@{repeating_weapon_$X_weapon_num_attacks} | Indicate the number of multiple attacks." />
                  <span>#Attacks</span>
                </label>
                <span class="label-under hide-if-melee">
                  <span class="two-inputs-over-label">
                    <input type="text" class="width-smallest" name="attr_weapon_ammo" value="0" title="@{repeating_weapon_$X_weapon_ammo} | Use for resource tracking." />
                    <span>/</span>
                    <input type="text" class="width-smallest" name="attr_weapon_ammo_max" value="0" title="@{repeating_weapon_$X_weapon_ammo_max} | Use for resource tracking." />
                  </span>
                  <label>Ammo/Max</label>
                </span>
                <label class="label-under-small">
                  <input type="text" class="width-smaller" name="attr_weapon_quantity" value="1" title="@{repeating_weapon_$X_weapon_quantity}" />
                  <span>Qty</span>
                </label>
                <label class="label-under-small hide-as-npc">
                  <input type="text" class="width-small" name="attr_weapon_weight" value="0" title="@{repeating_weapon_$X_weapon_weight}" />
                  <span>Wt</span>
                </label>
                <label class="label-under-small toggle-costs hide-as-npc">
                  <input type="text" class="width-small" name="attr_weapon_cost" value="0" title="@{repeating_weapon_$X_weapon_cost}" />
                  <span>Cost</span>
                </label>
              </span>
              <!--deprecated: weapon_dmgbonus has been replaced with weapon_attackdmgbonus-->
              <input type="hidden" name="attr_weapon_dmgbonus" value="0" />
            </summary>
            <span class="span-all to-hit-adj-box">
              <span class="to-hit center">
                <input type="text" class="width-small" name="attr_weapon_length" title="@{repeating_weapon_$X_weapon_length}" value="" placeholder="-" />
                <input type="text" class="width-small" name="attr_weapon_space" title="@{repeating_weapon_$X_weapon_space}" value="" placeholder="-" />
                <input type="text" class="width-small" name="attr_weapon_speed" title="@{repeating_weapon_$X_weapon_speed}" value="" placeholder="-" />
                <h4>Armor Type:</h4>
                <span>0</span>
                <span>1</span>
                <span>2</span>
                <span>3</span>
                <span>4</span>
                <span>5</span>
                <span>6</span>
                <span>7</span>
                <span>8</span>
                <span>9</span>
                <span>10</span>
                <input type="checkbox" class="width-small" name="attr_weapon_tohitacadj_flag" title="@{repeating_weapon_$x_weapon_tohitacadj_flag}" value="1" />
                <input type="text" class="hidden" name="attr_weapon_tohitacadj" value="{{ToHitACadj2to10}}" />
              </span>
              <span class="to-hit-input center">
                <label class="label-under">Length</label>
                <label class="label-under">Space</label>
                <label class="label-under">Speed</label>
                <h4>Adjustment:</h4>
                <span><input type="text" name="attr_weapon_thac_adj0" title="@{repeating_weapon_$x_weapon_thac_adj0}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj1" title="@{repeating_weapon_$x_weapon_thac_adj1}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj2" title="@{repeating_weapon_$x_weapon_thac_adj2}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj3" title="@{repeating_weapon_$x_weapon_thac_adj3}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj4" title="@{repeating_weapon_$x_weapon_thac_adj4}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj5" title="@{repeating_weapon_$x_weapon_thac_adj5}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj6" title="@{repeating_weapon_$x_weapon_thac_adj6}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj7" title="@{repeating_weapon_$x_weapon_thac_adj7}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj8" title="@{repeating_weapon_$x_weapon_thac_adj8}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj9" title="@{repeating_weapon_$x_weapon_thac_adj9}" value="0" /></span>
                <span><input type="text" name="attr_weapon_thac_adj10" title="@{repeating_weapon_$x_weapon_thac_adj10}" value="0" /></span>
                <span class="stack-text">show with roll</span>
              </span>
            </span>
            <textarea class="span-all height-short" name="attr_weapon_notes" title="@{repeating_weapon_$X_weapon_notes}" placeholder="Description"></textarea>
            <!-- OLD WEAPON MACRO
							<textarea class="height-short" name="attr_weapon_macro_text" title="@{repeating_weapon_$X_weapon_macro_text}">&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{attack1=[[1d20 + @{weapon_tohitbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{To Hit Modifier?|0}[MOD] ]]}} {{damage1vsSM=[[@{weapon_damagesmallmedium} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{weapon_damagelarge} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{weapon_notes}}} @{weapon_whisper_to_hit}</textarea>
						-->
            <textarea class="span-all height-short toggle-macros" name="attr_weapon_macro_text" title="@{repeating_weapon_$X_weapon_macro_text}">&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + ( @{weapon_backstab_bonus}[BACKSTAB] ) + ( @{weapon_tohitbonus}[HIT_BON] ) + ( @{weapon_prof_pen}[PROF_PEN] ) + ( @{weapon_dual_pen}[DUAL_PEN] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{To Hit Modifier?|0}[MISC_MOD] ) ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{ammo=[[ @{weapon_ammo} ]]/[[ @{weapon_ammo|max} ]]}} {{crit=[[ @{toggle_critdamage} ]]}} @{weapon_tohitacadj}</textarea>
          </details>
        </fieldset>
      </div>
      <hr class="hide-as-npc">
    </section>
    <!-- Equipment -->
    <section class="equipment-box">
      <input type="checkbox" class="sect-show" title="@{equipment-info-show}" name="attr_equipment_info_show" value="1" />
      <div class="header">EQUIPMENT</div><span class="material-icons"></span>
      <div class="equipment-tabs section">
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="0" /><span class="tab">Gear</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="1" /><span class="tab">Weapon</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="2" /><span class="tab">Armor</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="3" /><span class="tab">Magic</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="4" /><span class="tab">Other</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_type" value="-1" checked /><span class="tab">All</span>

        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_carry" value="1" style="margin-left: 10%;" /><span class="tab">Carried</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_carry" value="0" /><span class="tab">Not Carried</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_carry" value="2" /><span class="tab">Mount</span>
        <input type="radio" class="tab-hidden tab" name="attr_equipment_tabs_carry" value="-1" checked /><span class="tab">All</span>
      </div>
      <div class="section">
        <input type="hidden" class="hidden equipment-display-type" name="attr_equipment_tabs_type" />
        <input type="hidden" class="hidden equipment-display-carry" name="attr_equipment_tabs_carry" />
        <span class="equipment-columns column-header">
          <span></span>
          <span>Item</span>
          <span>Location</span>
          <span>Type</span>
          <span>Uses</span>
          <span>/</span>
          <span>Max</span>
          <span>Carried?</span>
          <span>Qty</span>
          <span>/</span>
          <span>Max</span>
          <span class="hidden-for-armor-weapon">Wt</span>
          <span class="hidden-for-armor-weapon toggle-costs">Cost</span>
        </span>
        <fieldset class="repeating_equipment">
          <input type="hidden" class="toggle-carry" name="attr_equipment_show_carry" value="1" readonly />
          <input type="hidden" class="toggle-type" name="attr_equipment_show_type" value="1" readonly />
          <div class="equipment-display-carry section">
            <div class="equipment-display-type">
              <details>
                <summary>
                  <span class="material-icons gear-nav"></span>
                  <span class="equipment-columns">
                    <button class="normal-roll" type="roll" name="attr_equipment_roll" title="%{repeating_equipment_$X_equipment_roll}" value="@{equipment_macro_text}"></button>
                    <input type="text" class="width-fill" name="attr_equipment_item" title="@{repeating_equipment_$X_equipment_item}" placeholder="Item/Description" />
                    <input type="text" class="width-fill" name="attr_equipment_location" title="@{repeating_equipment_$X_equipment_location}" placeholder="Location" />
                    <select class="field-select equipment-type" name="attr_equipment_type" title="@{repeating_equipment_$X_equipment_type}">
                      <option value="0" selected>Gear</option>
                      <option value="1">Weapon</option>
                      <option value="2">Armor</option>
                      <option value="3">Magic</option>
                      <option value="4">Other</option>
                    </select>
                    <input type="hidden" class="hidden equipment-type" name="attr_equipment_type" />
                    <input type="text" class="width-smaller" name="attr_equipment_current" title="@{repeating_equipment_$X_equipment_current}" value="0" />
                    <span>/</span>
                    <input type="text" class="width-smaller" name="attr_equipment_current_max" title="@{repeating_equipment_$X_equipment_current|max}" value="0" />
                    <select class="field-select width-medium" name="attr_equipment_carried_select" title="@{repeating_equipment_$X_equipment_carried_select}">
                      <option value="0">No</option>
                      <option value="1" selected>Yes</option>
                      <option value="2">Mount</option>
                    </select>
                    <input type="text" class="hidden" name="attr_equipment_carried" value="1" readonly />
                    <input type="text" class="width-smaller" name="attr_equipment_quantity" title="@{repeating_equipment_$X_equipment_quantity}" value="1" />
                    <span>/</span>
                    <input type="text" class="width-smaller" name="attr_equipment_quantity_max" title="@{repeating_equipment_$X_equipment_quantity|max}" value="1" />
                    <input type="text" class="width-fill hidden-for-armor-weapon" name="attr_equipment_weight" title="@{repeating_equipment_$X_equipment_weight}" value="0" />
                    <input type="text" class="width-fill hidden-for-armor-weapon toggle-costs" name="attr_equipment_cost" title="@{repeating_equipment_$X_equipment_cost}" value="0" />
                  </span>
                </summary>
                <textarea class="span-all height-short" name="attr_equipment_description" title="@{repeating_equipment_$X_equipment_description}" placeholder="Description"></textarea>
                <textarea class="span-all height-short toggle-macros" name="attr_equipment_macro_text" title="@{repeating_equipment_$X_equipment_macro_text}">@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Item/Equipment: @{equipment_item}}} {{freetext=@{equipment_description}}} {{quantity= @{equipment_quantity}}} {{quantity_max=@{equipment_quantity|max}}} {{uses=@{equipment_current}}} {{uses_max=[[ @{equipment_current|max} ]]}}</textarea>
              </details>
            </div>
          </div>
        </fieldset>
      </div>
      <div class="sect four-columns">
        <div class="capacity-box">
          <textarea class="height-half" name="attr_itemnotes" title="@{itemnotes}" placeholder="Equipment Notes"></textarea>
        </div>
        <!--Weight/Cost Totals-->
        <div class="equipment-totals">
          <label></label>
          <label>Wt.</label>
          <label class="toggle-costs">Cost</label>
          <label>Equipment:</label>
          <input type="text" class="width-fill" name="attr_total_equipment_weight" title="@{total_equipment_weight}" value="0" readonly />
          <input type="text" class="width-fill toggle-costs" name="attr_total_equipment_cost" title="@{total_equipment_cost}" value="0" readonly />
          <label>Armor:</label>
          <input type="text" class="width-fill" name="attr_total_armor_weight" title="@{total_armor_weight}" value="0" readonly />
          <input type="text" class="width-fill toggle-costs" name="attr_total_armor_cost" title="@{total_armor_cost}" value="0" readonly />
          <label>Weapons:</label>
          <input type="text" class="width-fill" name="attr_total_weapon_weight" title="@{total_weapon_weight}" value="0" readonly />
          <input type="text" class="width-fill toggle-costs" name="attr_total_weapon_cost" title="@{total_weapon_cost}" value="0" readonly />
          <label>Coins:</label>
          <input type="text" class="width-fill" name="attr_total_coin_weight" title="@{total_coin_weight}" value="0" readonly />
          <label class="width-fill toggle-costs">---</label>
          <label>TOTALS:</label>
          <input type="text" class="width-fill field-border" name="attr_total_weight" title="@{total_weight}" value="0" readonly />
          <input type="text" class="width-fill field-border toggle-costs" name="attr_total_cost" title="@{total_cost}" value="0" readonly />
        </div>
      </div>
      <!--Wealth-->
      <div class="wealth-box border sect">
        <label class="text-large center">Wealth</label>
        <div class="coin-columns">
          <span class="column-header"></span>
          <span class="column-header">Copper</span>
          <span class="column-header">Silver</span>
          <span class="column-header">Electrum</span>
          <span class="column-header">Gold</span>
          <span class="column-header">Platinum</span>
        </div>
        <div class="coin-columns">
          <label class="text-large right">Carried Coins:</label>
          <input type="text" class="width-medium" name="attr_cp" title="@{cp}" value="0" />
          <input type="text" class="width-medium" name="attr_sp" title="@{sp}" value="0" />
          <input type="text" class="width-medium" name="attr_ep" title="@{ep}" value="0" />
          <input type="text" class="width-medium" name="attr_gp" title="@{gp}" value="0" />
          <input type="text" class="width-medium" name="attr_pp" title="@{pp}" value="0" />
          <span class="span-all center text-small">200cp = 20sp = 2ep = 1gp = 1/5pp</span>
        </div>
        <hr>
        <div class="coin-columns">
          <label class="text-large right">Total Coins:</label>
          <input type="text" class="width-medium" name="attr_cp-total" title="@{cp-total}" value="0" />
          <input type="text" class="width-medium" name="attr_sp-total" title="@{sp-total}" value="0" />
          <input type="text" class="width-medium" name="attr_ep-total" title="@{ep-total}" value="0" />
          <input type="text" class="width-medium" name="attr_gp-total" title="@{gp-total}" value="0" />
          <input type="text" class="width-medium" name="attr_pp-total" title="@{pp-total}" value="0" />
        </div>
        <textarea class="height-half" name="attr_wealthNotes" title="@{wealthNotes}" placeholder="Wealth Notes"></textarea>
      </div>
      <!--Carrying Capacity-->
      <div class="span-all border sect">
        <label class="text-large center section">Carrying Capacity</label>
        <div class="capacity-box-loads">
          <span class="span-three column-header">Strength Adj.</span>
          <span class="span-four column-header">Current Encumbrance</span>
        </div>
        <div class="capacity-box-loads center">
          <label class="label-under">
            <input type="text" class="hidden" name="attr_normal_load" value="350" readonly />
            <span type="text" class="readonly-span" name="attr_normal_load" title="@{normal_load} 'Unencumbered load' (defaults 350gp based on STR 8-11.)"></span>
            <span>Base</span>
          </label>
          <label class="label-under">
            <span class="center">
              <span class="text-large">±</span>
              <input class="width-small field-border" type="text" name="attr_encumbrancebonus" title="@{encumbrancebonus}" value="0" />
              <span class="inline-label">Weight Allowance</span>
            </span>
          </label>
          <span class="text-large">=</span>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="0" checked="checked" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_normal_load_adjusted" value="0" readonly />
            <span class="readonly-span" name="attr_normal_load_adjusted" title="@{normal_load_adjusted} Unencumbered + Weight Allowance.)"></span>
            <span>Unencumbered</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="1" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_heavy_load" value="0" readonly />
            <span class="readonly-span" name="attr_heavy_load" title="@{heavy_load} Heavy load = Unencumbered + (Weight Allowance x2)."></span>
            <span>Heavy</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="2" readonly />
          <label class="label-under">
            <input type="text" class="hidden" name="attr_very_heavy_load" value="0" readonly />
            <span class="readonly-span" name="attr_very_heavy_load" title="@{very_heavy_load} Very heavy load = Unencumbered + (Weight Allowance x3)."></span>
            <span>Very Heavy</span>
          </label>
          <input type="checkbox" class="hidden current-encumbrance" name="attr_current_encumbrance" value="3" readonly />
          <label class="label-under">
            <span>
              <input type="text" class="hidden" name="attr_max_load" value="0" readonly />
              <span class="readonly-span" name="attr_max_load" title="@{max_load} Any amount greater than; Unencumbered + (Weight Allowance x3).">
              </span>
              <b class="text-large">+</b>
            </span>
            <span>Encumbered</span>
          </label>
        </div>
      </div>
      <hr>
    </section>
    <!-- Special Abilities -->
    <section class="special-abilities-box">
      <input type="checkbox" class="sect-show" title="@{special_abilities-info-show}" name="attr_special_abilities_info_show" value="1" />
      <div class="header">
        <span class="hide-as-npc">SPECIAL ABILITIES</span>
        <span class="hide-as-pc">SPECIAL ABILITIES</span>
      </div>
      <span class="material-icons"></span>
      <div class="sect">
        <span class="special-abilities-columns column-header hide-as-npc">
          <span></span>
          <span>Name</span>
          <span>Short Description</span>
          <span>Curr</span>
          <span></span>
          <span>Max</span>
        </span>
        <fieldset class="repeating_ability">
          <details>
            <summary>
              <span class="material-icons gear-nav"></span>
              <span class="special-abilities-columns">
                <button class="normal-roll hide-as-npc" type="roll" name="attr_ability_roll" title="%{repeating_ability_$X_ability_roll} | PC Roll" value="@{whisper_pc} @{ability_macro_text}"></button>
                <!--NPC version-->
                <button class="normal-roll hide-as-pc" type="roll" name="attr_ability_npc_roll" title="%{repeating_ability_$X_ability_npc_roll} | NPC Roll" value="@{whisper_npc} @{ability_macro_text}"></button>
                <input type="text" name="attr_ability_name" title="@{repeating_ability_$X_ability_name}" placeholder="Ability Name" />
                <textarea class="height-short" name="attr_ability_short_description" title="@{repeating_ability_$X_ability_short_description}" placeholder="Short Description"></textarea>
                <input type="text" class="width-smaller" name="attr_ability_current" title="@{repeating_ability_$X_ability_current}" value="" />
                <span class="text-large">/</span>
                <input type="text" class="width-smaller" name="attr_ability_current_max" title="@{repeating_ability_$X_ability_current|max}" value="0" />
                <!--deprecated; attr_max has been replaced with ability_current_max-->
                <input type="hidden" name="attr_ability_max" value="1" />
              </span>
            </summary>
            <div class="special-abilities-columns-row2">
              <span class="width-fill">
                <textarea class="height-short" name="attr_ability_description" title="@{repeating_ability_$X_ability_description}" placeholder="Ability Description"></textarea>
              </span>
              <span title="TIP: Must include a dice roll to be included with the roll. ie 1d6">
                <input type="text" class="width-small-plus" name="attr_ability_die" title="@{repeating_ability_$X_ability_die}" value="1d0" />
                <label class="label-under-small">Die</label>
              </span>
              <span>
                <input type="text" class="width-small-plus" name="attr_ability_mod" title="@{repeating_ability_$X_ability_mod}" value="0" />
                <label class="label-under-small">Modifier</label>
              </span>
              <!--old macro
								<textarea class="height-short" name="attr_ability_macro_text" title="@{repeating_ability_$X_ability_macro_text}">&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Special Ability: @{ability_name}}} {{freetext=@{ability_short_description} @{ability_description}}}</textarea>
								-->
              <textarea class="span-all height-short toggle-macros" name="attr_ability_macro_text" title="@{repeating_ability_$X_ability_macro_text}">&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Special Ability: @{ability_name}}} {{roll= [[ @{ability_die} + @{ability_mod}[MOD] ]]}} {{freetext=@{ability_short_description} @{ability_description}}} {{uses=@{ability_current}}} {{uses_max=@{ability_current|max}}}</textarea>
            </div>
          </details>
        </fieldset>
        <div class="hide-as-npc">
          <input type="checkbox" class="sect-show" title="@{special_abilitiesnotes-show}" name="attr_special_abilitiesnotes_show" value="1" />
          <span class="subheader">Special Abilities Notes</span><span class="material-icons"></span>
          <span class="sect">
            <textarea name="attr_special_abilitiesnotes" title="@{special_abilitiesnotes}" placeholder="Special Abilities Notes"></textarea>
          </span>
        </div>
      </div>
      <hr class="hide-as-npc">
    </section>
    <!-- Non Weapon Proficiencies (NWP) -->
    <section class="nonweapon-proficiencies-box">
      <input type="checkbox" class="sect-show" title="@{nonweapon_proficiencies-info-show}" name="attr_nonweapon_proficiencies_info_show" value="1" />
      <div class="header">NON WEAPON PROFICIENCIES</div><span class="material-icons"></span>
      <div class="sect">
        <span class="nonweapon-proficiencies-columns column-header">
          <span></span>
          <span>Proficiency</span>
          <span>Short Description</span>
          <span>Attribute</span>
          <span>Slots</span>
          <span>Adj.</span>
        </span>
        <fieldset class="repeating_nonweaponproficiencies">
          <details>
            <summary>
              <span class="material-icons gear-nav"></span>
              <span class="nonweapon-proficiencies-columns">
                <button class="normal-roll" type="roll" name="attr_nwp_roll" title="%{repeating_nonweaponproficiencies_$X_nwp_roll}" value="@{nwp_macro_text}"></button>
                <input type="text" name="attr_nwp_name" title="@{repeating_nonweaponproficiencies_$X_nwp_name}" placeholder="Proficiency Name" />
                <textarea class="height-short" name="attr_nwp_short_description" title="@{repeating_nonweaponproficiencies_$X_nwp_short_description}" placeholder="Short Description"></textarea>
                <select class="field-select width-medium" name="attr_nwp_attribute" title="%{repeating_nonweaponproficiencies_$X_nwp_attribute}">
                  <option value="0" selected>None</option>
                  <option value="@{strength}">STR</option>
                  <option value="@{dexterity}">DEX</option>
                  <option value="@{constitution}">CON</option>
                  <option value="@{intelligence}">INT</option>
                  <option value="@{wisdom}">WIS</option>
                  <option value="@{charisma}">CHA</option>
                  <option value="@{comeliness}" class="toggle-comeliness">COM</option>
                </select>
                <input class="width-small" type="number" name="attr_nwp_slots" title="@{repeating_nonweaponproficiencies_$X_nwp_slots}" value="0" />
                <input class="width-small" type="number" name="attr_nwp_modifier" title="@{repeating_nonweaponproficiencies_$X_nwp_modifier}" value="0" />
              </span>
            </summary>
            <div class="three-columns">
              <label class="span-all">
                <textarea class="height-short" name="attr_nwp_description" title="@{repeating_nonweaponproficiencies_$X_nwp_description}" placeholder="Ability Description"></textarea>
              </label>
              <!-- OLD NWP MACRO
								<textarea name="attr_nwp_macro_text" title="@{repeating_nonweaponproficiencies_$X_nwp_macro_text}" class="height-short">&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{nwp_name}}} {{Proficiency Check=[[ 1d20 + [[@{nwp_modifier}]][MOD] + [[?{Additional modifier?|0}]][MOD] ]] vs [[ @{nwp_attribute}[ATTR] ]]}}{{freetext=@{nwp_short_description}}}</textarea>
							-->
              <textarea class="span-all height-short toggle-macros" name="attr_nwp_macro_text" title="@{repeating_nonweaponproficiencies_$X_nwp_macro_text}">@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{nwp_name}}} {{roll_low=[[ 1d20 + [[ @{nwp_modifier} ]][MOD] + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[ @{nwp_attribute}[ATTR] ]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}} {{NWP Mod Applied=[[ @{nwp_modifier} ]]}} {{freetext=@{nwp_short_description}}}</textarea>
            </div>
          </details>
        </fieldset>
      </div>
      <hr>
    </section>
    <!-- Thief Skills -->
    <section class="thief-skills-box">
      <input type="checkbox" class="sect-show" title="@{thief_skills-info-show}" name="attr_thief_skills_info_show" value="1" />
      <div class="header">THIEF SKILLS</div><span class="material-icons"></span>
      <div class="sect">
        <span class="thief-columns column-header">
          <span>Function</span>
          <span>TOTAL</span>
          <span></span>
          <span>Base/Level</span>
          <span></span>
          <span>Dex Adj.</span>
          <span></span>
          <span>Racial Adj.</span>
          <span></span>
          <span>Magic/Item</span>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_pickpockets" title="%{selected|pickpockets}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Pick Pockets}} {{roll_low=[[ 1d100 ]]%}} {{roll_target= [[ @{pickpockets} ]]%}}">Pick Pockets</button>
          <label class="label-percent">
            <input type="text" name="attr_pickpockets" class="field-border readonly-span" title="@{pickpockets}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_pickpockets_base" class="width-smaller" title="@{pickpockets_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_pickpockets_ability_mod" class="width-smaller" title="@{pickpockets_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_pickpockets_racial_mod" class="width-smaller" title="@{pickpockets_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_pickpockets_magic" class="width-smaller" title="@{pickpockets_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_openlocks" title="%{selected|openlocks}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Open Locks}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{openlocks} ]]%}}">Open Locks</button>
          <label class="label-percent">
            <input type="text" name="attr_openlocks" class="field-border readonly-span" title="@{openlocks}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_openlocks_base" class="width-smaller" title="@{openlocks_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_openlocks_ability_mod" class="width-smaller" title="@{openlocks_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_openlocks_racial_mod" class="width-smaller" title="@{openlocks_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_openlocks_magic" class="width-smaller" title="@{openlocks_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_findtraps" title="%{selected|findtraps}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Find/Remove Traps}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{findtraps} ]]%}}">Find/Remove Traps</button>
          <label class="label-percent">
            <input type="text" name="attr_findtraps" class="field-border readonly-span" title="@{findtraps}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_findtraps_base" class="width-smaller" title="@{findtraps_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_findtraps_ability_mod" class="width-smaller" title="@{findtraps_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_findtraps_racial_mod" class="width-smaller" title="@{findtraps_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_findtraps_magic" class="width-smaller" title="@{findtraps_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_movequietly" title="%{selected|movequietly}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Move Quietly}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{movequietly} ]]%}}">Move Silently</button>
          <label class="label-percent">
            <input type="text" name="attr_movequietly" class="field-border readonly-span" title="@{movequietly}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_movequietly_base" class="width-smaller" title="@{movequietly_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_movequietly_ability_mod" class="width-smaller" title="@{movequietly_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_movequietly_racial_mod" class="width-smaller" title="@{movequietly_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_movequietly_magic" class="width-smaller" title="@{movequietly_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_hideinshadows" title="%{selected|HideInShadows}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Hide In Shadows}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{hideinshadows} ]]%}}">Hide In Shadows</button>
          <label class="label-percent">
            <input type="text" name="attr_hideinshadows" class="field-border readonly-span" title="@{hideinshadows}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_hideinshadows_base" class="width-smaller" title="@{hideinshadows_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hideinshadows_ability_mod" class="width-smaller" title="@{hideinshadows_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hideinshadows_racial_mod" class="width-smaller" title="@{hideinshadows_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hideinshadows_magic" class="width-smaller" title="@{hideinshadows_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_hearnoise" title="%{selected|hearnoise}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Hear Noise}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{hearnoise} ]]%}}">Hear Noise</button>
          <label class="label-percent">
            <input type="text" name="attr_hearnoise" class="field-border readonly-span" title="@{hearnoise}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_hearnoise_base" class="width-smaller" title="@{hearnoise_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hearnoise_ability_mod" class="width-smaller" title="@{hearnoise_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hearnoise_racial_mod" class="width-smaller" title="@{hearnoise_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_hearnoise_magic" class="width-smaller" title="@{hearnoise_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_climbwalls" title="%{selected|climbwalls}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Climb Walls}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{climbwalls} ]]%}}">Climb Walls</button>
          <label class="label-percent">
            <input type="text" name="attr_climbwalls" class="field-border readonly-span" title="@{climbwalls}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_climbwalls_base" class="width-smaller" title="@{climbwalls_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_climbwalls_ability_mod" class="width-smaller" title="@{climbwalls_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_climbwalls_racial_mod" class="width-smaller" title="@{climbwalls_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_climbwalls_magic" class="width-smaller" title="@{climbwalls_magic}" value="0" />
          </label>
        </span>
        <span class="thief-columns">
          <button class="button subheader stack-text" type="roll" name="roll_readlanguages" title="%{selected|readlanguages}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Read Languages}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{readlanguages} ]]%}}">Read Languages</button>
          <label class="label-percent">
            <input type="text" name="attr_readlanguages" class="field-border readonly-span" title="@{readlanguages}" value="0" />
          </label>
          <span class="text-large">=</span>
          <label class="label-percent">
            <input type="text" name="attr_readlanguages_base" class="width-smaller" title="@{readlanguages_base}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_readlanguages_ability_mod" class="width-smaller" title="@{readlanguages_ability_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_readlanguages_racial_mod" class="width-smaller" title="@{readlanguages_racial_mod}" value="0" />
          </label>
          <span class="text-large">+</span>
          <label class="label-percent">
            <input type="text" name="attr_readlanguages_magic" class="width-smaller" title="@{readlanguages_magic}" value="0" />
          </label>
        </span>
        <input type="checkbox" class="sect-show" title="@{custom-function-show}" name="attr_custom_function_show" value="1" />
        <span class="subheader">Custom Functions</span><span class="material-icons"></span>
        <div class="section">
          <span class="thief-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_thiefmisc" title="%{selected|thiefmisc}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{thiefmisc_name}}} {{roll_low=[[ 1d100 ]] %}} {{roll_target=[[ @{thiefmisc} ]]%}}"><span name="attr_thiefmisc_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_thiefmisc_name" title="@{thiefmisc_name}" value="Custom..." />
            </details>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc" class="field-border readonly-span" title="@{thiefmisc}" value="0" />
            </label>
            <span class="text-large">=</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc_base" class="width-smaller" title="@{thiefmisc_base}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc_ability_mod" class="width-smaller" title="@{thiefmisc_ability_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc_racial_mod" class="width-smaller" title="@{thiefmisc_racial_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc_magic" class="width-smaller" title="@{thiefmisc_magic}" value="0" />
            </label>
          </span>
          <span class="thief-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_thiefmisc1" title="%{selected|thiefmisc1}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{thiefmisc1_name}}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{thiefmisc1} ]]%}}"><span name="attr_thiefmisc1_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_thiefmisc1_name" title="@{thiefmisc1_name}" value="Custom..." />
            </details>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc1" class="field-border readonly-span" title="@{thiefmisc1}" value="0" />
            </label>
            <span class="text-large">=</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc1_base" class="width-smaller" title="@{thiefmisc1_base}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc1_ability_mod" class="width-smaller" title="@{thiefmisc1_ability_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc1_racial_mod" class="width-smaller" title="@{thiefmisc1_racial_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc1_magic" class="width-smaller" title="@{thiefmisc1_magic}" value="0" />
            </label>
          </span>
          <span class="thief-columns">
            <details>
              <summary>
                <span class="material-icons custom-btn-nav"></span>
                <button class="button subheader stack-text" type="roll" name="roll_thiefmisc2" title="%{selected|thiefmisc2}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{thiefmisc2_name}}} {{roll_low=[[ 1d100 ]]%}} {{roll_target=[[ @{thiefmisc2} ]]%}}"><span name="attr_thiefmisc2_name"></span></button>
              </summary>
              <input type="text" class="width-fill" name="attr_thiefmisc2_name" title="@{thiefmisc2_name}" value="Custom..." />
            </details>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc2" class="field-border readonly-span" title="@{thiefmisc2}" value="0" />
            </label>
            <span class="text-large">=</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc2_base" class="width-smaller" title="@{thiefmisc2_base}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc2_ability_mod" class="width-smaller" title="@{thiefmisc2_ability_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc2_racial_mod" class="width-smaller" title="@{thiefmisc2_racial_mod}" value="0" />
            </label>
            <span class="text-large">+</span>
            <label class="label-percent">
              <input type="text" name="attr_thiefmisc2_magic" class="width-smaller" title="@{thiefmisc2_magic}" value="0" />
            </label>
          </span>
        </div>
        <span class="thief-columns">
          <label class="text-large">Backstab:</label>
          <label class="label-under span-two">
            <span>x
              <input type="text" name="attr_backstab" class="width-smaller" title="@{backstab} | Damage done per hit is twice normal for the weapon used per four XP levels." value="2">
            </span>
            <span>Multiplier</span>
          </label>
          <label class="label-under span-two">
            <span>+
              <input type="text" name="attr_backstab_bonus" class="width-smaller" title="@{backstab_bonus} | Striking by surprise from behind also increases the hit probability by 20% (+4 on the thief’s “to hit” die roll)." value="4">
            </span>
            <span>To-Hit Adj.</span>
          </label>
        </span>
      </div>
      <hr>
    </section>
    <!-- Spells -->
    <section class="spells-box">
      <input type="checkbox" class="sect-show" title="@{spells-info-show}" name="attr_spells_info_show" value="1" />
      <div class="header">SPELLS</div><span class="material-icons"></span>
      <div class="sect">
        <div class="section center">
          <span class="spells-top column-header">
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
            <span>Cur&nbsp;/&nbsp;Max</span>
          </span>
          <span class="spells-middle">
            <span><input type="text" class="width-fill" name="attr_spells_lvl_0_current" title="@{spells_lvl_0_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_0_max" title="@{spells_lvl_0_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_1_current" title="@{spells_lvl_1_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_1_max" title="@{spells_lvl_1_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_2_current" title="@{spells_lvl_2_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_2_max" title="@{spells_lvl_2_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_3_current" title="@{spells_lvl_3_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_3_max" title="@{spells_lvl_3_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_4_current" title="@{spells_lvl_4_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_4_max" title="@{spells_lvl_4_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_5_current" title="@{spells_lvl_5_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_5_max" title="@{spells_lvl_5_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_6_current" title="@{spells_lvl_6_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_6_max" title="@{spells_lvl_6_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_7_current" title="@{spells_lvl_7_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_7_max" title="@{spells_lvl_7_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_8_current" title="@{spells_lvl_8_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_8_max" title="@{spells_lvl_8_max}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_9_current" title="@{spells_lvl_9_current}" value="0" /></span>
            <span><input type="text" class="width-fill" name="attr_spells_lvl_9_max" title="@{spells_lvl_9_max}" value="0" /></span>
          </span>
          <span class="to-hit spells-bottom">
            <span>Cantrips</span>
            <span>1st</span>
            <span>2nd</span>
            <span>3rd</span>
            <span>4th</span>
            <span>5th</span>
            <span>6th</span>
            <span>7th</span>
            <span>8th</span>
            <span>9th</span>
          </span>
        </div>
        <span>
          <span>Memorized Only</span>
          <input type="checkbox" class="width-small" name="attr_toggle_show_memorized" title="@{toggle_show_memorized}" value="1" />
        </span>
        <span>
          <span>Single Column Spells</span>
          <input type="checkbox" class="width-small toggle-single-column-spells" name="attr_toggle_single_column_spells" title="@{toggle_single_column_spells}" value="1" />
        </span>
        <div class="spell-tabs">
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="0"><span class="tab">Cantrips</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="1"><span class="tab">1st</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="2"><span class="tab">2nd</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="3"><span class="tab">3rd</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="4"><span class="tab">4th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="5"><span class="tab">5th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="6"><span class="tab">6th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="7"><span class="tab">7th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="8"><span class="tab">8th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="9"><span class="tab">9th</span>
          <input type="radio" class="tab-hidden tab" name="attr_spell_tabs" value="-1" checked><span class="tab">All</span>
        </div>
        <div class="sect">
          <fieldset class="repeating_spells">
            <input type="hidden" class="hidden toggle-show" name="attr_spell_show" value="1" readonly />
            <input type="hidden" class="hidden not-memorized" name="attr_spell_memorized" value="0" readonly />
            <input type="checkbox" class="hidden toggle-memorized" name="attr_spell_show_memorized" value="1" readonly />
            <input type="checkbox" class="hidden toggle-all" name="attr_spell_show_all" value="1" readonly checked />
            <details class="spell-display">
              <summary>
                <span class="material-icons gear-nav"></span>
                <span class="spells-repheader">
                  <button class="normal-roll" type="roll" name="attr_spell_roll" title="%{selected|repeating_spells_$X_spell_roll}" value="@{spell_macro_text}"></button>
                  <label>
                    <input type="text" class="idth-fill" name="attr_spell_name" title="@{repeating_spells_$X_spell_name}" placeholder="Spell Name" />
                  </label>
                  <label>
                    <span class="inline-label label-parenthesis-left label-parenthesis-right">
                      <input type="text" list="spell_school" name="attr_spell_school" placeholder="Spell Type">
                    </span>
                  </label>
                  <label class="right">
                    <span>#</span>
                    <input type="text" class="width-smaller" name="attr_spell_memorized" title="@{repeating_spells_$X_spell_memorized}" value="0" />
                  </label>
                </span>
              </summary>
              <div class="two-columns">
                <span class="spells-col1">
                  <label>
                    <span>Spell Level:</span>
                    <select class="field-select width-small" name="attr_spell_level" title="@{repeating_spells_$X_spell_level}">
                      <option selected>?</option>
                      <option>0</option>
                      <option>1</option>
                      <option>2</option>
                      <option>3</option>
                      <option>4</option>
                      <option>5</option>
                      <option>6</option>
                      <option>7</option>
                      <option>8</option>
                      <option>9</option>
                    </select>
                  </label>
                  <label>
                    <span>Range:</span>
                    <input type="text" name="attr_spell_range" title="@{repeating_spells_$X_spell_range}" value="" placeholder="6&quot;" />
                  </label>
                  <label>
                    <span>Duration:</span>
                    <input type="text" name="attr_spell_duration" title="@{repeating_spells_$X_spell_duration}" value="" placeholder="1 rnd" />
                  </label>
                  <label>
                    <span>Area of Effect:</span>
                    <input type="text" name="attr_spell_aoe" title="@{repeating_spells_$X_spell_aoe}" value="" placeholder="One Creature" />
                  </label>
                </span>
                <span class="spells-col2">
                  <label>
                    <span>Components:</span>
                    <input type="text" name="attr_spell_components" title="@{repeating_spells_$X_spell_components}" value="" placeholder="V,S,M" />
                  </label>
                  <label>
                    <span>Casting Time:</span>
                    <input type="text" name="attr_spell_ct" title="@{repeating_spells_$X_spell_ct}" value="" placeholder="1 rnd" />
                  </label>
                  <label>
                    <span>Saving Throw:</span>
                    <input type="text" name="attr_spell_save" title="@{repeating_spells_$X_spell_save}" value="" placeholder="None" />
                  </label>
                </span>
                <span></span>
                <span class="span-all">
                  <textarea class="sect height-short" name="attr_spell_description" title="@{repeating_spells_$X_spell_description}" placeholder="Spell Description"></textarea>
                  <!-- OLD SPELL MACRO
										<textarea name="attr_spell_macro_text" class="height-short" title="@{repeating_spells_$X_spell_macro_text}">&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{spell_name}}} {{Level:=@{spell_level}}} {{Range:=@{spell_range}}} {{Duration:=@{spell_duration}}} {{AOE:=@{spell_aoe}}} {{Comp:=@{spell_components}}} {{CT:=@{spell_ct}}} {{Save:=@{spell_save}}} {{freetext=@{spell_description}}}</textarea>	-->
                  <textarea name="attr_spell_macro_text" class="height-short toggle-macros" title="@{repeating_spells_$X_spell_macro_text}">@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{spell_name}}} {{school=@{spell_school}}} {{spell_level=@{spell_level}}} {{range=@{spell_range}}} {{duration=@{spell_duration}}} {{area_of_effect=@{spell_aoe}}} {{components=@{spell_components}}} {{casting_time=@{spell_ct}}} {{saving_throw=@{spell_save}}} {{freetext=@{spell_description}}}</textarea>
                </span>
              </div>
            </details>
          </fieldset>
        </div>
        <input type="checkbox" class="sect-show" title="@{spellsnotes-show}" name="attr_spellsnotes_show" value="1" />
        <span class="subheader">Spells Notes</span><span class="material-icons"></span>
        <div class="sect">
          <textarea name="attr_spellsnotes" title="@{spellsnotes}" placeholder="Spells Notes"></textarea>
        </div>
      </div>
      <hr>
    </section>
    <!-- Notes -->
    <section class="notes-box">
      <input type="checkbox" class="sect-show" title="@{notes-info-show}" name="attr_notes_info_show" value="1" />
      <div class="header">NOTES</div><span class="material-icons"></span>
      <div class="sect">
        <span>
          <span>Single Column Notes</span>
          <input type="checkbox" class="width-small toggle-single-column-notes" name="attr_toggle_single_column_notes" title="@{toggle_single_column_notes}" value="1" />
        </span>
        <span class="notes-norep-columns">
          <button class="normal-roll" type="roll" name="attr_note_roll" title="%{note_roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{note_name}}} {{freetext=@{notes}}}"></button>
          <label>
            <input type="text" class="width-large" name="attr_note_name" title="@{note_name}" value="" placeholder="Note Name" />
          </label>
          <textarea class="height-short" name="attr_notes" title="@{notes}" placeholder="Misc Notes"></textarea>
        </span>
      </div>
      <div class="sect">
        <fieldset class="repeating_notes">
          <details>
            <summary>
              <span class="material-icons gear-nav"></span>
              <span class="notes-columns">
                <button class="normal-roll" type="roll" name="attr_notes_roll" title="%{repeating_notes_$X_notes_roll}" value="@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{notes_name}}} {{freetext=@{notes_description}}}"></button>
                <input type="text" name="attr_notes_name" title="@{repeating_notes_$X_notes_name}" value="" placeholder="Note Name" />
              </span>
            </summary>
            <textarea class="height-tall" name="attr_notes_description" title="@{repeating_notes_$X_notes_description}" placeholder="Misc Notes"></textarea>
          </details>
        </fieldset>
      </div>
      <hr>
    </section>
    <!-- Settings -->
    <section class="options-box">
      <input type="checkbox" class="sect-show" title="@{settings-show}" name="attr_settings_show" value="1" checked />
      <div class="header">SETTINGS</div><span class="material-icons"></span>
      <div class="settings sect">
        <span class="inline-label">
          <label style="width:14em;" title="Choose a background or color scheme. Only the 'Default' scheme is compatible with roll20's dark mode option.">
            <span>Background:</span>
            <select class="background-selection field-select width-fill" name="attr_background" title="@{background}">
              <option value="1" default>White</option>
              <option value="2">Parchment</option>
              <option value="3">Goldenrod</option>
              <option value="4">Moldvay</option>
            </select>
          </label>
          <label style="width:16em;">
            <span>Roll Template Color:</span>
            <select name="attr_color_option" class="field-select width-fill" title="@{color_option}">
              <option style="background-color: var(--black); color: #fff;" ;value="black" selected>black</option>
              <option style="background-color: var(--blue); color: #fff;" value="blue">blue</option>
              <option style="background-color: var(--darkblue); color: #fff;" value="darkblue">darkblue</option>
              <option style="background-color: var(--darkgreen); color: #fff;" value="darkgreen">darkgreen</option>
              <option style="background-color: var(--darkgrey); color: #fff;" value="darkgrey">darkgrey</option>
              <option style="background-color: var(--darkorange); color: #fff;" value="darkorange">darkorange</option>
              <option style="background-color: var(--darkpink); color: #fff;" value="darkpink">darkpink</option>
              <option style="background-color: var(--darkpurple); color: #fff;" value="darkpurple">darkpurple</option>
              <option style="background-color: var(--darkred); color: #fff;" value="darkred">darkred</option>
              <option style="background-color: var(--darkyellow); color: #fff;" value="darkyellow">darkyellow</option>
              <option style="background-color: var(--green); color: #fff;" value="green">green</option>
              <option style="background-color: var(--grey); color: #fff;" value="grey">grey</option>
              <option style="background-color: var(--orange); color: #fff;" value="orange">orange</option>
              <option style="background-color: var(--pink); color: #fff;" value="pink">pink</option>
              <option style="background-color: var(--purple); color: #fff;" value="purple">purple</option>
              <option style="background-color: var(--red); color: #fff;" value="red">red</option>
              <option style="background-color: var(--white);" value="white">white</option>
              <option style="background-color: var(--yellow);" value="yellow">yellow</option>
            </select>
          </label>
        </span>
        <span class="inline-label">
          <label style="width:14em;">
            <span>Sheet Image:</span>
            <select class="field-select width-small" name="attr_sheet_image" title="@{sheet_image}">
              <option value="1" selected>Use Avatar</option>
              <option value="0">Use URL</option>
            </select>
          </label>
          <label>
            <span>Image URL:</span>
            <input type="text" class="width-full border-light" name="attr_sheet_image_url" title="Enter a valid image URL." value="" placeholder="http://www.example.com/image.jpg" />
          </label>
        </span>
        <span class="inline-label">
          <label style="width:14em;" title="">
            <span>Surprise die:</span>
            <select name="attr_surprise_die" class="field-select width-small" title="@{surprise_die}">
              <option value="6" selected>1d6</option>
              <option value="8">1d8</option>
              <option value="10">1d10</option>
              <option value="12">1d12</option>
              <option value="20">1d20</option>
              <option value="100">1d100</option>
            </select>
          </label>
          <label>
            <span>Surprise Macro:</span>
            <textarea class="height-short" name="attr_surprise_macro_text" title="@{surprise_macro_text}">@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Surprise 1-?{Surprised on?(enter upper limit)|2} on 1d@{surprise_die}}} {{roll=[[ 1d@{surprise_die}cf<?{Surprised on?(enter upper limit)|2}cs>?{Surprised on?(enter upper limit)|2} ]] }} {{Segment Adjustments}} {{encumbrance_adjustment=[[ {(@{current_encumbrance}-1),0}kh1 ]]}} {{dex_adjustment=@{surprisebonus_inverted}}}</textarea>
          </label>
        </span>
        <span class="inline-label">
          <label style="width:14em;">
            <span>Initiative die:</span>
            <select name="attr_initiative_die" class="field-select width-small" title="@{initiative_die}">
              <option value="6" selected>1d6</option>
              <option value="8">1d8</option>
              <option value="10">1d10</option>
              <option value="12">1d12</option>
              <option value="20">1d20</option>
              <option value="100">1d100</option>
            </select>
          </label>
          <label>
            <span>Initiative Macro:</span>
            <textarea class="height-short" name="attr_init_macro_text" title="@{init_macro_text}">@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Initiative!}} {{roll=[[ 1d@{initiative_die} + ( ?{Modifier?|0}[MOD] ) &{tracker}]]}} {{Misc. Adjustments}} {{mod_applied=[[ ?{Modifier?|0} ]]}} {{encumbrance_adjustment=[[ {(@{current_encumbrance}-1),0}kh1 ]]}} {{dex_adjustment=@{surprisebonus_inverted}}}</textarea>
          </label>
        </span>
        <span class="inline-label wrap">
          <h4>Misc. Options:</h4>
          <label>
            <span>Ability Check die:</span>
            <input type="text" class="width-small-plus border-light" name="attr_ability_check_die" value="1d20" title="@{ability_check_die} | Die/Dice vs Ability Score. ie 1d20, 4d6, 3d6, etc."/>
          </label>
          <label>
            <span>Use Crit Damage:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_critdamage" value="1" title="@{toggle_critdamage} | Use crit damage rolls on natural 20. Defaults to weapon damage x2. Crit damage handling can be adjusted per attack." />
          </label>
          <label>
            <span>Use THAC0:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_to_hit_table" value="1" title="@{toggle_to_hit_table} | Use THAC0 instead of Attack Matrix" />
          </label>
        </span>
        <span class="inline-label wrap">
          <input type="checkbox" class="hidden" />
          <h4>Hide Areas:</h4>
          <label>
            <span>Thief Skills:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_thief_skills" value="1" title="@{toggle_thief_skills}" />
          </label>
          <label>
            <span>Spells:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_spells" value="1" title="@{toggle_spells}" />
          </label>
          <label>
            <span>NWP:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_nwp" value="1" title="@{toggle_nwp}" />
          </label>
          <label>
            <span>Costs:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_costs" value="1" title="@{toggle_costs}" />
          </label>
          <label>
            <span>Exceptional:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_exceptional" value="1" title="@{toggle_exceptional}" checked />
          </label>
          <label>
            <span>Comeliness:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_comeliness" value="1" title="@{toggle_comeliness}" checked />
          </label>
          <label>
            <span>Multi-Class:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_multiclass" value="1" title="@{toggle_multiclass}" />
          </label>
          <label>
            <span>Sheet Macros:</span>
            <input type="checkbox" class="width-small" name="attr_toggle_macros" value="1" title="@{toggle_macros}" checked />
          </label>
        </span>
        <span class="inline-label wrap">
          <h4>Whisper Options:</h4>
          <label style="max-width:14em;">
            <span>PC Rolls:</span>
            <select class="field-select width-fill" name="attr_whisper_pc" title="@{whisper_pc}">
              <option value=" " selected>Open Rolls</option>
              <option value="/w gm">Whisper Rolls</option>
            </select>
          </label>
          <label style="max-width:14em;">
            <span>NPC Rolls:</span>
            <select class="field-select width-fill" name="attr_whisper_npc" title="@{whisper_npc}">
              <option value=" " selected>Open Rolls</option>
              <option value="/w gm">Whisper Rolls</option>
            </select>
          </label>
        </span>
        <span class="inline-label wrap" title="WARNING: any customization/editing that has been done on existing macro-text fields will be lost! You will not break anything by reseting. Reseting a field simply erases the existing value and forces the sheet to re-populate the field with the latest default value.">
          <h4>ADVANCED Options:</h4>
          <label style="width:31em;">Reset Macros to Sheet Defaults:</label>
          <button type="action" name="act_resetmacros" style="max-width:7em; margin-right: 1em;" title="WARNING: any customization/editing that has been done on existing macro-text fields will be lost! You will not break anything by reseting. Reseting a field simply erases the existing value and forces the sheet to re-populate the field with the latest default value.">Reset Now</button>
          <label class="sync-lock" title="@{sync_hp_flag} | Let the sheet sync Total HP from Class Details with HP ( @{hitpoints_max} ).">Sync HP:
            <input type="checkbox" class="width-small" name="attr_sync_hp_flag" value="1" />
            <span></span>
          </label>
          <label class="sync-lock" title="@{sync_ac_flag} | Let the sheet sync Total AC from Armor Details with AC ( @{armorclass} ).">Sync AC:
            <input type="checkbox" class="width-small" name="attr_sync_ac_flag" value="1" />
            <span></span>
          </label>
          <label title="@{autocalc_ac} | This is a persistant setting. Let the sheet auto-calculate AC based on the values entered in the Armor Details table above. This will overwrite all values in the bottom row.">Auto-Calc AC:
            <input type="checkbox" class="width-small" name="attr_autocalc_ac" value="1" checked />
          </label>
        </span>
      </div>
      <hr>
    </section>
    <!-- Footer -->
    <section class="footer-box">
      <div class="text-small">
        <span class="inline-label">
          <span>Questions/feedback?</span>
          <button type="roll" class="url-roll" value="[Current AD&D1e thread](https://app.roll20.net/forum/post/10354613/ad-and-d-1e-update-part-2)">Current AD&D1e sheet thread on Roll20</button>
        </span>
        <span class="inline-label">
          <span>Original Author: Adam Ness | Contributions by: Vince &amp; Community</span>
          <label>
            <span>v.</span>
            <input type="text" class="width-smallest version" name="attr_sheet_version" value="1.638" readonly />
            <i>beta</i>
          </label>
        </span>
      </div>
    </section>
  </div>
</div>

	<!--Roll Templates -->
	<div class="sheet-roll_templates">
	  <!-- Attack Roll Template -->
	  <rolltemplate class="sheet-rolltemplate-attacks">
	    <div class="{{#color}}color-{{color}}{{/color}}">
        <span class="sheet-row">
          {{#name}}
            <span class="sheet-template-header sheet-span-two">{{name}}</span>
          {{/name}}
          {{#subtag}}
            <span class="sheet-subheader sheet-span-two">{{subtag}}{{#dual}}&nbsp;<span class="sheet-smaller-text" title="Dual Attack.">({{dual}})</span>{{/dual}}</span>
          {{/subtag}}
        </span>

	      {{#attack1}}
	        <span class="sheet-row">
	          <span class="sheet-span-two sheet-tcat">Attack = {{attack1}}
              {{#rollWasCrit() attack1}}
                <!-- Only seen if 'Use Crit Damage' is enabled -->
                {{#rollGreater() crit 0}}
                  {{#crit}}CRIT!{{/crit}}
                {{/rollGreater() crit 0}}
              {{/rollWasCrit() attack1}}
            </span>
	        </span>
          {{#^rollGreater() crit 0}}
            {{#crit}}
              {{#damagevsSMchatmenu}}{{#damagevsLchatmenu}}
                  <span class="sheet-row">
                    <span class="sheet-span-two sheet-center">
                      {{damagevsSMchatmenu}}{{damagevsLchatmenu}}
                    </span>
                  </span>
                {{/damagevsLchatmenu}}{{/damagevsSMchatmenu}}
            {{/crit}}
          {{/^rollGreater() crit 0}}
          <!-- Only seen if 'Use Crit Damage' is enabled -->
          {{#rollGreater() crit 0}}
            {{#crit}}
              {{#^rollWasCrit() attack1}}
                {{#damagevsSMchatmenu}}{{#damagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{damagevsSMchatmenu}}{{damagevsLchatmenu}}
                      </span>
                    </span>
                  {{/damagevsLchatmenu}}{{/damagevsSMchatmenu}}
              {{/^rollWasCrit() attack1}}
              {{#rollWasCrit() attack1}}
                {{#critdamagevsSMchatmenu}}{{#critdamagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{critdamagevsSMchatmenu}}{{critdamagevsLchatmenu}}
                      </span>
                    </span>
                  {{/critdamagevsLchatmenu}}{{/critdamagevsSMchatmenu}}
              {{/rollWasCrit() attack1}}
            {{/crit}}
          {{/rollGreater() crit 0}}
	      {{/attack1}}

        {{#attack2}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Attack 2 = {{attack2}}
              {{#rollWasCrit() attack2}}
                <!-- Only seen if 'Use Crit Damage' is enabled -->
                {{#rollGreater() crit 0}}
                  {{#crit}}CRIT!{{/crit}}
                {{/rollGreater() crit 0}}
              {{/rollWasCrit() attack2}}
            </span>
          </span>
          {{#rollGreater() crit 0}}
            {{#crit}}
              {{#^rollWasCrit() attack2}}
                {{#damagevsSMchatmenu}}{{#damagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{damagevsSMchatmenu}}{{damagevsLchatmenu}}
                      </span>
                    </span>
                  {{/damagevsLchatmenu}}{{/damagevsSMchatmenu}}
              {{/^rollWasCrit() attack2}}
              {{#rollWasCrit() attack2}}
                {{#critdamagevsSMchatmenu}}{{#critdamagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{critdamagevsSMchatmenu}}{{critdamagevsLchatmenu}}
                      </span>
                    </span>
                  {{/critdamagevsLchatmenu}}{{/critdamagevsSMchatmenu}}
              {{/rollWasCrit() attack2}}
            {{/crit}}
          {{/rollGreater() crit 0}}
        {{/attack2}}

        {{#attack3}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Attack 3 = {{attack3}}
              {{#rollWasCrit() attack3}}
                <!-- Only seen if 'Use Crit Damage' is enabled -->
                {{#rollGreater() crit 0}}
                  {{#crit}}CRIT!{{/crit}}
                {{/rollGreater() crit 0}}
              {{/rollWasCrit() attack3}}
            </span>
          </span>
          {{#rollGreater() crit 0}}
            {{#crit}}
              {{#^rollWasCrit() attack3}}
                {{#damagevsSMchatmenu}}{{#damagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{damagevsSMchatmenu}}{{damagevsLchatmenu}}
                      </span>
                    </span>
                  {{/damagevsLchatmenu}}{{/damagevsSMchatmenu}}
              {{/^rollWasCrit() attack3}}
              {{#rollWasCrit() attack3}}
                {{#critdamagevsSMchatmenu}}{{#critdamagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{critdamagevsSMchatmenu}}{{critdamagevsLchatmenu}}
                      </span>
                    </span>
                  {{/critdamagevsLchatmenu}}{{/critdamagevsSMchatmenu}}
              {{/rollWasCrit() attack3}}
            {{/crit}}
          {{/rollGreater() crit 0}}
        {{/attack3}}

        {{#attack4}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Attack 4 = {{attack4}}
              {{#rollWasCrit() attack4}}
                <!-- Only seen if 'Use Crit Damage' is enabled -->
                {{#rollGreater() crit 0}}
                  {{#crit}}CRIT!{{/crit}}
                {{/rollGreater() crit 0}}
              {{/rollWasCrit() attack4}}
            </span>
          </span>
          {{#rollGreater() crit 0}}
            {{#crit}}
              {{#^rollWasCrit() attack4}}
                {{#damagevsSMchatmenu}}{{#damagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{damagevsSMchatmenu}}{{damagevsLchatmenu}}
                      </span>
                    </span>
                  {{/damagevsLchatmenu}}{{/damagevsSMchatmenu}}
              {{/^rollWasCrit() attack4}}
              {{#rollWasCrit() attack4}}
                {{#critdamagevsSMchatmenu}}{{#critdamagevsLchatmenu}}
                    <span class="sheet-row">
                      <span class="sheet-span-two sheet-center">
                        {{critdamagevsSMchatmenu}}{{critdamagevsLchatmenu}}
                      </span>
                    </span>
                  {{/critdamagevsLchatmenu}}{{/critdamagevsSMchatmenu}}
              {{/rollWasCrit() attack4}}
            {{/crit}}
          {{/rollGreater() crit 0}}
        {{/attack4}}

	      {{#damage1vsSM}}
	        <span class="sheet-row">
	          <span class="sheet-span-two sheet-tcat">Damage = {{damage1vsSM}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
	        </span>
	      {{/damage1vsSM}}
	      {{#damage1vsL}}
	        <span class="sheet-row">
	          <span class="sheet-span-two sheet-tcat">Damage vs LG = {{damage1vsL}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
	        </span>
	      {{/damage1vsL}}

        {{#damage2vsSM}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 2 = {{damage2vsSM}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage2vsSM}}
        {{#damage2vsL}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 2 vs LG = {{damage2vsL}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage2vsL}}

        {{#damage3vsSM}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 3 = {{damage3vsSM}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage3vsSM}}
        {{#damage3vsL}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 3 vs LG = {{damage3vsL}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage3vsL}}

        {{#damage4vsSM}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 4 = {{damage4vsSM}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage4vsSM}}
        {{#damage4vsL}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-tcat">Damage 4 vs LG = {{damage4vsL}}
              <!-- Only seen if 'Use Crit Damage' is enabled -->
              {{#rollGreater() crit 0}}
                {{#crit}}CRIT!{{/crit}}
              {{/rollGreater() crit 0}}
            </span>
          </span>
        {{/damage4vsL}}

	      <span class="sheet-row">
	        <span class="sheet-span-two sheet-tcat">
	          {{#rollGreater() backstab 1}}
	            {{#backstab}}<b>Backstab Attack!!!</b>{{/backstab}}
	          {{/rollGreater() backstab 1}}
	        </span>
	      </span>

        <span class="sheet-row">
          <span class="sheet-span-two smaller-text">
            {{#damagetype}}<b>Type:&nbsp;</b>{{damagetype}}&nbsp;{{/damagetype}}
            {{#rate}}<b>RoF:&nbsp;</b>{{rate}}&nbsp;{{/rate}}
            {{#range}}<b>Range:&nbsp;</b>{{range}}&nbsp;{{/range}}
            {{#length}}<b>Length:&nbsp;</b>{{length}}&nbsp;{{/length}}
            {{#space}}<b>Space:&nbsp;</b>{{space}}&nbsp;{{/space}}
            {{#speed}}<b>Speed:&nbsp;</b>{{speed}}&nbsp;{{/speed}}
            {{#range}}
              {{#rollGreater() ammo 0}}
                {{#ammo}}<b>Ammo:&nbsp;</b>{{ammo}}&nbsp;{{/ammo}}
              {{/rollGreater() ammo 0}}
              {{#rollTotal() ammo 0}}
                {{#ammo}}<b>No Ammo!</b>&nbsp;{{/ammo}}
              {{/rollTotal() ammo 0}}
            {{/range}}
          </span>
	      </span>

	      {{#ToHitAC-10to0}}
	        <span class="sheet-ToHit sheet-row sheet-span-two">AC:-10|-9|-8|-7|-6|-5|-4|-3|-2|-1|&nbsp;**0**<br />{{ToHitAC-10to0}}</span>
	      {{/ToHitAC-10to0}}
	      {{#ToHitAC1to10}}
	        <span class="sheet-ToHit sheet-row sheet-span-two">AC: **0**| 1| 2| 3| 4| 5| 6| 7| 8| 9|10<br />{{ToHitAC1to10}}</span>
	      {{/ToHitAC1to10}}

	      {{#allprops() name subtag footer backstab crit dual color attack1 attack2 attack3 attack4 damagevsSMchatmenu damagevsLchatmenu critdamagevsSMchatmenu critdamagevsLchatmenu damage1vsSM damage2vsSM damage3vsSM damage4vsSM damage1vsL damage2vsL damage3vsL damage4vsL damage1 ToHitACadj2to10 ToHitAC-10to0 ToHitAC1to10 WeaponNotes freetext damagetype rate range length space speed ammo whisper}}
	        <span class="sheet-rows">
	          <span class="sheet-span-two">
	            <span class="sheet-tcat">{{key}}</span>
              <span>{{value}}</span>
	          </span>
	        </span>
	      {{/allprops() name subtag footer backstab crit dual color attack1 attack2 attack3 attack4 damagevsSMchatmenu damagevsLchatmenu critdamagevsSMchatmenu critdamagevsLchatmenu damage1vsSM damage2vsSM damage3vsSM damage4vsSM damage1vsL damage2vsL damage3vsL damage4vsL damage1 ToHitACadj2to10 ToHitAC-10to0 ToHitAC1to10 WeaponNotes freetext damagetype rate range length space speed ammo whisper}}

	      {{#WeaponNotes}}
	        <span class="sheet-row">
	          <span class="sheet-text sheet-span-two sheet-text"><b>Notes</b>:&nbsp;{{WeaponNotes}}</span>
	        </span>
	      {{/WeaponNotes}}
	      {{#freetext}}
          <span class="sheet-row">
            <span class="sheet-span-two sheet-text">{{freetext}}</span>
          </span>
	      {{/freetext}}
	      {{#ToHitACadj2to10}}
	        <span class="sheet-row">
	          <span class="sheet-ToHit sheet-span-two">ACtype: 0| 1| 2| 3| 4| 5| 6| 7| 8| 9|10<br />{{ToHitACadj2to10}}</span>
	        </span>
	      {{/ToHitACadj2to10}}
	      <span class="sheet-row">
	        <span class="sheet-template-footer sheet-span-two">{{#footer}}{{footer}}{{/footer}}</span>
	      </span>
	    </div>
	  </rolltemplate>

    <!-- Attack Table Roll Template -->
    <rolltemplate class="sheet-rolltemplate-attacks-table">
      <div class="{{#color}}color-{{color}}{{/color}}">
        <span class="sheet-row">
          {{#name}}
            <span class="sheet-template-header sheet-span-two">{{name}}</span>
          {{/name}}
          {{#subtag}}
            <span class="sheet-subheader sheet-span-two">{{subtag}}</span>
          {{/subtag}}
        </span>
        {{#ToHitAC-10to0}}
          <span class="sheet-ToHit sheet-row sheet-span-two">AC:-10|-9|-8|-7|-6|-5|-4|-3|-2|-1|&nbsp;**0**<br />{{ToHitAC-10to0}}</span>
        {{/ToHitAC-10to0}}
        {{#ToHitAC1to10}}
          <span class="sheet-ToHit sheet-row sheet-span-two">AC: **0**| 1| 2| 3| 4| 5| 6| 7| 8| 9|10<br />{{ToHitAC1to10}}</span>
        {{/ToHitAC1to10}}
      </div>
    </rolltemplate>

	  <!-- General Roll Template -->
	  <rolltemplate class="sheet-rolltemplate-general">
	    <div class="{{#color}}color-{{color}}{{/color}}">
        <span class="sheet-row">
          {{#name}}
            <span class="sheet-template-header sheet-span-two">{{name}}</span>
          {{/name}}
          {{#subtag}}
            <span class="sheet-subheader sheet-span-two">{{subtag}}</span>
          {{/subtag}}
        </span>
	      <!--Success/Failure for Roll High-->
	      {{#roll_high}}
	        {{#^rollLess() roll_high roll_target}}
	          <span class="sheet-row">
	            <span class="sheet-tcat sheet-span-two sheet-success">Success!</span>
	        {{/^rollLess() roll_high roll_target}}
	        {{#rollLess() roll_high roll_target}}
	          <span class="sheet-tcat sheet-span-two sheet-failure">Failed!</span>
	        {{/rollLess() roll_high roll_target}}
	        </span>
	        <span class="sheet-row sheet-span-two sheet-tcat">Roll ={{roll_high}} vs {{roll_target}}</span>
	      {{/roll_high}}
	      <!--Success/Failure for Roll Low-->
	      {{#roll_low}}
	        {{#^rollGreater() roll_low roll_target}}
	          <span class="sheet-row">
	            <span class="sheet-tcat sheet-span-two sheet-success">Success!</span>
	        {{/^rollGreater() roll_low roll_target}}
	        {{#rollGreater() roll_low roll_target}}
	          <span class="sheet-tcat sheet-span-two sheet-failure">Failed!</span>
	        {{/rollGreater() roll_low roll_target}}
	        </span>
	        <span class="sheet-row sheet-span-two sheet-tcat">Roll = {{roll_low}} vs {{roll_target}}</span>
	      {{/roll_low}}
				{{#^rollTotal() roll 0}}
					<span class="sheet-row sheet-span-two sheet-tcat">Roll = {{roll}}</span>
				{{/^rollTotal() roll 0}}
	      <!--Spells-->
	      {{#school}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Type</span>
	          <span>{{school}}</span>
	        </span>
	      {{/school}}
	      {{#spell_level}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Spell Level</span>
	          <span>{{spell_level}}</span>
	        </span>
	      {{/spell_level}}
	      {{#range}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Range</span>
	          <span>{{range}}</span>
	        </span>
	      {{/range}}
	      {{#duration}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Duration</span>
	          <span>{{duration}}</span>
	        </span>
	      {{/duration}}
	      {{#area_of_effect}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Area of Effect</span>
	          <span>{{area_of_effect}}</span>
	        </span>
	      {{/area_of_effect}}
	      {{#components}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Components</span>
	          <span>{{components}}</span>
	        </span>
	      {{/components}}
	      {{#casting_time}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Casting Time</span>
	          <span>{{casting_time}}</span>
	        </span>
	      {{/casting_time}}
	      {{#saving_throw}}
	        <span class="sheet-row">
	          <span class="sheet-tcat">Saving Throw</span>
	          <span>{{saving_throw}}</span>
	        </span>
	      {{/saving_throw}}

        <span class="sheet-row">
          <span class="sheet-span-two sheet-tcat sheet-right">
            {{#uses_max}}
              {{#^rollTotal() uses_max 0}}
                {{#uses}}
                  <span>Uses:{{uses}}/{{uses_max}}</span>
                {{/uses}}
              {{/^rollTotal() uses_max 0}}
            {{/uses_max}}
            {{#quantity_max}}{{#quantity}}
                <span>Qty:{{quantity}}/{{quantity_max}}</span>
              {{/quantity}}{{/quantity_max}}
          </span>
        </span>

	      {{#allprops() name subtag footer freetext color school spell_level range duration area_of_effect components casting_time saving_throw roll roll_high roll_low roll_target mod_applied wis_applied encumbrance_adjustment dex_adjustment quantity quantity_max uses uses_max whisper}}
	        <span class="sheet-row sheet-span-two sheet-all-props">
              {{key}}{{value}}
	        </span>
	      {{/allprops() name subtag footer freetext color school spell_level range duration area_of_effect components casting_time saving_throw roll roll_high roll_low roll_target mod_applied wis_applied encumbrance_adjustment dex_adjustment quantity quantity_max uses uses_max whisper}}

        <span class="sheet-row">
	        <span class="sheet-span-two smaller-text">
	          {{#mod_applied}}<b>Mod Applied:</b>{{mod_applied}}{{/mod_applied}}
	          {{#wis_applied}}<b>Wis Applied:</b>{{wis_applied}}{{/wis_applied}}
	          {{#encumbrance_adjustment}}<b>Encumbrance Adj:</b>{{encumbrance_adjustment}}{{/encumbrance_adjustment}}
	          {{#dex_adjustment}}<b>Dex Adj:</b>{{dex_adjustment}}{{/dex_adjustment}}
	        </span>
	      </span>

	      {{#freetext}}
          <span class="sheet-row">
            <span class="sheet-row sheet-span-two sheet-text">{{freetext}}</span>
          </span>
	      {{/freetext}}
	      <span class="sheet-row">
	        <span class="sheet-template-footer sheet-span-two">{{#footer}}{{footer}}{{/footer}}</span>
	      </span>
	    </div>
	  </rolltemplate>
	</div>

	<!--Datalists-->
	<datalist id="spell_school">
		<option value="Abjuration">Abjuration</option>
		<option value="Abjuration, Evocation">Abjuration, Evocation</option>
		<option value="Abjuration/Alteration">Abjuration/Alteration</option>
		<option value="Abjuration/Conjuration/Summoning">Abjuration/Conjuration/Summoning</option>
		<option value="Abjuration/Evocation">Abjuration/Evocation</option>
		<option value="Alteration">Alteration</option>
		<option value="Alteration, Enchantment">Alteration, Enchantment</option>
		<option value="Alteration/Conjuration">Alteration/Conjuration</option>
		<option value="Alteration/Conjuration/Summoning">Alteration/Conjuration/Summoning</option>
		<option value="Alteration/Enchantment">Alteration/Enchantment</option>
		<option value="Alteration/Evocation">Alteration/Evocation</option>
		<option value="Alteration/Illusion">Alteration/Illusion</option>
		<option value="Alteration/Illusion/Phantasm">Alteration/Illusion/Phantasm</option>
		<option value="Alteration/Phantasm">Alteration/Phantasm</option>
		<option value="Charm">Charm</option>
		<option value="Conjuration">Conjuration</option>
		<option value="Conjuration, Alteration">Conjuration, Alteration</option>
		<option value="Conjuration/Phantasm">Conjuration/Phantasm</option>
		<option value="Conjuration/Summoning">Conjuration/Summoning</option>
		<option value="Divination">Divination</option>
		<option value="Enchantment">Enchantment</option>
		<option value="Enchantment, Alteration">Enchantment, Alteration</option>
		<option value="Enchantment/Alteration">Enchantment/Alteration</option>
		<option value="Enchantment/Charm">Enchantment/Charm</option>
		<option value="Enchantment/Charm/Illusion/Phantasm">Enchantment/Charm/Illusion/Phantasm</option>
		<option value="Enchantment/Divination">Enchantment/Divination</option>
		<option value="Enchantment/Evocation">Enchantment/Evocation</option>
		<option value="Evocation">Evocation</option>
		<option value="Evocation, Alteration">Evocation, Alteration</option>
		<option value="Evocation/Abjuration">Evocation/Abjuration</option>
		<option value="Evocation/Alteration">Evocation/Alteration</option>
		<option value="Evocation/Alteration/Enchantment/Charm">Evocation/Alteration/Enchantment/Charm</option>
		<option value="Evocation/Conjuration">Evocation/Conjuration</option>
		<option value="Evocation/Divination">Evocation/Divination</option>
		<option value="Evocation/Enchantment">Evocation/Enchantment</option>
		<option value="Evocation/Enchantment/Charm">Evocation/Enchantment/Charm</option>
		<option value="Evocation/Illusion">Evocation/Illusion</option>
		<option value="Evocation/Illusion/Phantasm">Evocation/Illusion/Phantasm</option>
		<option value="Illusion">Illusion</option>
		<option value="Illusion/Enchantment">Illusion/Enchantment</option>
		<option value="Illusion/Phantasm">Illusion/Phantasm</option>
		<option value="Illusion/Phantasm/Abjuration">Illusion/Phantasm/Abjuration</option>
		<option value="Illusion/Phantasm/Alteration">Illusion/Phantasm/Alteration</option>
		<option value="Illusion/Phantasm/Conjuration/Summoning">Illusion/Phantasm/Conjuration/Summoning</option>
		<option value="Invocation">Invocation</option>
		<option value="Necromantic">Necromantic</option>
		<option value="Necromantic, Conjuration">Necromantic, Conjuration</option>
		<option value="Summoning">Summoning</option>
		<option value="Varies">Varies</option>
	</datalist>

<script type="text/worker">
  // javascript
  // worker

  // GiGs custom handling for number type and logs
  const int = (score, error = 0) => parseInt(score) || error;
  const float = (score, error = 0) => parseFloat(score) || error;
  const clog = (text, color = 'green') => {
    const message = `%c ${text}`;
    console.log(message, `color: ${color}; font-weight:bold`);
  };

  // during version updates, we need to check that an attribute exists and is not equal to its default, before updating it.
  // changed != to !==   ie eslint suggestion
  const doUpdate = (stat, def = 0) => typeof stat !== 'undefined' && stat !== def;

  // handles regex for testing and replacing macrotext attributes
  const replaceSet = (attr, set) => {
    // set must be an object, with key: value pairs of 'itemToReplace': 'replaceWith'.
    Object.entries(set).forEach(([toReplace, replaceWith]) => {
      // attr = attr.replace(new RegExp(toReplace.replace('{', '\{'), 'gi'), replaceWith);
      // return attr.replace(new RegExp(toReplace.replace('{', '{'), 'gi'), replaceWith);
      attr = attr.replace(new RegExp(toReplace.replace('{', '{'), 'gi'), replaceWith);
    });
    return attr;
  };

  // Number Validation
  const numbersOnly = (attr) => {
    // numbers and/or - + symbols before number are allowed
    // add a `(?:\.[0-9]+)?` after the `[0-9]+` bit if decimals are allowed
    return /^[-+]?[0-9]+$/.test(attr) ? 1 : 0;
  };

  // Validate input for +/- adjustment
  on(
    'change:armortype_magic change:armortype2_magic change:armorshield_magic change:armorhelmet_magic change:armorother_magic change:armorother2_magic change:armorother3_magic change:armorother4_magic change:armorshield_mod change:armorother_mod change:armorother2_mod change:armorother3_mod change:armorother4_mod',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      getAttrs(
        [
          'armortype_magic',
          'armortype2_magic',
          'armorshield_magic',
          'armorhelmet_magic',
          'armorother_magic',
          'armorother2_magic',
          'armorother3_magic',
          'armorother4_magic',
          'armorshield_mod',
          'armorother_mod',
          'armorother2_mod',
          'armorother3_mod',
          'armorother4_mod',
        ],
        (v) => {
          const output = {};
          const attr = v[`${eventInfo.sourceAttribute}`];
          // validate input
          const isNumber = numbersOnly(attr);
          // clog(`NUMBER?: ${isNumber}`);
          // write to a hidden checkbox in html ie 'X_error', CSS to style
          output[`${eventInfo.sourceAttribute}_error`] = isNumber;
          // output[`${eventInfo.sourceAttribute}`] = isNumber === 0 ? 0 : attr;
          setAttrs(output, {
            silent: true,
          });
        }
      );
    }
  );

  /* ===== Repeating Sum PARAMETERS ==========
    destinations = the name of the attribute that stores the TOTAL quantity
    section = name of repeating fieldset, WITHOUT "repeating_"
    fields = the name of the attribute field to be summed
  destinations and fields both can be a single attribute: 'weight'
  or an array of attributes: ['weight','number','equipped']
  */
  const repeatingSum = (destinations, section, fields) => {
    if (!Array.isArray(destinations)) destinations = [destinations.replace(/\s/g, '').split(',')];
    if (!Array.isArray(fields)) fields = [fields.replace(/\s/g, '').split(',')];
    getSectionIDs(`repeating_${section}`, (idArray) => {
      const attrArray = idArray.reduce((m, id) => [...m, ...fields.map((field) => `repeating_${section}_${id}_${field}`)], []);
      getAttrs([...attrArray], (v) => {
        const getValue = (section, id, field) => (v[`repeating_${section}_${id}_${field}`] === 'on' ? 1 : parseFloat(v[`repeating_${section}_${id}_${field}`]) || 0);
        const commonMultipliers = fields.length <= destinations.length ? [] : fields.splice(destinations.length, fields.length - destinations.length);
        const output = {};
        destinations.forEach((destination, index) => {
          output[destination] = idArray.reduce(
            (total, id) => total + getValue(section, id, fields[index]) * commonMultipliers.reduce((subtotal, mult) => subtotal * getValue(section, id, mult), 1),
            0
          );
        });
        setAttrs(output);
      });
    });
  };

  // Global Variables
  let versionator = '';
  let autoCalcSaveRows = '';
  let autoCalcThiefRows = '';
  let autoCalcAbilityRows = '';
  let calcHP = '';
  let calcAC = '';
  let strengthCalcs = '';
  let intelligenceCalcs = '';
  let wisdomCalcs = '';
  let dexterityCalcs = '';
  let constitutionCalcs = '';
  let charismaCalcs = '';

  // VERSIONATOR example
  // use blankUpdateTemplate below as a guide to add updates to versionator.
  // const blankUpdateTemplate = (current_version, final_version) => {
  // have this line up near the start
  //  const update = {};
  // do stuff. ie geSectionIDs, getAttrs, all the various calculations
  // then end the worker
  //  update.sheet_version = current_version;
  //  setAttrs(
  //    update,
  //    {
  //      silent: true,
  //    },
  //    versionator(current_version, final_version)
  //  );
  // dont forget any close brackets for getattrs, etc.
  //  };
  // END

  // fixes attribute name conflict
  const dmgSwap = (current_version, final_version) => {
    // copy DmgBonus value to AttackDmgBonus
    // replace all instances of @{DmgBonus} with @{AttackDmgBonus} in macro-text

    // Get oldSectionID
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      _.each(idArray, (currentID) => {
        fieldnames.push(`repeating_weapon_${currentID}_DmgBonus`, `repeating_weapon_${currentID}_macro-text`);
      });
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const macrodefault =
          '&{template:attacks} {{name=@{character_name}}} {{subtag=@{WeaponName}}} {{attack1=[[1d20 + @{ToHitBonus}[BON] + @{MagicBonus}[MAG] + ?{To Hit Modifier?|0}[MOD] ]]}} {{damage1vsSM=[[@{DamageSmallMedium} + @{DmgBonus}[BON] + @{MagicBonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{DamageLarge} + @{DmgBonus}[BON] + @{MagicBonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{WeaponNotes}}} @{whisper_to-hit}';
        _.each(idArray, (currentID) => {
          const macrotext = v[`repeating_weapon_${currentID}_macro-text`] || macrodefault;
          // replaces old attribute value with new
          // update[`repeating_weapon_${currentID}_macro-text`] = macrotext.replace(new RegExp('@{DmgBonus}', 'g'), '@{AttackDmgBonus}');
          update[`repeating_weapon_${currentID}_macro-text`] = macrotext.replace(/@{DmgBonus}/g, '@{AttackDmgBonus}');
          update[`repeating_weapon_${currentID}_AttackDmgBonus`] = int(v[`repeating_weapon_${currentID}_DmgBonus`]);
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: dmgSwap completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // fixes attribute name conflict
  const maxSwap = (current_version, final_version) => {
    // Get oldSectionID
    getSectionIDs('repeating_ability', (idArray) => {
      const fieldnames = [];
      _.each(idArray, (currentID) => {
        fieldnames.push(`repeating_ability_${currentID}_max`);
      });

      getAttrs([...fieldnames], (v) => {
        const update = {};
        _.each(idArray, (currentID) => {
          // replaces old attribute value with new
          update[`repeating_ability_${currentID}_current_max`] = int(v[`repeating_ability_${currentID}_max`]);
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: maxSwap completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // replace default macro-text of non-weapon proficiencies ONLY IF they haven't been edited
  const nwpMacroUpdate = (current_version, final_version) => {
    const update = {};
    getSectionIDs('repeating_nonweaponproficiencies', (idnwps) => {
      const attrsNWPs = [];
      _.each(idnwps, (itemid) => {
        attrsNWPs.push(`repeating_nonweaponproficiencies_${itemid}_macro-text`);
      });
      getAttrs([...attrsNWPs], (v) => {
        const replacements = {
          nwp_old:
            '&{template:general} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{name}}} {{=@{short_description}}}{{Success Amount=[[((@{rAttribute})+(@{rSlots}-1)-1d20)cs>1cf<-1]]}}',
          nwp_new:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{name}}} {{Proficiency Check=[[ 1d20 + [[@{rmodifier}]][MOD] + [[?{Additional modifier?|0}]][MOD] ]] vs [[ @{rAttribute}[ATTR] ]]}}{{freetext=@{short_description}}}',
        };
        _.each(idnwps, (id) => {
          if (v[`repeating_nonweaponproficiencies_${id}_macro-text`]) {
            update[`repeating_nonweaponproficiencies_${id}_macro-text`] = v[`repeating_nonweaponproficiencies_${id}_macro-text`].replace(replacements.nwp_old, replacements.nwp_new);
          }
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: nwpMacroUpdate completed on: ${attrsNWPs}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  const weaponNameFix = (current_version, final_version) => {
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) =>
        fieldnames.push(
          `repeating_weapon_${id}_roll`,
          `repeating_weapon_${id}_weaponname`,
          `repeating_weapon_${id}_tohitbonus`,
          `repeating_weapon_${id}_magicbonus`,
          `repeating_weapon_${id}_attackdmgbonus`,
          `repeating_weapon_${id}_whisper_to-hit`,
          `repeating_weapon_${id}_macro-text`,
          `repeating_weapon_${id}_damagesmallmedium`,
          `repeating_weapon_${id}_damagelarge`,
          `repeating_weapon_${id}_rateoffire`,
          `repeating_weapon_${id}_range`,
          `repeating_weapon_${id}_quantity`,
          `repeating_weapon_${id}_weight`,
          `repeating_weapon_${id}_weaponspeed`,
          `repeating_weapon_${id}_cost`,
          `repeating_weapon_${id}_weaponnotes`
        )
      );
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const namesToFix = {
          '@{rateoffire}': '@{weapon_rateoffire}',
          '@{weaponname}': '@{weapon_name}',
          '@{tohitbonus}': '@{weapon_tohitbonus}',
          '@{magicbonus}': '@{weapon_magicbonus}',
          '@{attackdmgbonus}': '@{weapon_attackdmgbonus}',
          '@{whisper_to-hit}': '@{weapon_whisper_to_hit}',
          '@{damagesmallmedium}': '@{weapon_damagesmallmedium}',
          '@{damagelarge}': '@{weapon_damagelarge}',
          '@{range}': '@{weapon_range}',
          '@{quantity}': '@{weapon_quantity}',
          '@{weight}': '@{weapon_weight}',
          '@{weaponspeed}': '@{weapon_speed}',
          '@{cost}': '@{weapon_cost}',
          '@{macro-text}': '@{weapon_macro_text}',
          '@{weaponnotes}': '@{weapon_notes}',
        };
        const oldMacrotext =
          '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{WeaponName}}} {{attack1=[[1d20 + @{ToHitBonus}[BON] + @{MagicBonus}[MAG] + ?{To Hit Modifier?|0}[MOD]) ]]}} {{damage1vsSM=[[@{DamageSmallMedium} + @{AttackDmgBonus}[BON] + @{MagicBonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{DamageLarge} + @{AttackDmgBonus}[BON] + @{MagicBonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{WeaponNotes}}} @{whisper_to-hit}';
        idArray.forEach((id) => {
          if (doUpdate(v[`repeating_weapon_${id}_rateoffire`])) update[`repeating_weapon_${id}_weapon_rateoffire`] = int(v[`repeating_weapon_${id}_rateoffire`]);
          if (doUpdate(v[`repeating_weapon_${id}_roll`])) update[`repeating_weapon_${id}_weapon_roll`] = v[`repeating_weapon_${id}_roll`];
          if (doUpdate(v[`repeating_weapon_${id}_weaponname`])) update[`repeating_weapon_${id}_weapon_name`] = v[`repeating_weapon_${id}_weaponname`];
          if (doUpdate(v[`repeating_weapon_${id}_tohitbonus`])) update[`repeating_weapon_${id}_weapon_tohitbonus`] = int(v[`repeating_weapon_${id}_tohitbonus`]);
          if (doUpdate(v[`repeating_weapon_${id}_magicbonus`])) update[`repeating_weapon_${id}_weapon_magicbonus`] = int(v[`repeating_weapon_${id}_magicbonus`]);
          if (doUpdate(v[`repeating_weapon_${id}_attackdmgbonus`])) update[`repeating_weapon_${id}_weapon_attackdmgbonus`] = int(v[`repeating_weapon_${id}_attackdmgbonus`]);
          if (doUpdate(v[`repeating_weapon_${id}_whisper_to-hit`])) update[`repeating_weapon_${id}_weapon_whisper_to_hit`] = v[`repeating_weapon_${id}_whisper_to-hit`];
          if (doUpdate(v[`repeating_weapon_${id}_macro-text`], oldMacrotext))
            update[`repeating_weapon_${id}_weapon_macro_text`] = replaceSet(v[`repeating_weapon_${id}_macro-text`], namesToFix);
          if (doUpdate(v[`repeating_weapon_${id}_damagesmallmedium`])) update[`repeating_weapon_${id}_weapon_damagesmallmedium`] = v[`repeating_weapon_${id}_damagesmallmedium`];
          if (doUpdate(v[`repeating_weapon_${id}_damagelarge`])) update[`repeating_weapon_${id}_weapon_damagelarge`] = v[`repeating_weapon_${id}_damagelarge`];
          if (doUpdate(v[`repeating_weapon_${id}_range`])) update[`repeating_weapon_${id}_weapon_range`] = v[`repeating_weapon_${id}_range`];
          if (doUpdate(v[`repeating_weapon_${id}_quantity`])) update[`repeating_weapon_${id}_weapon_quantity`] = float(v[`repeating_weapon_${id}_quantity`]);
          if (doUpdate(v[`repeating_weapon_${id}_weight`])) update[`repeating_weapon_${id}_weapon_weight`] = float(v[`repeating_weapon_${id}_weight`]);
          if (doUpdate(v[`repeating_weapon_${id}_weaponspeed`])) update[`repeating_weapon_${id}_weapon_speed`] = int(v[`repeating_weapon_${id}_weaponspeed`]);
          if (doUpdate(v[`repeating_weapon_${id}_cost`])) update[`repeating_weapon_${id}_weapon_cost`] = float(v[`repeating_weapon_${id}_cost`]);
          if (doUpdate(v[`repeating_weapon_${id}_weaponnotes`])) update[`repeating_weapon_${id}_weapon_notes`] = v[`repeating_weapon_${id}_weaponnotes`];
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: weaponNameFix completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  const spellNameFix = (current_version, final_version) => {
    getSectionIDs('repeating_spells', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) =>
        fieldnames.push(
          `repeating_spells_${id}_roll`,
          `repeating_spells_${id}_memorized`,
          `repeating_spells_${id}_level`,
          `repeating_spells_${id}_name`,
          `repeating_spells_${id}_school`,
          `repeating_spells_${id}_range`,
          `repeating_spells_${id}_duration`,
          `repeating_spells_${id}_aoe`,
          `repeating_spells_${id}_components`,
          `repeating_spells_${id}_ct`,
          `repeating_spells_${id}_save`,
          `repeating_spells_${id}_macro-text`,
          `repeating_spells_${id}_description`,
          `repeating_spells_${id}_description-show`
        )
      );
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const namesToFix = {
          '@{memorized}': '@{spell_memorized}',
          '@{level}': '@{spell_level}',
          '@{name}': '@{spell_name}',
          '@{school}': '@{spell_school}',
          '@{range}': '@{spell_range}',
          '@{duration}': '@{spell_duration}',
          '@{aoe}': '@{spell_aoe}',
          '@{components}': '@{spell_components}',
          '@{ct}': '@{spell_ct}',
          '@{save}': '@{spell_save}',
          '@{macro-text}': '@{spell_macro_text}',
          '@{description}': '@{spell_description}',
        };
        const oldMacrotext =
          '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{name}}} {{Level:=@{level}}} {{Range:=@{range}}} {{Duration:=@{duration}}} {{AOE:=@{aoe}}} {{Comp:=@{components}}} {{CT:=@{ct}}} {{Save:=@{save}}} {{freetext=@{description}}}';
        idArray.forEach((id) => {
          if (doUpdate(v[`repeating_spells_${id}_roll`])) update[`repeating_spells_${id}_spell_roll`] = v[`repeating_spells_${id}_roll`];
          if (doUpdate(v[`repeating_spells_${id}_memorized`])) update[`repeating_spells_${id}_spell_memorized`] = int(v[`repeating_spells_${id}_memorized`]);
          if (doUpdate(v[`repeating_spells_${id}_level`])) update[`repeating_spells_${id}_spell_level`] = v[`repeating_spells_${id}_level`];
          if (doUpdate(v[`repeating_spells_${id}_name`])) update[`repeating_spells_${id}_spell_name`] = v[`repeating_spells_${id}_name`];
          if (doUpdate(v[`repeating_spells_${id}_school`])) update[`repeating_spells_${id}_spell_school`] = v[`repeating_spells_${id}_school`];
          if (doUpdate(v[`repeating_spells_${id}_range`])) update[`repeating_spells_${id}_spell_range`] = v[`repeating_spells_${id}_range`];
          if (doUpdate(v[`repeating_spells_${id}_duration`])) update[`repeating_spells_${id}_spell_duration`] = v[`repeating_spells_${id}_duration`];
          if (doUpdate(v[`repeating_spells_${id}_aoe`])) update[`repeating_spells_${id}_spell_aoe`] = v[`repeating_spells_${id}_aoe`];
          if (doUpdate(v[`repeating_spells_${id}_components`])) update[`repeating_spells_${id}_spell_components`] = v[`repeating_spells_${id}_components`];
          if (doUpdate(v[`repeating_spells_${id}_ct`])) update[`repeating_spells_${id}_spell_ct`] = v[`repeating_spells_${id}_ct`];
          if (doUpdate(v[`repeating_spells_${id}_save`])) update[`repeating_spells_${id}_spell_save`] = v[`repeating_spells_${id}_save`];
          if (doUpdate(v[`repeating_spells_${id}_macro-text`], oldMacrotext))
            update[`repeating_spells_${id}_spell_macro_text`] = replaceSet(v[`repeating_spells_${id}_macro-text`], namesToFix);
          if (doUpdate(v[`repeating_spells_${id}_description`])) update[`repeating_spells_${id}_spell_description`] = v[`repeating_spells_${id}_description`];
          if (doUpdate(v[`repeating_spells_${id}_description-show`])) update[`repeating_spells_${id}_spell_description_show`] = int(v[`repeating_spells_${id}_description-show`]);
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: spellNameFix completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  const equipmentNameFix = (current_version, final_version) => {
    getSectionIDs('repeating_equipment', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) =>
        fieldnames.push(
          `repeating_equipment_${id}_item-show`,
          `repeating_equipment_${id}_item`,
          `repeating_equipment_${id}_location`,
          `repeating_equipment_${id}_carried`,
          `repeating_equipment_${id}_quantity`,
          `repeating_equipment_${id}_quantity_max`,
          `repeating_equipment_${id}_weight`,
          `repeating_equipment_${id}_cost`
        )
      );
      getAttrs([...fieldnames], (v) => {
        const update = {};
        idArray.forEach((id) => {
          if (doUpdate(v[`repeating_equipment_${id}_item-show`])) update[`repeating_equipment_${id}_equipment_item_show`] = v[`repeating_equipment_${id}_item-show`];
          if (doUpdate(v[`repeating_equipment_${id}_item`])) update[`repeating_equipment_${id}_equipment_item`] = v[`repeating_equipment_${id}_item`];
          if (doUpdate(v[`repeating_equipment_${id}_location`])) update[`repeating_equipment_${id}_equipment_location`] = v[`repeating_equipment_${id}_location`];
          if (doUpdate(v[`repeating_equipment_${id}_carried`])) update[`repeating_equipment_${id}_equipment_carried`] = v[`repeating_equipment_${id}_carried`];
          if (doUpdate(v[`repeating_equipment_${id}_quantity`])) update[`repeating_equipment_${id}_equipment_quantity`] = float(v[`repeating_equipment_${id}_quantity`]);
          if (doUpdate(v[`repeating_equipment_${id}_quantity_max`])) update[`repeating_equipment_${id}_equipment_quantity_max`] = float(v[`repeating_equipment_${id}_quantity_max`]);
          if (doUpdate(v[`repeating_equipment_${id}_weight`])) update[`repeating_equipment_${id}_equipment_weight`] = float(v[`repeating_equipment_${id}_weight`]);
          if (doUpdate(v[`repeating_equipment_${id}_cost`])) update[`repeating_equipment_${id}_equipment_cost`] = float(v[`repeating_equipment_${id}_cost`]);
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: equipmentNameFix completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  const abilityNameFix = (current_version, final_version) => {
    getSectionIDs('repeating_ability', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) =>
        fieldnames.push(
          `repeating_ability_${id}_roll`,
          `repeating_ability_${id}_name`,
          `repeating_ability_${id}_short_description`,
          `repeating_ability_${id}_current`,
          `repeating_ability_${id}_current_max`,
          `repeating_ability_${id}_macro-text`,
          `repeating_ability_${id}_description`,
          `repeating_ability_${id}_description-show`
        )
      );
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const namesToFix = {
          '@{name}': '@{ability_name}',
          '@{current}': '@{ability_current}',
          '@{current_max}': '@{ability_current_max}',
          '@{short_description}': '@{ability_short_description}',
          '@{macro-text}': '@{ability_macro_text}',
          '@{description}': '@{ability_description}',
        };
        const oldMacrotext =
          '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Special Ability: @{name}}} {{freetext=@{short_description} @{description}}}';
        idArray.forEach((id) => {
          if (doUpdate(v[`repeating_ability_${id}_roll`])) update[`repeating_ability_${id}_ability_roll`] = v[`repeating_ability_${id}_roll`];
          if (doUpdate(v[`repeating_ability_${id}_name`])) update[`repeating_ability_${id}_ability_name`] = v[`repeating_ability_${id}_name`];
          if (doUpdate(v[`repeating_ability_${id}_short_description`])) update[`repeating_ability_${id}_ability_short_description`] = v[`repeating_ability_${id}_short_description`];
          if (doUpdate(v[`repeating_ability_${id}_current`])) update[`repeating_ability_${id}_ability_current`] = int(v[`repeating_ability_${id}_current`]);
          if (doUpdate(v[`repeating_ability_${id}_current_max`])) update[`repeating_ability_${id}_ability_current_max`] = int(v[`repeating_ability_${id}_current_max`]);
          if (doUpdate(v[`repeating_ability_${id}_macro-text`], oldMacrotext))
            update[`repeating_ability_${id}_ability_macro_text`] = replaceSet(v[`repeating_ability_${id}_macro-text`], namesToFix);
          if (doUpdate(v[`repeating_ability_${id}_description`])) update[`repeating_ability_${id}_ability_description`] = v[`repeating_ability_${id}_description`];
          if (doUpdate(v[`repeating_ability_${id}_description-show`]))
            update[`repeating_ability_${id}_ability_description_show`] = int(v[`repeating_ability_${id}_description-show`]);
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: abilityNameFix completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // fix duplicated repeating attribute names. Replaces old attribute names in macro_text
  const nwpNameFix = (current_version, final_version) => {
    getSectionIDs('repeating_nonweaponproficiencies', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) =>
        fieldnames.push(
          `repeating_nonweaponproficiencies_${id}_roll`,
          `repeating_nonweaponproficiencies_${id}_name`,
          `repeating_nonweaponproficiencies_${id}_rAttribute`,
          `repeating_nonweaponproficiencies_${id}_short_description`,
          `repeating_nonweaponproficiencies_${id}_rSlots`,
          `repeating_nonweaponproficiencies_${id}_rModifier`,
          `repeating_nonweaponproficiencies_${id}_macro-text`,
          `repeating_nonweaponproficiencies_${id}_description-show`,
          `repeating_nonweaponproficiencies_${id}_description`
        )
      );
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const namesToFix = {
          '@{name}': '@{nwp_name}',
          '@{rAttribute}': '@{nwp_attribute}',
          '@{rSlots}': '@{nwp_slots}',
          '@{rModifier}': '@{nwp_modifier}',
          '@{short_description}': '@{nwp_short_description}',
          '@{macro-text}': '@{nwp_macro_text}',
          '@{description}': '@{nwp_description}',
        };
        const oldMacrotext =
          '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{name}}} {{Proficiency Check=[[ 1d20 + [[@{rmodifier}]][MOD] + [[?{Additional modifier?|0}]][MOD] ]] vs [[ @{rAttribute}[ATTR] ]]}}{{freetext=@{short_description}}}';
        idArray.forEach((id) => {
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_roll`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_roll`] = v[`repeating_nonweaponproficiencies_${id}_roll`];
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_name`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_name`] = v[`repeating_nonweaponproficiencies_${id}_name`];
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_rAttribute`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_attribute`] = v[`repeating_nonweaponproficiencies_${id}_rAttribute`].toLowerCase();
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_short_description`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_short_description`] = v[`repeating_nonweaponproficiencies_${id}_short_description`];
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_rSlots`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_slots`] = int(v[`repeating_nonweaponproficiencies_${id}_rSlots`]);
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_rModifier`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_modifier`] = int(v[`repeating_nonweaponproficiencies_${id}_rModifier`]);
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_macro-text`], oldMacrotext))
            update[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`] = replaceSet(v[`repeating_nonweaponproficiencies_${id}_macro-text`], namesToFix);
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_description-show`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_description_show`] = int(v[`repeating_nonweaponproficiencies_${id}_description-show`]);
          if (doUpdate(v[`repeating_nonweaponproficiencies_${id}_description`]))
            update[`repeating_nonweaponproficiencies_${id}_nwp_description`] = v[`repeating_nonweaponproficiencies_${id}_description`];
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: nwpNameFix completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // add {{color=@{color}}} to all repeating macro-text
  const macroColorUpdate = (current_version, final_version) => {
    const update = {};
    getSectionIDs('repeating_nonweaponproficiencies', (idnwps) => {
      getSectionIDs('repeating_weapon', (idweapons) => {
        getSectionIDs('repeating_ability', (idabilities) => {
          getSectionIDs('repeating_spells', (idspells) => {
            const attrsNWP = [];
            const attrsWeapon = [];
            const attrsAbility = [];
            const attrsSpells = [];
            _.each(idnwps, (itemid) => {
              attrsNWP.push(`repeating_nonweaponproficiencies_${itemid}_nwp_macro_text`);
            });
            _.each(idweapons, (itemid) => {
              attrsWeapon.push(`repeating_weapon_${itemid}_weapon_macro_text`);
            });
            _.each(idabilities, (itemid) => {
              attrsAbility.push(`repeating_ability_${itemid}_ability_macro_text`);
            });
            _.each(idspells, (itemid) => {
              attrsSpells.push(`repeating_spells_${itemid}_spell_macro_text`);
            });
            getAttrs([...attrsNWP, ...attrsWeapon, ...attrsAbility, ...attrsSpells], (v) => {
              const replacements = {
                nwp_old: '&{template:general} {{name=@{character_name}}}',
                nwp_new: '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}}',
                wpn_old: '&{template:attacks} {{name=@{character_name}}}',
                wpn_new: '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}}',
                abl_old: '&{template:general} {{name=@{character_name}}}',
                abl_new: '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}}',
                spl_old: '&{template:general} {{name=@{character_name}}}',
                spl_new: '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}}',
              };
              _.each(idnwps, (id) => {
                if (v[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`]) {
                  update[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`] = v[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`].replace(
                    replacements.nwp_old,
                    replacements.nwp_new
                  );
                  clog(`VERSION UPDATE: colorUpdate completed on: ${attrsNWP}`);
                }
              });
              _.each(idweapons, (id) => {
                if (v[`repeating_weapon_${id}_weapon_macro_text`]) {
                  update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.wpn_old, replacements.wpn_new);
                  clog(`VERSION UPDATE: colorUpdate completed on: ${attrsWeapon}`);
                }
              });
              _.each(idabilities, (id) => {
                if (v[`repeating_ability_${id}_ability_macro_text`]) {
                  update[`repeating_ability_${id}_ability_macro_text`] = v[`repeating_ability_${id}_ability_macro_text`].replace(replacements.abl_old, replacements.abl_new);
                  clog(`VERSION UPDATE: colorUpdate completed on: ${attrsAbility}`);
                }
              });
              _.each(idspells, (id) => {
                if (v[`repeating_spells_${id}_spell_macro_text`]) {
                  update[`repeating_spells_${id}_spell_macro_text`] = v[`repeating_spells_${id}_spell_macro_text`].replace(replacements.spl_old, replacements.spl_new);
                  clog(`VERSION UPDATE: colorUpdate completed on: ${attrsSpells}`);
                }
              });
              update.sheet_version = current_version;
              setAttrs(
                update,
                {
                  silent: true,
                },
                versionator(current_version, final_version)
              );
            });
          });
        });
      });
    });
  };

  // Remove @{weapon_whisper_to_hit}
  const removeWhisper = (current_version, final_version) => {
    // remove all instances of @{weapon_whisper_to_hit} in macro-text
    getSectionIDs('repeating_weapon', (idweapons) => {
      const attrsWeapons = [];
      _.each(idweapons, (itemid) => {
        attrsWeapons.push(`repeating_weapon_${itemid}_weapon_macro_text`);
      });
      getAttrs([...attrsWeapons], (v) => {
        const update = {};
        const macrodefault =
          '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{attack1=[[1d20 + @{weapon_tohitbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{To Hit Modifier?|0}[MOD] ]]}} {{damage1vsSM=[[@{weapon_damagesmallmedium} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{weapon_damagelarge} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{weapon_notes}}} @{weapon_whisper_to_hit}';
        _.each(idweapons, (itemid) => {
          const macrotext = v[`repeating_weapon_${itemid}_weapon_macro_text`] || macrodefault;
          update[`repeating_weapon_${itemid}_weapon_macro_text`] = macrotext.replace(/} @{weapon_whisper_to_hit}/g, '}');
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: removeWhisper completed on: ${attrsWeapons}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // migrate HP
  const migrateHP = (current_version, final_version) => {
    // clog('HP migrated');
    getAttrs(['hitpoints_max', 'hitpoints_1_class', 'hitpoints_2_class', 'hitpoints_3_class'], (v) => {
      const update = {};
      const hitPointsMax = +v.hitpoints_max || 0;
      const hitpoints_1_class = +v.hitpoints_1_class || 0;
      const hitpoints_2_class = +v.hitpoints_2_class || 0;
      const hitpoints_3_class = +v.hitpoints_3_class || 0;
      const totalClassHP = int(Math.max(0, hitpoints_1_class) + Math.max(0, hitpoints_2_class) + Math.max(0, hitpoints_3_class)) || 0;
      // older sheet will not have hp per class
      if (totalClassHP === 0 && hitPointsMax > 0) {
        update.hitpoints_1_class = hitPointsMax;
      }
      update.sheet_version = current_version;
      clog(`VERSION UPDATE: migrate HP completed.`);
      setAttrs(
        update,
        {
          silent: true,
        },
        versionator(current_version, final_version)
      );
      calcHP();
    });
  };

  // migrate AC
  const migrateAC = (current_version, final_version) => {
    getAttrs(['armorclass', 'armortype_ac', 'armorclass_total'], (v) => {
      const update = {};
      const armorClass = +v.armorclass || 0;
      const armorClassTotal = +v.armorclass_total || 0;
      const armortypeAC = +v.armortype_ac || 0;

      if (armorClassTotal === 10 && armortypeAC === 10 && armorClass < 10) {
        update.armortype_ac = armorClass;
      }
      update.sheet_version = current_version;
      clog(`VERSION UPDATE: Migrate AC completed.`);
      setAttrs(
        update,
        {
          silent: true,
        },
        versionator(current_version, final_version)
      );
      calcAC();
    });
  };

  // update Weapon macro-text ONLY IF they haven't been edited.
  // Tests against previous macro-text changes back to v1.58
  const weaponMacroUpdate = (current_version, final_version) => {
    getSectionIDs('repeating_weapon', (idweapons) => {
      const attrsWeapons = [];
      _.each(idweapons, (itemid) => {
        attrsWeapons.push(`repeating_weapon_${itemid}_weapon_macro_text`);
      });
      getAttrs([...attrsWeapons], (v) => {
        const update = {};
        const replacements = {
          weapon_old:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{attack1=[[1d20 + @{weapon_tohitbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{To Hit Modifier?|0}[MOD] ]]}} {{damage1vsSM=[[@{weapon_damagesmallmedium} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{weapon_damagelarge} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{weapon_notes}}}',
          weapon_old_v2:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{attack1=[[1d20 + @{weapon_tohitbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{To Hit Modifier?|0}[MOD]) ]]}} {{damage1vsSM=[[@{weapon_damagesmallmedium} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{damage1vsL=[[@{weapon_damagelarge} + @{weapon_attackdmgbonus}[BON] + @{weapon_magicbonus}[MAG] + ?{Damage Modifier?|0}[MOD] ]]}} {{WeaponNotes=@{weapon_notes}}}',
          weapon_old_v3:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + @{weapon_backstab_bonus}[BACKSTAB] + @{weapon_tohitbonus}[HIT_BON] + @{weapon_prof_pen}[PROF_PEN] + @{weapon_dual_pen}[DUAL_PEN]+ @{weapon_magicbonus}[MAG_BON] + ?{To Hit Modifier?|0}[MISC_MOD] ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} @{weapon_tohitacadj}',
          weapon_old_v4:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + @{weapon_backstab_bonus}[BACKSTAB] + @{weapon_tohitbonus}[HIT_BON] + @{weapon_prof_pen}[PROF_PEN] + @{weapon_dual_pen}[DUAL_PEN]+ @{weapon_magicbonus}[MAG_BON] + ?{To Hit Modifier?|0}[MISC_MOD] ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{crit=@{toggle_critdamage}}} @{weapon_tohitacadj}',
          weapon_old_v5:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + @{weapon_backstab_bonus}[BACKSTAB] + @{weapon_tohitbonus}[HIT_BON] + @{weapon_prof_pen}[PROF_PEN] + @{weapon_dual_pen}[DUAL_PEN]+ @{weapon_magicbonus}[MAG_BON] + ?{To Hit Modifier?|0}[MISC_MOD] ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{ammo=[[ @{weapon_ammo} ]]/[[ @{weapon_ammo|max} ]]}} {{crit=@{toggle_critdamage}}} @{weapon_tohitacadj}',
          weapon_old_v6:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + @{weapon_backstab_bonus}[BACKSTAB] + @{weapon_tohitbonus}[HIT_BON] + @{weapon_prof_pen}[PROF_PEN] + @{weapon_dual_pen}[DUAL_PEN]+ @{weapon_magicbonus}[MAG_BON] + ?{To Hit Modifier?|0}[MISC_MOD] ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{ammo=[[ @{weapon_ammo} ]]/[[ @{weapon_ammo|max} ]]}} {{crit=[[ @{toggle_critdamage} ]]}} @{weapon_tohitacadj}',
          weapon_new:
            '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + ( @{weapon_backstab_bonus}[BACKSTAB] ) + ( @{weapon_tohitbonus}[HIT_BON] ) + ( @{weapon_prof_pen}[PROF_PEN] ) + ( @{weapon_dual_pen}[DUAL_PEN] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{To Hit Modifier?|0}[MISC_MOD] ) ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{ammo=[[ @{weapon_ammo} ]]/[[ @{weapon_ammo|max} ]]}} {{crit=[[ @{toggle_critdamage} ]]}} @{weapon_tohitacadj}',
        };
        _.each(idweapons, (id) => {
          if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old_v6) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old_v6, replacements.weapon_new);
          } else if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old_v5) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old_v5, replacements.weapon_new);
          } else if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old_v4) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old_v4, replacements.weapon_new);
          } else if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old_v3) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old_v3, replacements.weapon_new);
          } else if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old_v2) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old_v2, replacements.weapon_new);
          } else if (v[`repeating_weapon_${id}_weapon_macro_text`] === replacements.weapon_old) {
            update[`repeating_weapon_${id}_weapon_macro_text`] = v[`repeating_weapon_${id}_weapon_macro_text`].replace(replacements.weapon_old, replacements.weapon_new);
          }
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: weaponMacroUpdate completed on: ${attrsWeapons}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // update Ability macro-text ONLY IF they haven't been edited. Tests against v1.58 macro-text
  const abilityMacroUpdate = (current_version, final_version) => {
    getSectionIDs('repeating_ability', (idability) => {
      const attrsAbility = [];
      _.each(idability, (itemid) => {
        attrsAbility.push(`repeating_ability_${itemid}_ability_macro_text`);
      });
      getAttrs([...attrsAbility], (v) => {
        const update = {};
        const replacements = {
          ability_old:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Special Ability: @{ability_name}}} {{freetext=@{ability_short_description} @{ability_description}}}',
          ability_new:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Special Ability: @{ability_name}}} {{roll= [[ @{ability_die} + @{ability_mod}[MOD] ]]}} {{freetext=@{ability_short_description} @{ability_description}}} {{uses=@{ability_current}}} {{uses_max=@{ability_current|max}}}',
        };
        _.each(idability, (id) => {
          if (v[`repeating_ability_${id}_ability_macro_text`] === replacements.ability_old) {
            update[`repeating_ability_${id}_ability_macro_text`] = v[`repeating_ability_${id}_ability_macro_text`].replace(replacements.ability_old, replacements.ability_new);
          }
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: abilityMacroUpdate completed on: ${attrsAbility}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // update NWP macro-text ONLY IF they haven't been edited. Tests against v1.58 macro-text
  const nwpMacroUpdate2 = (current_version, final_version) => {
    getSectionIDs('repeating_nonweaponproficiencies', (idnwps) => {
      const attrsNWP = [];
      _.each(idnwps, (itemid) => {
        attrsNWP.push(`repeating_nonweaponproficiencies_${itemid}_nwp_macro_text`);
      });
      getAttrs([...attrsNWP], (v) => {
        const update = {};
        const replacements = {
          nwp_old:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{nwp_name}}} {{Proficiency Check=[[ 1d20 + [[@{nwp_modifier}]][MOD] + [[?{Additional modifier?|0}]][MOD] ]] vs [[ @{nwp_attribute}[ATTR] ]]}}{{freetext=@{nwp_short_description}}}',
          nwp_new:
            '@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Non Weapon Proficiency: @{nwp_name}}} {{roll_low=[[ 1d20 + [[ @{nwp_modifier} ]][MOD] + [[ ?{Modifier?|0} ]][MOD] ]]}} {{roll_target=[[ @{nwp_attribute}[ATTR] ]]}} {{mod_applied=[[ ?{Modifier?|0} ]]}} {{NWP Mod Applied=[[ @{nwp_modifier} ]]}} {{freetext=@{nwp_short_description}}}',
        };
        _.each(idnwps, (id) => {
          if (v[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`] === replacements.nwp_old) {
            update[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`] = v[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`].replace(
              replacements.nwp_old,
              replacements.nwp_new
            );
          }
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: nwpMacroUpdate2 completed on: ${attrsNWP}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // update Spells macro-text ONLY IF they haven't been edited. Tests against v1.58 macro-text
  const spellsMacroUpdate = (current_version, final_version) => {
    getSectionIDs('repeating_spells', (idspells) => {
      const attrsSpells = [];
      _.each(idspells, (itemid) => {
        attrsSpells.push(`repeating_spells_${itemid}_spell_macro_text`);
      });
      getAttrs([...attrsSpells], (v) => {
        const update = {};
        const replacements = {
          spell_old:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{spell_name}}} {{Level:=@{spell_level}}} {{Range:=@{spell_range}}} {{Duration:=@{spell_duration}}} {{AOE:=@{spell_aoe}}} {{Comp:=@{spell_components}}} {{CT:=@{spell_ct}}} {{Save:=@{spell_save}}} {{freetext=@{spell_description}}}',
          spell_old_v2:
            '&{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{spell_name}}} {{Range:=@{spell_range}}} {{Duration:=@{spell_duration}}} {{AOE:=@{spell_aoe}}} {{Save:=@{spell_save}}}',
          spell_new:
            '@{whisper_pc} &{template:general} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=Casts: @{spell_name}}} {{school=@{spell_school}}} {{spell_level=@{spell_level}}} {{range=@{spell_range}}} {{duration=@{spell_duration}}} {{area_of_effect=@{spell_aoe}}} {{components=@{spell_components}}} {{casting_time=@{spell_ct}}} {{saving_throw=@{spell_save}}} {{freetext=@{spell_description}}}',
        };
        _.each(idspells, (id) => {
          if (v[`repeating_spells_${id}_spell_macro_text`] === replacements.spell_old_v2) {
            update[`repeating_spells_${id}_spell_macro_text`] = v[`repeating_spells_${id}_spell_macro_text`].replace(replacements.spell_old_v2, replacements.spell_new);
          }
          if (v[`repeating_spells_${id}_spell_macro_text`] === replacements.spell_old) {
            update[`repeating_spells_${id}_spell_macro_text`] = v[`repeating_spells_${id}_spell_macro_text`].replace(replacements.spell_old, replacements.spell_new);
          }
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: spellsMacroUpdate completed on: ${attrsSpells}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // Parse Ranges
  function calcRange() {
    getAttrs(
      [
        `repeating_weapon_weapon_range`,
        `repeating_weapon_weapon_range_short`,
        `repeating_weapon_weapon_range_medium`,
        `repeating_weapon_weapon_range_long`,
        `repeating_weapon_weapon_attack_type`,
        `repeating_weapon_weapon_range_error`,
      ],
      (v) => {
        // clog('Weapon Range has been re-calculated');
        const output = {};
        let thisRange = v.repeating_weapon_weapon_range;
        // remove quotes to prevent NaN (ie distance indicators)
        thisRange = thisRange.replace(/'/g, '');
        thisRange = thisRange.replace(/"/g, '');
        // attack types selector: melee=0, ranged=1, touch=2, ranged_touch=3
        const thisType = +v.repeating_weapon_weapon_attack_type;
        // parse ranges
        const thisRangeArray = thisRange.split('/').join(',').split(' ').join(',').split('-').join(',').split(',');
        // clog(`thisRangeArray: ${thisRangeArray}`);
        const thisRangeShort = Number(thisRangeArray[0]);
        let thisRangeMedium = Number(thisRangeArray[1]);
        let thisRangeLong = Number(thisRangeArray[2]);

        if (thisType === 1 || thisType === 3) {
          // clog(`Attack is Ranged. repeating_weapon_weapon_attack_type = ${thisType}`);

          // if only a single number is entered, make it Long ie Manticore spikes
          if (thisRangeArray.length === 1 && thisRangeShort >= 0 && !thisRangeMedium && !thisRangeLong) {
            thisRangeMedium = thisRangeShort;
            thisRangeLong = thisRangeShort;
          }
          // clog(`thisRangeShort: ${thisRangeShort} |thisRangeMedium: ${thisRangeMedium} |thisRangeLong: ${thisRangeLong}`);

          // check to see if range is in the proper format.
          if (Number.isNaN(thisRangeShort)) {
            output.repeating_weapon_weapon_range_short = 0;
            output.repeating_weapon_weapon_range_error = thisRange === '' ? 1 : 0;
            // clog(`WARNING: Field is not in the proper format.`);
          } else {
            output.repeating_weapon_weapon_range_short = thisRangeShort;
          }
          if (Number.isNaN(thisRangeMedium)) {
            output.repeating_weapon_weapon_range_medium = 0;
            output.repeating_weapon_weapon_range_error = thisRange === '' ? 1 : 0;
            // clog(`WARNING: Field is not in the proper format.`);
          } else {
            output.repeating_weapon_weapon_range_medium = thisRangeMedium;
          }
          if (Number.isNaN(thisRangeLong)) {
            output.repeating_weapon_weapon_range_long = 0;
            output.repeating_weapon_weapon_range_error = thisRange === '' ? 1 : 0;
            // clog(`WARNING: Field is not in the proper format.`);
          } else {
            output.repeating_weapon_weapon_range_long = thisRangeLong;
          }
          if (!Number.isNaN(thisRangeShort) && !Number.isNaN(thisRangeMedium) && !Number.isNaN(thisRangeLong)) {
            output.repeating_weapon_weapon_range_error = 1;
          }
        }
        setAttrs(output, {
          silent: true,
        });
      }
    );
  }

  const updateRange = (current_version, final_version) => {
    const update = {};
    calcRange();
    update.sheet_version = current_version;
    setAttrs(
      update,
      {
        silent: true,
      },
      versionator(current_version, final_version)
    );
  };

  // replace all instances of @{weapon_attack_type_pen} with @{weapon_dual_pen} in macro-text
  const updateAttackTypeMacro = (current_version, final_version) => {
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      _.each(idArray, (currentID) => {
        fieldnames.push(`repeating_weapon_${currentID}_weapon_macro_text`);
      });
      getAttrs([...fieldnames], (v) => {
        const update = {};
        const macrodefault =
          '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + @{weapon_backstab_bonus}[BACKSTAB] + @{weapon_tohitbonus}[HIT_BON] + @{weapon_prof_pen}[PROF_PEN] + @{weapon_dual_pen}[DUAL_PEN]+ @{weapon_magicbonus}[MAG_BON] + ?{To Hit Modifier?|0}[MISC_MOD] ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} @{weapon_tohitacadj}';
        _.each(idArray, (currentID) => {
          const macrotext = v[`repeating_weapon_${currentID}_weapon_macro_text`] || macrodefault;
          update[`repeating_weapon_${currentID}_weapon_macro_text`] = macrotext.replace(/@{weapon_attack_type_pen}/g, '@{weapon_dual_pen}');
          update[`repeating_weapon_${currentID}_weapon_macro_text`] = macrotext.replace(/{{attacktype=@{weapon_attack_type}}} /g, '');
        });
        update.sheet_version = current_version;
        clog(`VERSION UPDATE: updateAttackTypeMacro completed on: ${fieldnames}`);
        setAttrs(
          update,
          {
            silent: true,
          },
          versionator(current_version, final_version)
        );
      });
    });
  };

  // MonsterHD from hitdice
  const monsterHD = (current_version, final_version) => {
    getAttrs(['hitdice', 'monsterHD'], (v) => {
      const update = {};
      const monsterHD_value = v.monsterHD;
      const hitDice_value = v.hitdice;
      update.monsterHD = monsterHD_value === '' ? hitDice_value : '';
      update.sheet_version = current_version;
      clog(`VERSION UPDATE: monsterHD completed.`);
      setAttrs(
        update,
        {
          silent: true,
        },
        versionator(current_version, final_version)
      );
    });
  };

  const stat_functions = () => {
    strengthCalcs();
    intelligenceCalcs();
    wisdomCalcs();
    dexterityCalcs();
    constitutionCalcs();
    charismaCalcs();
  };

  // Check and set Ability defaults to 8 on new sheets
  const newSheet = () => {
    getAttrs(['hitdice', 'armorclass', 'strength', 'intelligence', 'wisdom', 'dexterity', 'constitution', 'charisma', 'new_character'], (v) => {
      const output = {};
      const testHitdice = +v.hitdice;
      const testAC = +v.armorclass;
      const testStr = +v.strength;
      const testInt = +v.intelligence;
      const testWis = +v.wisdom;
      const testDex = +v.dexterity;
      const testCon = +v.constitution;
      const testCha = +v.charisma;
      const testOldChar = +v.new_character;
      // new sheets will have all abilities '10' by default
      // defaults will then be set to '8' default
      const testAbility = testStr + testInt + testWis + testDex + testCon + testCha;
      // clog(`~~~~~~ Average Ability detected: ${testAbility}, Hit Dice: ${testHitdice}, AC: ${testAC}`);
      if (testOldChar === 1) {
        // clog(`~~~~~~ OLD SHEET DETECTED: ${testOldChar}`);
      } else if (testHitdice === 0 && testAC === 10 && testAbility === 60) {
        // clog(`~~~~~~ NEW SHEET DETECTED: ${testOldChar}, Ability Defaults set to "8".`);
        output.strength = testStr === 10 ? 8 : testStr;
        output.intelligence = testInt === 10 ? 8 : testInt;
        output.wisdom = testWis === 10 ? 8 : testWis;
        output.dexterity = testDex === 10 ? 8 : testDex;
        output.constitution = testCon === 10 ? 8 : testCon;
        output.charisma = testCha === 10 ? 8 : testCha;
        output.old_character = 1;
      } else {
        // clog(`~~~~~~ OLD SHEET DETECTED: ${testOldChar}`);
        output.old_character = 0;
      }
      setAttrs(
        output,
        {
          silent: true,
        },
        stat_functions()
      );
    });
  };

  // versioning routine to handle attribute changes
  versionator = (current_version, final_version) => {
    if (current_version < 0.1) {
      dmgSwap(0.1, final_version);
    } else if (current_version < 1.2) {
      maxSwap(1.2, final_version);
    } else if (current_version < 1.5) {
      nwpMacroUpdate(1.5, final_version);
    } else if (current_version < 1.52) {
      weaponNameFix(1.52, final_version);
    } else if (current_version < 1.53) {
      spellNameFix(1.53, final_version);
    } else if (current_version < 1.54) {
      equipmentNameFix(1.54, final_version);
    } else if (current_version < 1.55) {
      abilityNameFix(1.55, final_version);
    } else if (current_version < 1.56) {
      nwpNameFix(1.56, final_version);
    } else if (current_version < 1.57) {
      macroColorUpdate(1.57, final_version);
      // 1e revised sheet is anything > v1.58
    } else if (current_version < 1.591) {
      autoCalcAbilityRows(1.591, final_version);
    } else if (current_version < 1.592) {
      autoCalcSaveRows(1.592, final_version);
    } else if (current_version < 1.593) {
      autoCalcThiefRows(1.593, final_version);
    } else if (current_version < 1.594) {
      removeWhisper(1.594, final_version);
    } else if (current_version < 1.595) {
      weaponMacroUpdate(1.595, final_version);
    } else if (current_version < 1.596) {
      abilityMacroUpdate(1.596, final_version);
    } else if (current_version < 1.597) {
      nwpMacroUpdate2(1.597, final_version);
    } else if (current_version < 1.598) {
      spellsMacroUpdate(1.598, final_version);
    } else if (current_version < 1.61) {
      updateRange(1.61, final_version);
    } else if (current_version < 1.62) {
      updateAttackTypeMacro(1.62, final_version);
    } else if (current_version < 1.634) {
      weaponMacroUpdate(1.634, final_version);
    } else if (current_version < 1.635) {
      migrateHP(1.635, final_version);
    } else if (current_version < 1.636) {
      migrateAC(1.636, final_version);
    } else if (current_version < 1.637) {
      weaponMacroUpdate(1.637, final_version);
      // all updates completed
    } else if (current_version < 1.638) {
      monsterHD(1.638, final_version);
      // all updates completed
    } else if (current_version < final_version) {
      setAttrs({
        sheet_version: final_version,
      });
    } else if (current_version === final_version) {
      // new sheet?
      newSheet();
    }
  };

  // Versioning
  on('sheet:opened', () => {
    // SET LATEST VERSION HERE. needs to be => the last update made in versionator
    // Set attr_sheet_version to the final_version to prevent new sheets from stepping through versionator
    const final_version = 1.638;
    getAttrs(['sheet_version'], (v) => {
      const current_version = float(v.sheet_version);
      clog(`Current sheet data version:${current_version}, Sheet code version:${final_version}`);
      versionator(current_version, final_version);
    });
  });

  // Armor Cost
  on(
    'change:armor_cost change:armortype2_cost change:armorshield_cost change:armorhelmet_cost change:armorother_cost change:armorother2_cost change:armorother3_cost change:armorother4_cost',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      // clog('Armor Costs re-calculated');
      getAttrs(['armor_cost', 'armortype2_cost', 'armorshield_cost', 'armorhelmet_cost', 'armorother_cost', 'armorother2_cost', 'armorother3_cost', 'armorother4_cost'], (v) => {
        const output = {};
        const armor_cost = +v.armor_cost || 0;
        const armorType2_cost = +v.armortype2_cost || 0;
        const armorShield_cost = +v.armorshield_cost || 0;
        const armorHelmet_cost = +v.armorhelmet_cost || 0;
        const armorOther_cost = +v.armorother_cost || 0;
        const armorOther2_cost = +v.armorother2_cost || 0;
        const armorOther3_cost = +v.armorother3_cost || 0;
        const armorOther4_cost = +v.armorother4_cost || 0;
        const armorCost = float(
          armor_cost + armorType2_cost + armorShield_cost + armorHelmet_cost + armorOther_cost + armorOther2_cost + armorOther3_cost + armorOther4_cost
        ).toFixed(2);
        output.total_armor_cost = armorCost;
        setAttrs(output);
      });
    }
  );

  // Weapon Cost
  on('change:repeating_weapon:weapon_cost change:repeating_weapon:weapon_quantity remove:repeating_weapon', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    repeatingSum('total_weapon_cost', 'weapon', ['weapon_cost', 'weapon_quantity']);
  });

  // Equipment Cost
  on('change:repeating_equipment:equipment_cost change:repeating_equipment:equipment_quantity remove:repeating_equipment', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    repeatingSum('total_equipment_cost', 'equipment', ['equipment_cost', 'equipment_quantity']);
  });

  // Total Cost
  on(
    'sheet:opened change:repeating_equipment remove:repeating_equipment change:repeating_weapon remove:repeating_weapon change:total_armor_cost change:total_weapon_cost change:total_equipment_cost',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      getAttrs(['total_armor_cost', 'total_weapon_cost', 'total_equipment_cost'], (v) => {
        setAttrs({
          total_cost: (float(v.total_armor_cost) + float(v.total_weapon_cost) + float(v.total_equipment_cost) - float(v.total_equipment_cost_mount)).toFixed(2),
        });
      });
    }
  );

  // Armor Weight
  on(
    'sheet:opened change:armor_weight change:armortype_carried change:armortype2_weight change:armortype2_carried change:armorshield_weight change:armorshield_carried change:armorhelmet_weight change:armorhelmet_carried change:armorother_weight change:armorother_carried change:armorother2_weight change:armorother2_carried change:armorother3_weight change:armorother3_carried change:armorother4_weight change:armorother4_carried',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      // clog('Armor Weights re-calculated');
      getAttrs(
        [
          'armor_weight',
          'armortype_carried',
          'armortype2_weight',
          'armortype2_carried',
          'armorshield_weight',
          'armorshield_carried',
          'armorhelmet_weight',
          'armorhelmet_carried',
          'armorother_weight',
          'armorother_carried',
          'armorother2_weight',
          'armorother2_carried',
          'armorother3_weight',
          'armorother3_carried',
          'armorother4_weight',
          'armorother4_carried',
        ],
        (v) => {
          const output = {};
          const armorType_carried = +v.armortype_carried || 0;
          const armorType2_carried = +v.armortype2_carried || 0;
          const armorShield_carried = +v.armorshield_carried || 0;
          const armorHelmet_carried = +v.armorhelmet_carried || 0;
          const armorOther_carried = +v.armorother_carried || 0;
          const armorOther2_carried = +v.armorother2_carried || 0;
          const armorOther3_carried = +v.armorother3_carried || 0;
          const armorOther4_carried = +v.armorother4_carried || 0;
          const armor_weight = +v.armor_weight || 0;
          const armorType2_weight = +v.armortype2_weight || 0;
          const armorShield_weight = +v.armorshield_weight || 0;
          const armorHelmet_weight = +v.armorhelmet_weight || 0;
          const armorOther_weight = +v.armorother_weight || 0;
          const armorOther2_weight = +v.armorother2_weight || 0;
          const armorOther3_weight = +v.armorother_3weight || 0;
          const armorOther4_weight = +v.armorother_w4eight || 0;
          const armorWeight = float(
            armorType_carried * armor_weight +
              armorType2_carried * armorType2_weight +
              armorShield_carried * armorShield_weight +
              armorHelmet_carried * armorHelmet_weight +
              armorOther_carried * armorOther_weight +
              armorOther2_carried * armorOther2_weight +
              armorOther3_carried * armorOther3_weight +
              armorOther4_carried * armorOther4_weight
          );
          output.total_armor_weight = armorWeight;
          setAttrs(output);
        }
      );
    }
  );

  // Weapon Weight
  on('change:repeating_weapon:weapon_weight change:repeating_weapon:weapon_quantity remove:repeating_weapon', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    repeatingSum('total_weapon_weight', 'weapon', ['weapon_weight', 'weapon_quantity']);
  });

  // Equipment Weight
  on(
    'change:repeating_equipment:equipment_weight change:repeating_equipment:equipment_quantity change:repeating_equipment:equipment_carried remove:repeating_equipment',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      repeatingSum('total_equipment_weight', 'equipment', ['equipment_weight', 'equipment_quantity', 'equipment_carried']);
    }
  );

  // Coin Weight
  on('change:pp change:gp change:ep change:sp change:cp', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['pp', 'gp', 'ep', 'sp', 'cp'], (v) => {
      setAttrs({
        total_coin_weight: Math.round((float(v.pp) + float(v.gp) + float(v.ep) + float(v.sp) + float(v.cp)) / 1),
      });
    });
  });

  // Total Weight
  on(
    'sheet:opened change:total_armor_weight change:total_weapon_weight change:total_coin_weight change:total_equipment_weight change:repeating_equipment remove:repeating_equipment change:repeating_weapon remove:repeating_weapon',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      getAttrs(['total_armor_weight', 'total_weapon_weight', 'total_coin_weight', 'total_equipment_weight'], (v) => {
        setAttrs({
          total_weight: Math.round(float(v.total_armor_weight) + float(v.total_weapon_weight) + float(v.total_coin_weight) + float(v.total_equipment_weight)),
        });
      });
    }
  );

  // Encumbrance Calcs
  function setCurrentEncumbranceFlag() {
    getAttrs(['normal_load_adjusted', 'heavy_load', 'very_heavy_load', 'max_load', 'total_weight'], (v) => {
      // clog('Current Encumbrance flag has been re-calculated');
      const output = {};
      const normal_load_adjusted = +v.normal_load_adjusted || 0;
      const heavy_load = +v.heavy_load || 0;
      const very_heavy_load = +v.very_heavy_load || 0;
      const total_weight = +v.total_weight || 0;
      let currentEncumbrance = 0;

      if (total_weight <= normal_load_adjusted) {
        currentEncumbrance = 0;
        // clog('===== Carrying Capacity is Unencumbered =====');
      } else if (total_weight > normal_load_adjusted && total_weight <= heavy_load) {
        currentEncumbrance = 1;
        // clog('===== Carrying Capacity is Heavy =====');
      } else if (total_weight > heavy_load && total_weight <= very_heavy_load) {
        currentEncumbrance = 2;
        // clog('===== Carrying Capacity is Very Heavy =====');
      } else {
        currentEncumbrance = 3;
        // clog('===== Carrying Capacity is Encumbered =====');
      }
      output.current_encumbrance = currentEncumbrance;
      setAttrs(output);
    });
  }

  on('sheet:opened change:encumbrancebonus change:normal_load change:total_weight', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['encumbrancebonus', 'normal_load', 'normal_load_adjusted', 'heavy_load', 'very_heavy_load', 'max_load', 'total_weight'], (v) => {
      // clog('Encumbrance has been re-calculated');
      const output = {};
      const encumbrancebonus = +v.encumbrancebonus || 0;
      const normal_load = 350;
      const normal_load_adjusted = int(normal_load + encumbrancebonus) || 0;
      output.normal_load = normal_load;
      output.heavy_load = int(normal_load_adjusted + normal_load);
      output.very_heavy_load = int(normal_load_adjusted + normal_load * 2);
      output.max_load = int(normal_load_adjusted + normal_load * 2 + 1);
      output.normal_load_adjusted = normal_load_adjusted;
      setAttrs(output);
      setCurrentEncumbranceFlag();
    });
  });

  // Movement Calcs
  function setCurrentMovement() {
    getAttrs(['current_encumbrance', 'movement', 'movement_normal', 'movement_known', 'movement_run'], (v) => {
      // clog('Movement Rates have been re-calculated');
      const output = {};
      // only extract an integer from movement
      const movement = +v.movement.replace(/[^0-9]/g, '');
      const current_encumbrance = +v.current_encumbrance || 0;
      let adjustedMove = 0;

      if (current_encumbrance === 0) {
        adjustedMove = movement;
        // clog('=====Movement is Normal=====');
      } else if (current_encumbrance === 1) {
        adjustedMove = int(movement - 3);
        // clog('=====Movement is Heavy=====');
      } else if (current_encumbrance === 2) {
        adjustedMove = int(movement - 6);
        // clog('=====Movement is Very Heavy=====');
      } else {
        adjustedMove = int(movement - 9);
        // clog('=====Movement is Encumbered=====');
      }

      output.movement_normal = int(adjustedMove);
      output.movement_known = int(adjustedMove * 5);
      output.movement_run = int(adjustedMove * 10);
      setAttrs(output);
    });
  }

  on('sheet:opened change:movement change:current_encumbrance', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['current_encumbrance', 'movement', 'movement_heavy', 'movement_load', 'movement_max'], (v) => {
      // clog('Current Base Movement has been re-calculated');
      const output = {};
      // only extract an integer from movement
      const movement = +v.movement.replace(/[^0-9]/g, '');
      output.movement_heavy = Math.max(int(movement - 3), 0);
      output.movement_load = Math.max(int(movement - 6), 0);
      output.movement_max = Math.max(int(movement - 9), 0);
      setAttrs(output);
      setCurrentMovement();
    });
  });

  // Equipment Carry select sync
  // equip tabs use selector, but weight calcs use equipment_carried
  on('change:repeating_equipment:equipment_carried_select', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['repeating_equipment_equipment_carried_select'], (v) => {
      const output = {};
      const carriedCalc = +v.repeating_equipment_equipment_carried_select || 0;
      const carriedValue = carriedCalc === 1 ? 1 : 0;
      output.repeating_equipment_equipment_carried = carriedValue;
      setAttrs(output, {
        silent: true,
      });
    });
  });

  // Equipment Tabs
  on('change:equipment_tabs_type change:equipment_tabs_carry change:repeating_equipment:equipment_carried_select', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_equipment', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) => {
        fieldnames.push(`repeating_equipment_${id}_equipment_type`);
        fieldnames.push(`repeating_equipment_${id}_equipment_carried_select`);
      });
      getAttrs(['equipment_tabs_type', 'equipment_tabs_carry', ...fieldnames], (v) => {
        const output = {};
        const type = +v.equipment_tabs_type || 0;
        const carried = +v.equipment_tabs_carry || 0;
        idArray.forEach((id) => {
          const thistype = +v[`repeating_equipment_${id}_equipment_type`] || 0;
          const thiscarriedCalc = +v[`repeating_equipment_${id}_equipment_carried_select`] || 0;
          output[`repeating_equipment_${id}_equipment_show_type`] = type === -1 || type === thistype ? 1 : 0;
          output[`repeating_equipment_${id}_equipment_show_carry`] = carried === -1 || carried === thiscarriedCalc ? 1 : 0;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // Spell Tabs and Memorized toggle
  on('change:spell_tabs change:toggle_show_memorized', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_spells', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) => {
        fieldnames.push(`repeating_spells_${id}_spell_memorized`);
        fieldnames.push(`repeating_spells_${id}_spell_show_all`);
        fieldnames.push(`repeating_spells_${id}_spell_level`);
      });
      getAttrs(['spell_tabs', 'toggle_show_memorized', ...fieldnames], (v) => {
        const output = {};
        const memorizedOnly = +v.toggle_show_memorized || 0;
        const level = +v.spell_tabs || 0;
        idArray.forEach((id) => {
          const thismemorizedOnly = +v[`repeating_spells_${id}_spell_memorized`] || 0;
          const thislevel = +v[`repeating_spells_${id}_spell_level`] || 0;
          output[`repeating_spells_${id}_spell_show_memorized`] = memorizedOnly === 1 && thismemorizedOnly > 0 ? 1 : 0;
          output[`repeating_spells_${id}_spell_show_all`] = memorizedOnly === 1 ? 0 : 1;
          output[`repeating_spells_${id}_spell_show`] = level === -1 || level === thislevel ? 1 : 0;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // ToHitACadj Toggle
  on(
    'change:repeating_weapon:weapon_tohitacadj_flag change:repeating_weapon:weapon_thac_adj0 change:repeating_weapon:weapon_thac_adj1 change:repeating_weapon:weapon_thac_adj2 change:repeating_weapon:weapon_thac_adj3 change:repeating_weapon:weapon_thac_adj4 change:repeating_weapon:weapon_thac_adj5 change:repeating_weapon:weapon_thac_adj6 change:repeating_weapon:weapon_thac_adj7 change:repeating_weapon:weapon_thac_adj8 change:repeating_weapon:weapon_thac_adj9 change:repeating_weapon:weapon_thac_adj10',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      getAttrs(['repeating_weapon_weapon_ToHitACadj_flag', 'repeating_weapon_weapon_ToHitACadj'], (v) => {
        const output = {};
        const thisflag = +v.repeating_weapon_weapon_ToHitACadj_flag || 0;
        output.repeating_weapon_weapon_ToHitACadj =
          thisflag === 1
            ? '{{ToHitACadj2to10=HitAdj:[[ @{weapon_thac_adj0} ]]|[[ @{weapon_thac_adj1} ]]|[[ @{weapon_thac_adj2} ]]|[[ @{weapon_thac_adj3} ]]|[[ @{weapon_thac_adj4} ]]|[[ @{weapon_thac_adj5} ]]|[[ @{weapon_thac_adj6} ]]|[[ @{weapon_thac_adj7} ]]|[[ @{weapon_thac_adj8} ]]|[[ @{weapon_thac_adj9} ]]|[[ @{weapon_thac_adj10} ]] }}'
            : '{{ToHitACadj2to10}}';
        setAttrs(output, {
          silent: true,
        });
      });
    }
  );

  // Matrix or THAC0 Toggle for repeating_weapons
  on('change:toggle_to_hit_table change:repeating_weapon:weapon_name change:repeating_weapon:weapon_whisper_to_hit_select', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) => {
        fieldnames.push(`repeating_weapon_${id}_weapon_whisper_to_hit_select`);
        fieldnames.push(`repeating_weapon_${id}_weapon_whisper_to_hit`);
      });
      getAttrs(['weapon_whisper_to_hit', 'weapon_whisper_to_hit_select', 'toggle_to_hit_table', ...fieldnames], (v) => {
        const output = {};
        const flag = +v.toggle_to_hit_table || 0;

        idArray.forEach((id) => {
          let thishitTableSelect = +v[`repeating_weapon_${id}_weapon_whisper_to_hit_select`] || 0;
          let thishitTableMacro = v[`repeating_weapon_${id}_weapon_whisper_to_hit`];
          const noMacro = '&nbsp;';
          const matrixMacro =
            '\n/w gm &{template:attacks-table} {{color=@{color_option}}} {{ToHitAC-10to0=ToHit:[[ @{thac-10} ]]|[[ @{thac-9} ]]|[[ @{thac-8} ]]|[[ @{thac-7} ]]|[[ @{thac-6} ]]|[[ @{thac-5} ]]|[[ @{thac-4} ]]|[[ @{thac-3} ]]|[[ @{thac-2} ]]|[[ @{thac-1} ]]|[[ @{thac0} ]]}} {{ToHitAC1to10=ToHit:[[ @{thac0} ]]|[[ @{thac1} ]]|[[ @{thac2} ]]|[[ @{thac3} ]]|[[ @{thac4} ]]|[[ @{thac5} ]]|[[ @{thac6} ]]|[[ @{thac7} ]]|[[ @{thac8} ]]|[[ @{thac9} ]]|[[ @{thac10} ]] }}';
          const thac0Macro =
            '\n/w gm &{template:attacks-table} {{color=@{color_option}}} {{ToHitAC-10to0=ToHit:@{thac0-10}|@{thac0-9}|@{thac0-8}|@{thac0-7}|@{thac0-6}|@{thac0-5}|@{thac0-4}|@{thac0-3}|@{thac0-2}|@{thac0-1}|**@{thac00}**}} {{ToHitAC1to10=ToHit:**@{thac00}**|@{thac01}|@{thac02}|@{thac03}|@{thac04}|@{thac05}|@{thac06}|@{thac07}|@{thac08}|@{thac09}|@{thac010} }}';

          if (thishitTableSelect === 2) {
            thishitTableMacro = noMacro;
            thishitTableSelect = 2;
          } else if (thishitTableSelect === 0) {
            if (flag === 0) {
              thishitTableMacro = matrixMacro;
              thishitTableSelect = 0;
            } else if (flag === 1) {
              thishitTableMacro = thac0Macro;
              thishitTableSelect = 1;
            }
          } else if (thishitTableSelect === 1) {
            if (flag === 0) {
              thishitTableMacro = matrixMacro;
              thishitTableSelect = 0;
            } else if (flag === 1) {
              thishitTableMacro = thac0Macro;
              thishitTableSelect = 1;
            }
          }
          output[`repeating_weapon_${id}_weapon_whisper_to_hit`] = thishitTableMacro;
          output[`repeating_weapon_${id}_weapon_whisper_to_hit_select`] = thishitTableSelect;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // Weapon Proficiency Toggle
  on('change:repeating_weapon:weapon_prof_flag change:weapon_proficiency_initial change:weapon_proficiency_added_per_level change:weapon_proficiency_penalty', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) => {
        fieldnames.push(`repeating_weapon_${id}_weapon_prof_flag`);
      });
      getAttrs(['weapon_prof_flag', 'weapon_proficiency_penalty', ...fieldnames], (v) => {
        // clog('Weapon Proficiency has been re-calculated');
        const output = {};
        idArray.forEach((id) => {
          const thisflag = +v[`repeating_weapon_${id}_weapon_prof_flag`] || 0;
          const thispenalty = +v.weapon_proficiency_penalty || 0;
          output[`repeating_weapon_${id}_weapon_prof`] = thispenalty;
          output[`repeating_weapon_${id}_weapon_prof_pen`] = thisflag === 0 ? '0' : thispenalty;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // Weapon Backstab Toggle
  on('change:repeating_weapon:weapon_backstab_flag change:backstab change:backstab_bonus change:toggle_thief_skills', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = [];
      idArray.forEach((id) => {
        fieldnames.push(`repeating_weapon_${id}_weapon_backstab_flag`);
      });
      getAttrs(['backstab', 'backstab_bonus', 'weapon_backstab_flag', 'toggle_thief_skills', ...fieldnames], (v) => {
        const output = {};
        const thiefSkills = +v.toggle_thief_skills;
        const thisMult = +v.backstab || 1;
        const thisBonus = +v.backstab_bonus || 0;
        idArray.forEach((id) => {
          const thisFlag = +v[`repeating_weapon_${id}_weapon_backstab_flag`];
          if (thiefSkills === 0) {
            output[`repeating_weapon_${id}_weapon_backstab_var`] = thisFlag === 0 ? 0 : `+${thisBonus}`;
            output[`repeating_weapon_${id}_weapon_backstab_bonus`] = thisFlag === 0 ? 0 : thisBonus;
            output[`repeating_weapon_${id}_weapon_backstab`] = thisFlag === 0 ? 1 : `x${thisMult}`;
            output[`repeating_weapon_${id}_weapon_backstab_mult`] = thisFlag === 0 ? 1 : thisMult;
          }
          if (thiefSkills === 1) {
            output[`repeating_weapon_${id}_weapon_backstab_var`] = 0;
            output[`repeating_weapon_${id}_weapon_backstab_bonus`] = 0;
            output[`repeating_weapon_${id}_weapon_backstab`] = 1;
            output[`repeating_weapon_${id}_weapon_backstab_mult`] = 1;
          }
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // Weapon Dual-Wield Calc Penalty
  function calcDualPen() {
    getAttrs(['dexterity'], (v) => {
      // clog('Weapon Attack Type has been re-calculated');
      const output = {};
      const dex = +v.dexterity || 0;
      // const primary = +v.dual_pen_primary || 0;
      // const secondary = +v.dual_pen_secondary || 0;
      let dex_mod = 0;
      if (dex < 6) {
        dex_mod = Math.max(-3, dex - 6);
        // clog(`low dex penalty: ${dex_mod}`);
      } else if (dex >= 18) {
        dex_mod = Math.min(5, Math.floor(dex / 3) - 3);
        // clog(`very high dex penalty: ${dex_mod}`);
      } else if (dex > 15) {
        dex_mod = dex - 15;
        // clog(`high dex penalty: ${dex_mod}`);
      }
      if (dex_mod) {
        // clog(`${dex_mod > 0 ? 'high' : 'low'} dex penalty: ${dex_mod}`);
      }
      const primary_mod = Math.min(0, dex_mod - 2);
      const secondary_mod = Math.min(0, dex_mod - 4);
      output.dual_pen_primary = primary_mod;
      output.dual_pen_secondary = secondary_mod;
      setAttrs(output, {
        silent: true,
      });
    });
  }

  on('sheet:opened change:dexterity', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    calcDualPen();
  });

  on('change:repeating_weapon:weapon_dual change:dual_pen_primary change:dual_pen_secondary', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_weapon', (idArray) => {
      const fieldnames = idArray.reduce((fields, id) => [...fields, `repeating_weapon_${id}_weapon_dual`], []);
      getAttrs(['dual_pen_primary', 'dual_pen_secondary', ...fieldnames], (v) => {
        // clog('Weapon Attack Type has been re-calculated');
        const output = {};
        const primary = +v.dual_pen_primary || 0;
        const secondary = +v.dual_pen_secondary || 0;
        idArray.forEach((id) => {
          const attack_type = v[`repeating_weapon_${id}_weapon_dual`];
          let handed_mod = 0;
          if (attack_type === 'Primary') {
            handed_mod = primary;
          }
          if (attack_type === 'Secondary') {
            handed_mod = secondary;
          }
          const thispenalty = Math.min(0, handed_mod);
          output[`repeating_weapon_${id}_weapon_dual_pen`] = thispenalty;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    });
  });

  // Weapon Range
  on('change:repeating_weapon:weapon_range change:repeating_weapon:weapon_attack_type', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    calcRange();
  });

  // Weapon Attack Type
  on('sheet:opened change:repeating_weapon:weapon_attack_type', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['repeating_weapon_weapon_attack_type', 'repeating_weapon_weapon_attack_type_flag'], (v) => {
      const output = {};
      const currentType = +v.repeating_weapon_weapon_attack_type;
      const currentTypeFlag = +v.repeating_weapon_weapon_attack_type_flag;
      if (currentType !== currentTypeFlag) {
        output.repeating_weapon_weapon_attack_type_flag = currentType;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  });

  // HP Calcs
  calcHP = () => {
    // clog('HP re-calculated');
    getAttrs(
      ['hitpoints', 'hitpoints_max', 'sync_hp_flag', 'hitpoints_1_class', 'hitpoints_2_class', 'hitpoints_3_class', 'hitpoints_class_total', 'hp_quotient', 'hitpoints_total'],
      (v) => {
        const output = {};
        const syncHpFlag = +v.sync_hp_flag || 0;
        const hitPointsMax = +v.hitpoints_max || 0;
        const hitpoints_1_class = +v.hitpoints_1_class || 0;
        const hitpoints_2_class = +v.hitpoints_2_class || 0;
        const hitpoints_3_class = +v.hitpoints_3_class || 0;
        const class1 = hitpoints_1_class !== 0 ? 1 : 0;
        const class2 = hitpoints_2_class !== 0 ? 1 : 0;
        const class3 = hitpoints_3_class !== 0 ? 1 : 0;
        const numberOfClasses = int(class1 + class2 + class3) || 0;
        const totalClassHP = int(Math.max(0, hitpoints_1_class) + Math.max(0, hitpoints_2_class) + Math.max(0, hitpoints_3_class)) || 0;
        const totalHP = float(totalClassHP / numberOfClasses).toFixed(2);
        output.hitpoints_class_total = totalClassHP;
        output.hp_quotient = numberOfClasses;
        output.hitpoints_total = totalHP;
        output.hitpoints_max = syncHpFlag === 1 ? int(totalHP) : hitPointsMax;
        setAttrs(output, {
          silent: true,
        });
      }
    );
  };

  on('sheet:opened change:sync_hp_flag change:hitpoints change:hitpoints_1_class change:hitpoints_2_class change:hitpoints_3_class', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    calcHP();
  });

  // AC Calcs
  calcAC = () => {
    // clog('Armor re-calculated');
    getAttrs(
      [
        'armorclass',
        'armorclass_mod',
        'armorclass_magic',
        'armorbonus',
        'armorbonus_toggle',
        'armorbonus_inverted',
        'armortype_worn',
        'armortype2_worn',
        'armorshield_worn',
        'armorhelmet_worn',
        'armorother_worn',
        'armorother2_worn',
        'armorother3_worn',
        'armorother4_worn',
        'unarmored_base',
        'armortype_base',
        'armortype2_base',
        'armorshield_base',
        'armorother_base',
        'armorother2_base',
        'armorother3_base',
        'armorother4_base',
        'unarmored_ac',
        'armortype_ac',
        'armortype2_ac',
        'armorshield_ac',
        'armorhelmet_ac',
        'armorother_ac',
        'armorother2_ac',
        'armorother3_ac',
        'armorother4_ac',
        'armortype_magic',
        'armortype2_magic',
        'armorshield_magic',
        'armorhelmet_magic',
        'armorother_magic',
        'armorother2_magic',
        'armorother3_magic',
        'armorother4_magic',
        'armorshield_mod',
        'armorother_mod',
        'armorother2_mod',
        'armorother3_mod',
        'armorother4_mod',
        'armor_rating_flag',
        'sync_ac_flag',
      ],
      (v) => {
        const output = {};
        const armorClass = +v.armorclass || 0;
        const syncAcFlag = +v.sync_ac_flag || 0;
        const armorRatingFlag = +v.armor_rating_flag || 0;
        const armorShield_mod = +v.armorshield_mod * -1 || 0;
        const armorOther_mod = +v.armorother_mod * -1 || 0;
        const armorOther2_mod = +v.armorother2_mod * -1 || 0;
        const armorOther3_mod = +v.armorother3_mod * -1 || 0;
        const armorOther4_mod = +v.armorother4_mod * -1 || 0;
        const armorType_magic = +v.armortype_magic * -1 || 0;
        const armorType2_magic = +v.armortype2_magic * -1 || 0;
        const armorShield_magic = +v.armorshield_magic * -1 || 0;
        const armorHelmet_magic = +v.armorhelmet_magic * -1 || 0;
        const armorOther_magic = +v.armorother_magic * -1 || 0;
        const armorOther2_magic = +v.armorother2_magic * -1 || 0;
        const armorOther3_magic = +v.armorother3_magic * -1 || 0;
        const armorOther4_magic = +v.armorother4_magic * -1 || 0;
        const armorType_worn = +v.armortype_worn || 0;
        const armorType2_worn = +v.armortype2_worn || 0;
        const armorShield_worn = +v.armorshield_worn || 0;
        const armorHelmet_worn = +v.armorhelmet_worn || 0;
        const armorOther_worn = +v.armorother_worn || 0;
        const armorOther2_worn = +v.armorother2_worn || 0;
        const armorOther3_worn = +v.armorother3_worn || 0;
        const armorOther4_worn = +v.armorother4_worn || 0;
        const armorBonusToggle = +v.armorbonus_toggle || 0;
        const armorBonus = +v.armorbonus * armorBonusToggle || 0;
        const armorType_base = +v.armortype_base || 0;
        const armorType2_base = +v.armortype2_base || 0;
        const armorShield_base = +v.armorshield_base || 0;
        const armorOther_base = +v.armorother_base || 0;
        const armorOther2_base = +v.armorother2_base || 0;
        const armorOther3_base = +v.armorother3_base || 0;
        const armorOther4_base = +v.armorother4_base || 0;
        const armorType_ac = +v.armortype_ac || 0;
        const armorType2_ac = +v.armortype2_ac || 0;
        const armorShield_ac = +v.armorshield_ac || 0;
        const armorOther_ac = +v.armorother_ac || 0;
        const armorOther2_ac = +v.armorother2_ac || 0;
        const armorOther3_ac = +v.armorother3_ac || 0;
        const armorOther4_ac = +v.armorother4_ac || 0;
        const armorType_baseValue = armorType_worn === 0 ? 10 : armorType_base;
        const armorType2_baseValue = armorType2_worn === 0 ? 10 : armorType2_base;
        const armorShield_baseValue = armorShield_worn === 0 ? 0 : armorShield_base;
        const armorOther_baseValue = armorOther_worn === 0 ? 10 : armorOther_base;
        const armorOther2_baseValue = armorOther2_worn === 0 ? 10 : armorOther2_base;
        const armorOther3_baseValue = armorOther3_worn === 0 ? 10 : armorOther3_base;
        const armorOther4_baseValue = armorOther4_worn === 0 ? 10 : armorOther4_base;
        const unArmored_baseValue = +v.unarmored_base || 10;
        const armorType_acValue = armorType_worn === 0 ? 10 : armorType_ac;
        const armorType2_acValue = armorType2_worn === 0 ? 10 : armorType2_ac;
        const armorShield_acValue = armorShield_worn === 0 ? 0 : armorShield_ac;
        const armorOther_acValue = armorOther_worn === 0 ? 10 : armorOther_ac;
        const armorOther2_acValue = armorOther2_worn === 0 ? 10 : armorOther2_ac;
        const armorOther3_acValue = armorOther3_worn === 0 ? 10 : armorOther3_ac;
        const armorOther4_acValue = armorOther4_worn === 0 ? 10 : armorOther4_ac;
        const unArmored_acValue = +v.unarmored_ac || 0;
        const shieldModValue = armorShield_worn === 0 ? 0 : armorShield_mod;
        const shieldMagicValue = armorShield_worn === 0 ? 0 : armorShield_magic;
        const baseAR_best =
          Math.min(
            armorType_base + armorShield_base,
            armorType2_base + armorShield_base,
            armorShield_baseValue + 10,
            armorOther_base + armorShield_base,
            armorOther2_base + armorShield_base,
            armorOther3_base + armorShield_base,
            armorOther4_base + armorShield_base,
            unArmored_baseValue + armorShield_base
          ) || 0;
        const baseAC_best =
          Math.min(
            armorType_ac + armorShield_ac,
            armorType2_ac + armorShield_ac,
            armorShield_acValue + 10,
            armorOther_ac + armorShield_ac,
            armorOther2_ac + armorShield_ac,
            armorOther3_ac + armorShield_ac,
            armorOther4_ac + armorShield_ac,
            unArmored_acValue + armorShield_ac
          ) || 0;
        const baseAR =
          int(
            Math.min(
              armorType_baseValue + armorShield_baseValue,
              armorType2_baseValue + armorShield_baseValue,
              armorShield_baseValue + 10,
              armorOther_baseValue + armorShield_baseValue,
              armorOther2_baseValue + armorShield_baseValue,
              armorOther3_baseValue + armorShield_baseValue,
              armorOther4_baseValue + armorShield_baseValue,
              unArmored_baseValue + armorShield_baseValue
            )
          ) || 0;
        const baseAC =
          // Shield should not be included in baseAC
          int(
            Math.min(
              armorType_acValue,
              armorType2_acValue,
              // armorShield_acValue + 10,
              armorOther_acValue,
              armorOther2_acValue,
              armorOther3_acValue,
              armorOther4_acValue,
              unArmored_acValue
            )
          ) || 0;
        const armorMagicAC_total =
          int(armorType_magic + armorType2_magic + armorHelmet_magic + armorOther_magic + armorOther2_magic + armorOther3_magic + armorOther4_magic + armorShield_magic) || 0;
        const armorMagicAC =
          int(
            armorType_worn * armorType_magic +
              armorType2_worn * armorType2_magic +
              armorHelmet_worn * armorHelmet_magic +
              armorOther_worn * armorOther_magic +
              armorOther2_worn * armorOther2_magic +
              armorOther3_worn * armorOther3_magic +
              armorOther4_worn * armorOther4_magic
          ) || 0;
        const armorModAC_total = int(armorOther_mod + armorOther2_mod + armorOther3_mod + armorOther4_mod + armorShield_mod) || 0;
        const armorModAC = int(armorOther_worn * armorOther_mod + armorOther2_worn * armorOther2_mod + armorOther3_worn * armorOther3_mod + armorOther4_worn * armorOther4_mod) || 0;
        const combinedModMagic = armorModAC + armorMagicAC || 0;
        const rearAC = int(baseAC + armorModAC + armorMagicAC) || 0;
        const shieldlessAC = int(rearAC + armorBonus) || 0;
        const combinedShieldModMagic = int(armorShield_acValue + shieldModValue + shieldMagicValue) || 0;
        const totalAC = int(shieldlessAC + combinedShieldModMagic) || 0;
        // add a plus sign to result (n<=0?"":"+") + n
        const armorclass_magic_with_shield_add_sign = (-1 * (armorMagicAC + shieldMagicValue) <= 0 ? '' : '+') + -1 * (armorMagicAC + shieldMagicValue);
        const armorclass_magic_total_add_sign = (-1 * armorMagicAC_total <= 0 ? '' : '+') + -1 * armorMagicAC_total;
        const armorclass_mod_with_shield_add_sign = (-1 * (armorModAC + shieldModValue) <= 0 ? '' : '+') + -1 * (armorModAC + shieldModValue);
        const armorclass_mod_total_add_sign = (-1 * armorModAC_total <= 0 ? '' : '+') + -1 * armorModAC_total;
        const armorBonusInverted_add_sign = (-1 * armorBonus <= 0 ? '' : '+') + -1 * armorBonus;
        const armorclass_combined_mod_magic_add_sign = (-1 * combinedModMagic <= 0 ? '' : '+') + -1 * combinedModMagic;
        const combinedShieldModMagic_add_sign = (-1 * combinedShieldModMagic <= 0 ? '' : '+') + -1 * combinedShieldModMagic;
        output.armorclass_rating_used = baseAR;
        output.armorclass_rating = armorRatingFlag === 1 ? '-' : baseAR;
        output.unarmored_base = armorRatingFlag === 1 ? '-' : unArmored_baseValue;
        output.armorclass_rating_best = baseAR_best;
        output.armorclass_base_used = baseAC + armorShield_acValue;
        output.armorclass_base = baseAC;
        output.armorclass_base_best = baseAC_best;
        output.armorclass_magic = armorMagicAC;
        output.armorclass_magic_with_shield = armorclass_magic_with_shield_add_sign;
        output.armorclass_magic_total = armorclass_magic_total_add_sign;
        output.armorclass_mod = armorModAC;
        output.armorclass_mod_with_shield = armorclass_mod_with_shield_add_sign;
        output.armorclass_mod_total = armorclass_mod_total_add_sign;
        output.armorclass_combined_mod_magic = combinedModMagic;
        output.armorclass_combined_mod_magic_inverted = armorclass_combined_mod_magic_add_sign;
        output.armorclass_rear = rearAC;
        output.armorbonus_inverted = armorBonusInverted_add_sign;
        output.armorclass_shieldless = shieldlessAC;
        output.armorclass_shield_magic = shieldMagicValue;
        output.armorclass_shield_mod = shieldModValue;
        output.armorclass_combined_shield_mod_magic = combinedShieldModMagic;
        output.armorclass_combined_shield_mod_magic_inverted = combinedShieldModMagic_add_sign;
        output.armorclass_total = totalAC;
        output.armorclass = syncAcFlag === 1 ? totalAC : armorClass;
        setAttrs(output, {
          silent: true,
        });
      }
    );
  };

  on(
    'sheet:opened change:sync_ac_flag change:autocalc_ac change:armorclass_mod change:armorclass_magic change:armorbonus change:armorbonus_toggle change:armortype_worn change:armortype2_worn change:armorshield_worn change:armorhelmet_worn change:armorother_worn change:armorother2_worn change:armorother3_worn change:armorother4_worn change:armortype_base change:armortype2_base change:armorshield_base change:armorother_base change:armorother2_base change:armorother3_base change:armorother4_base change:unarmored_base change:armortype_ac change:armortype2_ac change:armorshield_ac change:armorhelmet_ac change:armorother_ac change:armorother2_ac change:armorother3_ac change:armorother4_ac change:unarmored_ac change:armorshield_mod change:armorother_mod change:armorother2_mod change:armorother3_mod change:armorother4_mod change:armortype_magic change:armortype2_magic change:armorshield_magic change:armorhelmet_magic change:armorother_magic change:armorother2_magic change:armorother3_magic change:armorother4_magic change:armor_rating_flag',
    (eventInfo) => {
      clog(`Change Detected:${eventInfo.sourceAttribute}`);
      // clog('AC change detected');
      getAttrs(['autocalc_ac'], (v) => {
        const autoCalcAcFlag = +v.autocalc_ac || 0;
        if (autoCalcAcFlag === 1) {
          calcAC();
        }
        if (autoCalcAcFlag === 0) {
          // clog(`Sheet is not set to Auto-Calc AC. autocalc_ac:${autoCalcAcFlag}`);
        }
      });
    }
  );

  on('clicked:calcac', (eventInfo) => {
    clog(`Change Detected:${eventInfo.sourceAttribute}`);
    calcAC();
  });

  // Chat Menu Buttons - Damage Rolls
  on(
    'sheet:opened change:repeating_weapon:weapon_damagesmallmedium change:repeating_weapon:weapon_damagelarge change:repeating_weapon:weapon_critdamagesmallmedium change:repeating_weapon:weapon_critdamagelarge change:repeating_weapon:weapon_attackdmgbonus change:toggle_critdamage',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      getSectionIDs('repeating_weapon', (idArray) => {
        const output = {};
        idArray.forEach((id) => {
          output[`repeating_weapon_${id}_weapon_damagesmallmedium_chat_menu`] = `[Roll Damage](~@{character_id}|repeating_weapon_${id}_weapon_damagesmallmedium_roll)`;
          output[`repeating_weapon_${id}_weapon_damagelarge_chat_menu`] = `[Roll Damage vs LG](~@{character_id}|repeating_weapon_${id}_weapon_damagelarge_roll)`;
          output[`repeating_weapon_${id}_weapon_damagesmallmedium_npc_chat_menu`] = `[Damage](~@{character_id}|repeating_weapon_${id}_weapon_damagesmallmedium_npc_roll)`;
          output[`repeating_weapon_${id}_weapon_damagelarge_npc_chat_menu`] = `[Damage vs LG](~@{character_id}|repeating_weapon_${id}_weapon_damagelarge_npc_roll)`;
          output[`repeating_weapon_${id}_weapon_critdamagesmallmedium_chat_menu`] = `[Roll Damage](~@{character_id}|repeating_weapon_${id}_weapon_critdamagesmallmedium_roll)`;
          output[`repeating_weapon_${id}_weapon_critdamagelarge_chat_menu`] = `[Roll Damage vs LG](~@{character_id}|repeating_weapon_${id}_weapon_critdamagelarge_roll)`;
          output[`repeating_weapon_${id}_weapon_critdamagesmallmedium_npc_chat_menu`] = `[Damage](~@{character_id}|repeating_weapon_${id}_weapon_critdamagesmallmedium_npc_roll)`;
          output[`repeating_weapon_${id}_weapon_critdamagelarge_npc_chat_menu`] = `[Damage vs LG](~@{character_id}|repeating_weapon_${id}_weapon_critdamagelarge_npc_roll)`;
        });
        setAttrs(output, {
          silent: true,
        });
      });
    }
  );

  // Set repeating_weapon Defaults
  // beneficial for API access to the repeating attributes
  on('change:repeating_weapon:weapon_name', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    const output = {};
    // test for API creating the repeating row
    if (eventInfo.sourceType !== 'player') {
      // clog(`The ${eventInfo.sourceType} is creating a new repeating attack.`);
      return;
    }
    if (eventInfo.newValue === eventInfo.previousValue) {
      // clog(`The ${eventInfo.sourceType} is creating a new repeating attack.`);
      output.repeating_weapon_weapon_attack_type = 0;
      output.repeating_weapon_weapon_dual = '';
      output.repeating_weapon_weapon_range_small = 1;
      output.repeating_weapon_weapon_range_medium = 3;
      output.repeating_weapon_weapon_whisper_to_hit =
        '\n/w gm &{template:attacks-table} {{color=@{color_option}}} {{ToHitAC-10to0=ToHit:[[ @{thac-10} ]]|[[ @{thac-9} ]]|[[ @{thac-8} ]]|[[ @{thac-7} ]]|[[ @{thac-6} ]]|[[ @{thac-5} ]]|[[ @{thac-4} ]]|[[ @{thac-3} ]]|[[ @{thac-2} ]]|[[ @{thac-1} ]]|[[ @{thac0} ]]}} {{ToHitAC1to10=ToHit:[[ @{thac0} ]]|[[ @{thac1} ]]|[[ @{thac2} ]]|[[ @{thac3} ]]|[[ @{thac4} ]]|[[ @{thac5} ]]|[[ @{thac6} ]]|[[ @{thac7} ]]|[[ @{thac8} ]]|[[ @{thac9} ]]|[[ @{thac10} ]] }}';
      output.repeating_weapon_weapon_whisper_to_hit_select = 0;
      output.repeating_weapon_weapon_dual_pen = 0;
      output.repeating_weapon_weapon_backstab_var = 0;
      output.repeating_weapon_weapon_tohitbonus = 0;
      output.repeating_weapon_weapon_magicbonus = 0;
      output.repeating_weapon_weapon_prof = 0;
      output.repeating_weapon_weapon_backstab = 1;
      output.repeating_weapon_weapon_backstab_bonus = 0;
      output.repeating_weapon_weapon_backstab_mult = 1;
      output.repeating_weapon_weapon_attackdmgbonus = 0;
      output.repeating_weapon_weapon_num_attacks = 1;
      output.repeating_weapon_weapon_quantity = 1;
      output.repeating_weapon_weapon_ammo = 0;
      output.repeating_weapon_weapon_ammo_max = 0;
      output.repeating_weapon_weapon_weight = 0;
      output.repeating_weapon_weapon_cost = 0;
      output.repeating_weapon_weapon_range_small = 1;
      output.repeating_weapon_weapon_range_medium = 2;
      output.repeating_weapon_weapon_range_long = 3;
      output.repeating_weapon_weapon_length = '';
      output.repeating_weapon_weapon_space = '';
      output.repeating_weapon_weapon_speed = '';
      output.repeating_weapon_weapon_thac_adj0 = 0;
      output.repeating_weapon_weapon_thac_adj1 = 0;
      output.repeating_weapon_weapon_thac_adj2 = 0;
      output.repeating_weapon_weapon_thac_adj3 = 0;
      output.repeating_weapon_weapon_thac_adj4 = 0;
      output.repeating_weapon_weapon_thac_adj5 = 0;
      output.repeating_weapon_weapon_thac_adj6 = 0;
      output.repeating_weapon_weapon_thac_adj7 = 0;
      output.repeating_weapon_weapon_thac_adj8 = 0;
      output.repeating_weapon_weapon_thac_adj9 = 0;
      output.repeating_weapon_weapon_thac_adj10 = 0;
      output.repeating_weapon_weapon_notes = '';
      output.repeating_weapon_weapon_macro_text =
        '&{template:attacks} {{color=@{color_option}}} {{name=@{character_name}}} {{subtag=@{weapon_name}}} {{dual=@{weapon_dual}}} {{attack1=[[ 1d20 + ( @{weapon_backstab_bonus}[BACKSTAB] ) + ( @{weapon_tohitbonus}[HIT_BON] ) + ( @{weapon_prof_pen}[PROF_PEN] ) + ( @{weapon_dual_pen}[DUAL_PEN] ) + ( @{weapon_magicbonus}[MAG_BON] ) + ( ?{To Hit Modifier?|0}[MISC_MOD] ) ]]}} {{damagevsSMchatmenu=@{weapon_damagesmallmedium_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_chat_menu}}} {{WeaponNotes=@{weapon_notes}}} {{backstab=[[ @{weapon_backstab_mult} ]]}} {{damagetype=@{weapon_attackdmgtype}}} {{rate=@{weapon_rateoffire}}} {{range=@{weapon_range}}} {{length=@{weapon_length}}} {{space=@{weapon_space}}} {{speed=@{weapon_speed}}} {{ammo=[[ @{weapon_ammo} ]]/[[ @{weapon_ammo|max} ]]}} {{crit=[[ @{toggle_critdamage} ]]}} @{weapon_tohitacadj}';
      output.weapon_damage_chat_menu_npc =
        '{{damagevsSMchatmenu=@{weapon_damagesmallmedium_npc_chat_menu}}} {{damagevsLchatmenu=@{weapon_damagelarge_npc_chat_menu}}} {{critdamagevsSMchatmenu=@{weapon_critdamagesmallmedium_npc_chat_menu}}} {{critdamagevsLchatmenu=@{weapon_critdamagelarge_npc_chat_menu}}}';
      output.repeating_weapon_weapon_damagesmallmedium_chat_menu = '[Roll Damage](~@{character_id}|repeating_weapon_weapon_damagesmallmedium_roll)';
      output.repeating_weapon_weapon_damagelarge_chat_menu = '[Roll Damage vs LG](~@{character_id}|repeating_weapon_weapon_damagelarge_roll)';
      output.repeating_weapon_weapon_damagesmallmedium_npc_chat_menu = '[Damage](~@{character_id}|repeating_weapon_weapon_damagesmallmedium_npc_roll)';
      output.repeating_weapon_weapon_damagelarge_npc_chat_menu = '[Damage vs LG](~@{character_id}|repeating_weapon_weapon_damagelarge_npc_roll)';
      output.repeating_weapon_weapon_critdamagesmallmedium_chat_menu = '[Roll Damage](~@{character_id}|repeating_weapon_weapon_critdamagesmallmedium_roll)';
      output.repeating_weapon_weapon_critdamagelarge_chat_menu = '[Roll Damage vs LG](~@{character_id}|repeating_weapon_weapon_critdamagelarge_roll)';
      output.repeating_weapon_weapon_critdamagesmallmedium_npc_chat_menu = '[Damage](~@{character_id}|repeating_weapon_weapon_critdamagesmallmedium_npc_roll)';
      output.repeating_weapon_weapon_critdamagelarge_npc_chat_menu = '[Damage vs LG](~@{character_id}|repeating_weapon_weapon_critdamagelarge_npc_roll)';
      setAttrs(output, {
        silent: true,
      });
    }
  });

  // Auto-generates a repeating row as a placeholder
  on('sheet:opened', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    getSectionIDs('repeating_weapon', (weaponID) => {
      getSectionIDs('repeating_ability', (abilityID) => {
        getSectionIDs('repeating_nonweaponproficiencies', (nwpID) => {
          getSectionIDs('repeating_equipment', (equipmentID) => {
            getSectionIDs('repeating_spells', (spellsID) => {
              const output = {};
              const weaponRows = weaponID.length;
              const abilityRows = abilityID.length;
              const nwpRows = nwpID.length;
              const equipmentRows = equipmentID.length;
              const spellsRows = spellsID.length;
              if (weaponRows === 0) {
                const newrowid = generateRowID();
                output[`repeating_weapon_${newrowid}_weapon_value`] = 1;
              }
              if (abilityRows === 0) {
                const newrowid = generateRowID();
                output[`repeating_ability_${newrowid}_ability_value`] = 1;
              }
              if (nwpRows === 0) {
                const newrowid = generateRowID();
                output[`repeating_nonweaponproficiencies_${newrowid}_nwp_value`] = 1;
              }
              if (equipmentRows === 0) {
                const newrowid = generateRowID();
                output[`repeating_equipment_${newrowid}_equipment_value`] = 1;
              }
              if (spellsRows === 0) {
                const newrowid = generateRowID();
                output[`repeating_spells_${newrowid}_spell_value`] = 1;
              } else {
                return;
              }
              setAttrs(output, {
                silent: true,
              });
            });
          });
        });
      });
    });
  });

  // Reset Macros to default
  on('clicked:resetmacros', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    // clog('reset macros detected');
    getSectionIDs('repeating_equipment', (idequipment) => {
      getSectionIDs('repeating_weapon', (idweapons) => {
        getSectionIDs('repeating_ability', (idabilities) => {
          getSectionIDs('repeating_nonweaponproficiencies', (idnwps) => {
            getSectionIDs('repeating_spells', (idspells) => {
              const output = {};
              const attrsEquipment = [];
              const attrsAttackspecial = [];
              const attrsAttack = [];
              const attrsWeapon = [];
              const attrsAbility = [];
              const attrsNWP = [];
              const attrsSpells = [];
              _.each(idequipment, (itemid) => {
                attrsEquipment.push(`repeating_equipment_${itemid}_equipment_macro_text`);
              });
              _.each(idweapons, (itemid) => {
                attrsWeapon.push(`repeating_weapon_${itemid}_weapon_macro_text`);
              });
              _.each(idabilities, (itemid) => {
                attrsAbility.push(`repeating_ability_${itemid}_ability_macro_text`);
              });
              _.each(idnwps, (itemid) => {
                attrsNWP.push(`repeating_nonweaponproficiencies_${itemid}_nwp_macro_text`);
              });
              _.each(idspells, (itemid) => {
                attrsSpells.push(`repeating_spells_${itemid}_spell_macro_text`);
              });
              getAttrs(
                ['surprise_macro_text', 'init_macro_text', ...attrsEquipment, ...attrsAttackspecial, ...attrsAttack, ...attrsWeapon, ...attrsAbility, ...attrsNWP, ...attrsSpells],
                (v) => {
                  if (v.surprise_macro_text) {
                    output.surprise_macro_text = '';
                    // clog(`macro reset completed on: surprise`);
                  }
                  if (v.init_macro_text) {
                    output.init_macro_text = '';
                    // clog(`macro reset completed on: initiative`);
                  }
                  _.each(idequipment, (id) => {
                    if (v[`repeating_equipment_${id}_equipment_macro_text`]) {
                      output[`repeating_equipment_${id}_equipment_macro_text`] = '';
                      // clog(`macro reset completed on: ${attrsEquipment}`);
                    }
                  });
                  _.each(idweapons, (id) => {
                    if (v[`repeating_weapon_${id}_weapon_macro_text`]) {
                      output[`repeating_weapon_${id}_weapon_macro_text`] = '';
                      // clog(`macro reset completed on: ${attrsWeapon}`);
                    }
                  });
                  _.each(idabilities, (id) => {
                    if (v[`repeating_ability_${id}_ability_macro_text`]) {
                      output[`repeating_ability_${id}_ability_macro_text`] = '';
                      // clog(`macro reset completed on: ${attrsAbility}`);
                    }
                  });
                  _.each(idnwps, (id) => {
                    if (v[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`]) {
                      output[`repeating_nonweaponproficiencies_${id}_nwp_macro_text`] = '';
                      // clog(`macro reset completed on: ${attrsNWP}`);
                    }
                  });
                  _.each(idspells, (id) => {
                    if (v[`repeating_spells_${id}_spell_macro_text`]) {
                      output[`repeating_spells_${id}_spell_macro_text`] = '';
                      // clog(`macro reset completed on: ${attrsSpells}`);
                    }
                  });
                  setAttrs(output, {
                    silent: true,
                  });
                }
              );
            });
          });
        });
      });
    });
  });

  // Thief Calcs
  function pickpocketsCalc() {
    getAttrs(['pickpockets', 'pickpockets_base', 'pickpockets_racial_mod', 'pickpockets_ability_mod', 'pickpockets_magic'], (v) => {
      const output = {};
      const basePickpockets = +v.pickpockets_base || 0;
      const racialPickpockets = +v.pickpockets_racial_mod || 0;
      const abilityPickpockets = +v.pickpockets_ability_mod || 0;
      const magicPickpockets = +v.pickpockets_magic || 0;
      const oldSkill = +v.pickpockets || 0;
      const newSkill = Math.max(0, Math.min(100, int(basePickpockets + racialPickpockets + abilityPickpockets + magicPickpockets) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.pickpockets_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.pickpockets = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.pickpockets = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.pickpockets = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function openlocksCalc() {
    getAttrs(['openlocks', 'openlocks_base', 'openlocks_racial_mod', 'openlocks_ability_mod', 'openlocks_magic'], (v) => {
      const output = {};
      const baseOpenlocks = +v.openlocks_base || 0;
      const racialOpenlocks = +v.openlocks_racial_mod || 0;
      const abilityOpenlocks = +v.openlocks_ability_mod || 0;
      const magicOpenlocks = +v.openlocks_magic || 0;
      const oldSkill = +v.openlocks || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseOpenlocks + racialOpenlocks + abilityOpenlocks + magicOpenlocks) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.openlocks_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.openlocks = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.openlocks = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.openlocks = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function findtrapsCalc() {
    getAttrs(['findtraps', 'findtraps_base', 'findtraps_racial_mod', 'findtraps_ability_mod', 'findtraps_magic'], (v) => {
      const output = {};
      const baseFindtraps = +v.findtraps_base || 0;
      const racialFindtraps = +v.findtraps_racial_mod || 0;
      const abilityFindtraps = +v.findtraps_ability_mod || 0;
      const magicFindtraps = +v.findtraps_magic || 0;
      const oldSkill = +v.findtraps || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseFindtraps + racialFindtraps + abilityFindtraps + magicFindtraps) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.findtraps_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.findtraps = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.findtraps = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.findtraps = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function movequietlyCalc() {
    getAttrs(['movequietly', 'movequietly_base', 'movequietly_racial_mod', 'movequietly_ability_mod', 'movequietly_magic'], (v) => {
      const output = {};
      const baseMovequietly = +v.movequietly_base || 0;
      const racialMovequietly = +v.movequietly_racial_mod || 0;
      const abilityMovequietly = +v.movequietly_ability_mod || 0;
      const magicMovequietly = +v.movequietly_magic || 0;
      const oldSkill = +v.movequietly || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseMovequietly + racialMovequietly + abilityMovequietly + magicMovequietly) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.movequietly_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.movequietly = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.movequietly = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.movequietly = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function hideinshadowsCalc() {
    getAttrs(['hideinshadows', 'hideinshadows_base', 'hideinshadows_racial_mod', 'hideinshadows_ability_mod', 'hideinshadows_magic'], (v) => {
      const output = {};
      const baseHideinshadows = +v.hideinshadows_base || 0;
      const racialHideinshadows = +v.hideinshadows_racial_mod || 0;
      const abilityHideinshadows = +v.hideinshadows_ability_mod || 0;
      const magicHideinshadows = +v.hideinshadows_magic || 0;
      const oldSkill = +v.hideinshadows || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseHideinshadows + racialHideinshadows + abilityHideinshadows + magicHideinshadows) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.hideinshadows_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.hideinshadows = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.hideinshadows = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.hideinshadows = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function hearnoiseCalc() {
    getAttrs(['hearnoise', 'hearnoise_base', 'hearnoise_racial_mod', 'hearnoise_ability_mod', 'hearnoise_magic'], (v) => {
      const output = {};
      const baseHearnoise = +v.hearnoise_base || 0;
      const racialHearnoise = +v.hearnoise_racial_mod || 0;
      const abilityHearnoise = +v.hearnoise_ability_mod || 0;
      const magicHearnoise = +v.hearnoise_magic || 0;
      const oldSkill = +v.hearnoise || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseHearnoise + racialHearnoise + abilityHearnoise + magicHearnoise) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.hearnoise_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.hearnoise = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.hearnoise = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.hearnoise = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function climbwallsCalc() {
    getAttrs(['climbwalls', 'climbwalls_base', 'climbwalls_racial_mod', 'climbwalls_ability_mod', 'climbwalls_magic'], (v) => {
      const output = {};
      const baseClimbwalls = +v.climbwalls_base || 0;
      const racialClimbwalls = +v.climbwalls_racial_mod || 0;
      const abilityClimbwalls = +v.climbwalls_ability_mod || 0;
      const magicClimbwalls = +v.climbwalls_magic || 0;
      const oldSkill = +v.climbwalls || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseClimbwalls + racialClimbwalls + abilityClimbwalls + magicClimbwalls) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.climbwalls_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.climbwalls = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.climbwalls = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.climbwalls = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function readlanguagesCalc() {
    getAttrs(['readlanguages', 'readlanguages_base', 'readlanguages_racial_mod', 'readlanguages_ability_mod', 'readlanguages_magic'], (v) => {
      const output = {};
      const baseReadlanguages = +v.readlanguages_base || 0;
      const racialReadlanguages = +v.readlanguages_racial_mod || 0;
      const abilityReadlanguages = +v.readlanguages_ability_mod || 0;
      const magicReadlanguages = +v.readlanguages_magic || 0;
      const oldSkill = +v.readlanguages || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseReadlanguages + racialReadlanguages + abilityReadlanguages + magicReadlanguages) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.readlanguages_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.readlanguages = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.readlanguages = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.readlanguages = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function thiefmiscCalc() {
    getAttrs(['thiefmisc', 'thiefmisc_base', 'thiefmisc_racial_mod', 'thiefmisc_ability_mod', 'thiefmisc_magic'], (v) => {
      const output = {};
      const baseThiefmisc = +v.thiefmisc_base || 0;
      const racialThiefmisc = +v.thiefmisc_racial_mod || 0;
      const abilityThiefmisc = +v.thiefmisc_ability_mod || 0;
      const magicThiefmisc = +v.thiefmisc_magic || 0;
      const oldSkill = +v.thiefmisc || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseThiefmisc + racialThiefmisc + abilityThiefmisc + magicThiefmisc) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.thiefmisc_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.thiefmisc = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.thiefmisc = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.thiefmisc = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function thiefmisc1Calc() {
    getAttrs(['thiefmisc1', 'thiefmisc1_base', 'thiefmisc1_racial_mod', 'thiefmisc1_ability_mod', 'thiefmisc1_magic'], (v) => {
      const output = {};
      const baseThiefmisc1 = +v.thiefmisc1_base || 0;
      const racialThiefmisc1 = +v.thiefmisc1_racial_mod || 0;
      const abilityThiefmisc1 = +v.thiefmisc1_ability_mod || 0;
      const magicThiefmisc1 = +v.thiefmisc1_magic || 0;
      const oldSkill = +v.thiefmisc1 || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseThiefmisc1 + racialThiefmisc1 + abilityThiefmisc1 + magicThiefmisc1) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.thiefmisc1_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.thiefmisc1 = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.thiefmisc1 = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.thiefmisc1 = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function thiefmisc2Calc() {
    getAttrs(['thiefmisc2', 'thiefmisc2_base', 'thiefmisc2_racial_mod', 'thiefmisc2_ability_mod', 'thiefmisc2_magic'], (v) => {
      const output = {};
      const baseThiefmisc2 = +v.thiefmisc2_base || 0;
      const racialThiefmisc2 = +v.thiefmisc2_racial_mod || 0;
      const abilityThiefmisc2 = +v.thiefmisc2_ability_mod || 0;
      const magicThiefmisc2 = +v.thiefmisc2_magic || 0;
      const oldSkill = +v.thiefmisc2 || 0;
      const newSkill = Math.max(0, Math.min(100, int(baseThiefmisc2 + racialThiefmisc2 + abilityThiefmisc2 + magicThiefmisc2) || 0));
      // clog(`oldThiefSkill: ${oldSkill} newThiefSkill: ${newSkill}`);
      if (oldSkill !== 0 && newSkill === 0) {
        output.thiefmisc2_base = oldSkill;
        // clog('Old Thief Skill copied to Base column');
      }
      if (oldSkill !== 0 && newSkill !== 0) {
        output.thiefmisc2 = newSkill;
      }
      if (oldSkill === 0 && newSkill === 0) {
        output.thiefmisc2 = newSkill;
      }
      if (oldSkill === 0 && newSkill !== 0) {
        output.thiefmisc2 = newSkill;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  // One-time update: Auto Calc Thief rows
  autoCalcThiefRows = (current_version, final_version) => {
    const output = {};
    pickpocketsCalc();
    openlocksCalc();
    findtrapsCalc();
    movequietlyCalc();
    hideinshadowsCalc();
    hearnoiseCalc();
    climbwallsCalc();
    readlanguagesCalc();
    thiefmiscCalc();
    thiefmisc1Calc();
    thiefmisc2Calc();
    output.sheet_version = current_version;
    clog(`VERSION UPDATE: autoCalcThiefRows completed`);
    setAttrs(
      output,
      {
        silent: true,
      },
      versionator(current_version, final_version)
    );
  };

  on('change:pickpockets_base change:pickpockets_racial_mod change:pickpockets_ability_mod change:pickpockets_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    pickpocketsCalc();
  });
  on('change:openlocks_base change:openlocks_racial_mod change:openlocks_ability_mod change:openlocks_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    openlocksCalc();
  });
  on('change:findtraps_base change:findtraps_racial_mod change:findtraps_ability_mod change:findtraps_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    findtrapsCalc();
  });
  on('change:movequietly_base change:movequietly_racial_mod change:movequietly_ability_mod change:movequietly_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    movequietlyCalc();
  });
  on('change:hideinshadows_base change:hideinshadows_racial_mod change:hideinshadows_ability_mod change:hideinshadows_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    hideinshadowsCalc();
  });
  on('change:hearnoise_base change:hearnoise_racial_mod change:hearnoise_ability_mod change:hearnoise_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    hearnoiseCalc();
  });
  on('change:climbwalls_base change:climbwalls_racial_mod change:climbwalls_ability_mod change:climbwalls_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    climbwallsCalc();
  });
  on('change:readlanguages_base change:readlanguages_racial_mod change:readlanguages_ability_mod change:readlanguages_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    readlanguagesCalc();
  });
  on('change:thiefmisc_base change:thiefmisc_racial_mod change:thiefmisc_ability_mod change:thiefmisc_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    thiefmiscCalc();
  });
  on('change:thiefmisc1_base change:thiefmisc1_racial_mod change:thiefmisc1_ability_mod change:thiefmisc1_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    thiefmisc1Calc();
  });
  on('change:thiefmisc2_base change:thiefmisc2_racial_mod change:thiefmisc2_ability_mod change:thiefmisc2_magic', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    thiefmisc2Calc();
  });

  // Save Calcs
  function saveparalysispoisondeathCalc() {
    getAttrs(
      [
        'saveparalysispoisondeath',
        'saveparalysispoisondeath_base',
        'saveparalysispoisondeath_racial_mod',
        'saveparalysispoisondeath_ability_mod',
        'saveparalysispoisondeath_misc_mod',
        'saveparalysispoisondeath_temp_mod',
      ],
      (v) => {
        const output = {};
        const baseSaveparalysispoisondeath = +v.saveparalysispoisondeath_base || 0;
        const racialSaveparalysispoisondeath = +v.saveparalysispoisondeath_racial_mod || 0;
        const abilitySaveparalysispoisondeath = +v.saveparalysispoisondeath_ability_mod || 0;
        const miscSaveparalysispoisondeath = +v.saveparalysispoisondeath_misc_mod || 0;
        const tempSaveparalysispoisondeath = +v.saveparalysispoisondeath_temp_mod || 0;
        const oldSave = +v.saveparalysispoisondeath || 0;
        const newSave =
          int(baseSaveparalysispoisondeath + racialSaveparalysispoisondeath + abilitySaveparalysispoisondeath + miscSaveparalysispoisondeath + tempSaveparalysispoisondeath) || 0;
        // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
        if (oldSave !== 20 && newSave === 20) {
          output.saveparalysispoisondeath_base = oldSave;
          // clog('Old Save copied to Base/Class column');
        }
        if (oldSave !== 20 && newSave !== 20) {
          output.saveparalysispoisondeath = newSave;
        }
        if (oldSave === 20 && newSave === 20) {
          output.saveparalysispoisondeath = newSave;
        }
        if (oldSave === 20 && newSave !== 20) {
          output.saveparalysispoisondeath = newSave;
        }
        setAttrs(output, {
          silent: true,
        });
      }
    );
  }

  function savepetrificationpolymorphCalc() {
    getAttrs(
      [
        'savepetrificationpolymorph',
        'savepetrificationpolymorph_base',
        'savepetrificationpolymorph_racial_mod',
        'savepetrificationpolymorph_ability_mod',
        'savepetrificationpolymorph_misc_mod',
        'savepetrificationpolymorph_temp_mod',
      ],
      (v) => {
        const output = {};
        const baseSavepetrificationpolymorph = +v.savepetrificationpolymorph_base || 0;
        const racialSavepetrificationpolymorph = +v.savepetrificationpolymorph_racial_mod || 0;
        const abilitySavepetrificationpolymorph = +v.savepetrificationpolymorph_ability_mod || 0;
        const miscSavepetrificationpolymorph = +v.savepetrificationpolymorph_misc_mod || 0;
        const tempSavepetrificationpolymorph = +v.savepetrificationpolymorph_temp_mod || 0;
        const oldSave = +v.savepetrificationpolymorph || 0;
        const newSave =
          int(
            baseSavepetrificationpolymorph + racialSavepetrificationpolymorph + abilitySavepetrificationpolymorph + miscSavepetrificationpolymorph + tempSavepetrificationpolymorph
          ) || 0;
        // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
        if (oldSave !== 20 && newSave === 20) {
          output.savepetrificationpolymorph_base = oldSave;
          // clog('Old Save copied to Base/Class column');
        }
        if (oldSave !== 20 && newSave !== 20) {
          output.savepetrificationpolymorph = newSave;
        }
        if (oldSave === 20 && newSave === 20) {
          output.savepetrificationpolymorph = newSave;
        }
        if (oldSave === 20 && newSave !== 20) {
          output.savepetrificationpolymorph = newSave;
        }
        setAttrs(output, {
          silent: true,
        });
      }
    );
  }

  function saverodsstaveswandsCalc() {
    getAttrs(
      [
        'saverodsstaveswands',
        'saverodsstaveswands_base',
        'saverodsstaveswands_racial_mod',
        'saverodsstaveswands_ability_mod',
        'saverodsstaveswands_misc_mod',
        'saverodsstaveswands_temp_mod',
      ],
      (v) => {
        const output = {};
        const baseSaverodsstaveswands = +v.saverodsstaveswands_base || 0;
        const racialSaverodsstaveswands = +v.saverodsstaveswands_racial_mod || 0;
        const abilitySaverodsstaveswands = +v.saverodsstaveswands_ability_mod || 0;
        const miscSaverodsstaveswands = +v.saverodsstaveswands_misc_mod || 0;
        const tempSaverodsstaveswands = +v.saverodsstaveswands_temp_mod || 0;
        const oldSave = +v.saverodsstaveswands || 0;
        const newSave = int(baseSaverodsstaveswands + racialSaverodsstaveswands + abilitySaverodsstaveswands + miscSaverodsstaveswands + tempSaverodsstaveswands) || 0;
        // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
        if (oldSave !== 20 && newSave === 20) {
          output.saverodsstaveswands_base = oldSave;
          // clog('Old Save copied to Base/Class column');
        }
        if (oldSave !== 20 && newSave !== 20) {
          output.saverodsstaveswands = newSave;
        }
        if (oldSave === 20 && newSave === 20) {
          output.saverodsstaveswands = newSave;
        }
        if (oldSave === 20 && newSave !== 20) {
          output.saverodsstaveswands = newSave;
        }
        setAttrs(output, {
          silent: true,
        });
      }
    );
  }

  function savebreathweaponsCalc() {
    getAttrs(
      ['savebreathweapons', 'savebreathweapons_base', 'savebreathweapons_racial_mod', 'savebreathweapons_ability_mod', 'savebreathweapons_misc_mod', 'savebreathweapons_temp_mod'],
      (v) => {
        const output = {};
        const baseSavebreathweapons = +v.savebreathweapons_base || 0;
        const racialSavebreathweapons = +v.savebreathweapons_racial_mod || 0;
        const abilitySavebreathweapons = +v.savebreathweapons_ability_mod || 0;
        const miscSavebreathweapons = +v.savebreathweapons_misc_mod || 0;
        const tempSavebreathweapons = +v.savebreathweapons_temp_mod || 0;
        const oldSave = +v.savebreathweapons || 0;
        const newSave = int(baseSavebreathweapons + racialSavebreathweapons + abilitySavebreathweapons + miscSavebreathweapons + tempSavebreathweapons) || 0;
        // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
        if (oldSave !== 20 && newSave === 20) {
          output.savebreathweapons_base = oldSave;
          // clog('Old Save copied to Base/Class column');
        }
        if (oldSave !== 20 && newSave !== 20) {
          output.savebreathweapons = newSave;
        }
        if (oldSave === 20 && newSave === 20) {
          output.savebreathweapons = newSave;
        }
        if (oldSave === 20 && newSave !== 20) {
          output.savebreathweapons = newSave;
        }
        setAttrs(output, {
          silent: true,
        });
      }
    );
  }

  function savespellsCalc() {
    getAttrs(['savespells', 'savespells_base', 'savespells_racial_mod', 'savespells_ability_mod', 'savespells_misc_mod', 'savespells_temp_mod'], (v) => {
      const output = {};
      const baseSavespells = +v.savespells_base || 0;
      const racialSavespells = +v.savespells_racial_mod || 0;
      const abilitySavespells = +v.savespells_ability_mod || 0;
      const miscSavespells = +v.savespells_misc_mod || 0;
      const tempSavespells = +v.savespells_temp_mod || 0;
      const oldSave = +v.savespells || 0;
      const newSave = int(baseSavespells + racialSavespells + abilitySavespells + miscSavespells + tempSavespells) || 0;
      // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
      if (oldSave !== 20 && newSave === 20) {
        output.savespells_base = oldSave;
        // clog('Old Save copied to Base/Class column');
      }
      if (oldSave !== 20 && newSave !== 20) {
        output.savespells = newSave;
      }
      if (oldSave === 20 && newSave === 20) {
        output.savespells = newSave;
      }
      if (oldSave === 20 && newSave !== 20) {
        output.savespells = newSave;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function savemiscCalc() {
    getAttrs(['savemisc', 'savemisc_base', 'savemisc_racial_mod', 'savemisc_ability_mod', 'savemisc_misc_mod', 'savemisc_temp_mod'], (v) => {
      const output = {};
      const baseSavemisc = +v.savemisc_base || 0;
      const racialSavemisc = +v.savemisc_racial_mod || 0;
      const abilitySavemisc = +v.savemisc_ability_mod || 0;
      const miscSavemisc = +v.savemisc_misc_mod || 0;
      const tempSavemisc = +v.savemisc_temp_mod || 0;
      output.savemisc = int(baseSavemisc + racialSavemisc + abilitySavemisc + miscSavemisc + tempSavemisc) || 0;
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function savemisc1Calc() {
    getAttrs(['savemisc1', 'savemisc1_base', 'savemisc1_racial_mod', 'savemisc1_ability_mod', 'savemisc1_misc_mod', 'savemisc1_temp_mod'], (v) => {
      const output = {};
      const baseSavemisc1 = +v.savemisc1_base || 0;
      const racialSavemisc1 = +v.savemisc1_racial_mod || 0;
      const abilitySavemisc1 = +v.savemisc1_ability_mod || 0;
      const miscSavemisc1 = +v.savemisc1_misc_mod || 0;
      const tempSavemisc1 = +v.savemisc1_temp_mod || 0;
      const oldSave = +v.savemisc1 || 0;
      const newSave = int(baseSavemisc1 + racialSavemisc1 + abilitySavemisc1 + miscSavemisc1 + tempSavemisc1) || 0;
      // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
      if (oldSave !== 20 && newSave === 20) {
        output.savemisc1_base = oldSave;
        // clog('Old Save copied to Base/Class column');
      }
      if (oldSave !== 20 && newSave !== 20) {
        output.savemisc1 = newSave;
      }
      if (oldSave === 20 && newSave === 20) {
        output.savemisc1 = newSave;
      }
      if (oldSave === 20 && newSave !== 20) {
        output.savemisc1 = newSave;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  function savemisc2Calc() {
    getAttrs(['savemisc2', 'savemisc2_base', 'savemisc2_racial_mod', 'savemisc2_ability_mod', 'savemisc2_misc_mod', 'savemisc2_temp_mod'], (v) => {
      const output = {};
      const baseSavemisc2 = +v.savemisc2_base || 0;
      const racialSavemisc2 = +v.savemisc2_racial_mod || 0;
      const abilitySavemisc2 = +v.savemisc2_ability_mod || 0;
      const miscSavemisc2 = +v.savemisc2_misc_mod || 0;
      const tempSavemisc2 = +v.savemisc2_temp_mod || 0;
      const oldSave = +v.savemisc1 || 0;
      const newSave = int(baseSavemisc2 + racialSavemisc2 + abilitySavemisc2 + miscSavemisc2 + tempSavemisc2) || 0;
      // clog(`oldSave: ${oldSave} newSave: ${newSave}`);
      if (oldSave !== 20 && newSave === 20) {
        output.savemisc2_base = oldSave;
        // clog('Old Save copied to Base/Class column');
      }
      if (oldSave !== 20 && newSave !== 20) {
        output.savemisc2 = newSave;
      }
      if (oldSave === 20 && newSave === 20) {
        output.savemisc2 = newSave;
      }
      if (oldSave === 20 && newSave !== 20) {
        output.savemisc2 = newSave;
      }
      setAttrs(output, {
        silent: true,
      });
    });
  }

  // One-time update: Auto Calc Save rows
  autoCalcSaveRows = (current_version, final_version) => {
    const output = {};
    saveparalysispoisondeathCalc();
    savepetrificationpolymorphCalc();
    saverodsstaveswandsCalc();
    savebreathweaponsCalc();
    savespellsCalc();
    savemiscCalc();
    savemisc1Calc();
    savemisc2Calc();
    output.sheet_version = current_version;
    clog(`VERSION UPDATE: autoCalcSaveRows completed`);
    setAttrs(
      output,
      {
        silent: true,
      },
      versionator(current_version, final_version)
    );
  };

  on(
    'change:saveparalysispoisondeath_base change:saveparalysispoisondeath_racial_mod change:saveparalysispoisondeath_ability_mod change:saveparalysispoisondeath_misc_mod change:saveparalysispoisondeath_temp_mod',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      saveparalysispoisondeathCalc();
    }
  );
  on(
    'change:savepetrificationpolymorph_base change:savepetrificationpolymorph_racial_mod change:savepetrificationpolymorph_ability_mod change:savepetrificationpolymorph_misc_mod change:savepetrificationpolymorph_temp_mod',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      savepetrificationpolymorphCalc();
    }
  );
  on(
    'change:saverodsstaveswands_base change:saverodsstaveswands_racial_mod change:saverodsstaveswands_ability_mod change:saverodsstaveswands_misc_mod change:saverodsstaveswands_temp_mod',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      saverodsstaveswandsCalc();
    }
  );
  on(
    'change:savebreathweapons_base change:savebreathweapons_racial_mod change:savebreathweapons_ability_mod change:savebreathweapons_misc_mod change:savebreathweapons_temp_mod',
    (eventInfo) => {
      // clog(`Change Detected:${eventInfo.sourceAttribute}`);
      savebreathweaponsCalc();
    }
  );
  on('change:savespells_base change:savespells_racial_mod change:savespells_ability_mod change:savespells_misc_mod change:savespells_temp_mod', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    savespellsCalc();
  });
  on('change:savemisc_base change:savemisc_racial_mod change:savemisc_ability_mod change:savemisc_misc_mod change:savemisc_temp_mod', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    savemiscCalc();
  });
  on('change:savemisc1_base change:savemisc1_racial_mod change:savemisc1_ability_mod change:savemisc1_misc_mod change:savemisc1_temp_mod', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    savemisc1Calc();
  });
  on('change:savemisc2_base change:savemisc2_racial_mod change:savemisc2_ability_mod change:savemisc2_misc_mod change:savemisc2_temp_mod', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    savemisc2Calc();
  });

  // Attack Matrix Autofill To-Hit table
  on('change:matrix_class change:matrix_level change:matrix_hitdice', (eventInfo) => {
    // clog(`Matrix Autofill Change Detected:${eventInfo.sourceAttribute}`);
    getAttrs(['matrix_class', 'matrix_level', 'matrix_hitdice', 'toggle_matrixhd'], (v) => {
      const output = {};
      const classSelected = +v.matrix_class || 0;
      const levelSelected = +v.matrix_level || 0;
      const hitdiceSelected = +v.matrix_hitdice || 0;
      if (classSelected !== 0) {
        // clog('Ready to autofill attack matrix.');
        // clerics table
        if (classSelected === 1) {
          if (levelSelected === 0) {
            // clog('Need to choose a class level greater than 0 to continue.');
          } else if (levelSelected < 4) {
            output[`thac-10`] = 25;
            output[`thac-9`] = 24;
            output[`thac-8`] = 23;
            output[`thac-7`] = 22;
            output[`thac-6`] = 21;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 19;
            output.thac2 = 18;
            output.thac3 = 17;
            output.thac4 = 16;
            output.thac5 = 15;
            output.thac6 = 14;
            output.thac7 = 13;
            output.thac8 = 12;
            output.thac9 = 11;
            output.thac10 = 10;
          } else if (levelSelected < 7) {
            output[`thac-10`] = 23;
            output[`thac-9`] = 22;
            output[`thac-8`] = 21;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 19;
            output.thac00 = 18;
            output.thac0 = 18;
            output.thac1 = 17;
            output.thac2 = 16;
            output.thac3 = 15;
            output.thac4 = 14;
            output.thac5 = 13;
            output.thac6 = 12;
            output.thac7 = 11;
            output.thac8 = 10;
            output.thac9 = 9;
            output.thac10 = 8;
          } else if (levelSelected < 10) {
            output[`thac-10`] = 21;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 19;
            output[`thac-2`] = 18;
            output[`thac-1`] = 17;
            output.thac00 = 16;
            output.thac0 = 16;
            output.thac1 = 15;
            output.thac2 = 14;
            output.thac3 = 13;
            output.thac4 = 12;
            output.thac5 = 11;
            output.thac6 = 10;
            output.thac7 = 9;
            output.thac8 = 8;
            output.thac9 = 7;
            output.thac10 = 6;
          } else if (levelSelected < 13) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 19;
            output[`thac-3`] = 18;
            output[`thac-2`] = 17;
            output[`thac-1`] = 16;
            output.thac00 = 16;
            output.thac0 = 15;
            output.thac1 = 14;
            output.thac2 = 13;
            output.thac3 = 12;
            output.thac4 = 10;
            output.thac5 = 9;
            output.thac6 = 8;
            output.thac7 = 7;
            output.thac8 = 6;
            output.thac9 = 5;
            output.thac10 = 4;
          } else if (levelSelected < 16) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 19;
            output[`thac-6`] = 18;
            output[`thac-5`] = 17;
            output[`thac-4`] = 16;
            output[`thac-3`] = 15;
            output[`thac-2`] = 14;
            output[`thac-1`] = 13;
            output.thac00 = 12;
            output.thac0 = 12;
            output.thac1 = 11;
            output.thac2 = 10;
            output.thac3 = 9;
            output.thac4 = 8;
            output.thac5 = 7;
            output.thac6 = 6;
            output.thac7 = 5;
            output.thac8 = 4;
            output.thac9 = 3;
            output.thac10 = 2;
          } else if (levelSelected < 19) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 19;
            output[`thac-8`] = 18;
            output[`thac-7`] = 17;
            output[`thac-6`] = 16;
            output[`thac-5`] = 15;
            output[`thac-4`] = 14;
            output[`thac-3`] = 13;
            output[`thac-2`] = 12;
            output[`thac-1`] = 11;
            output.thac00 = 10;
            output.thac0 = 10;
            output.thac1 = 9;
            output.thac2 = 8;
            output.thac3 = 7;
            output.thac4 = 6;
            output.thac5 = 5;
            output.thac6 = 4;
            output.thac7 = 3;
            output.thac8 = 2;
            output.thac9 = 1;
            output.thac10 = 0;
          } else if (levelSelected >= 19) {
            output[`thac-10`] = 19;
            output[`thac-9`] = 18;
            output[`thac-8`] = 17;
            output[`thac-7`] = 16;
            output[`thac-6`] = 15;
            output[`thac-5`] = 14;
            output[`thac-4`] = 13;
            output[`thac-3`] = 12;
            output[`thac-2`] = 11;
            output[`thac-1`] = 10;
            output.thac00 = 9;
            output.thac0 = 9;
            output.thac1 = 8;
            output.thac2 = 7;
            output.thac3 = 6;
            output.thac4 = 5;
            output.thac5 = 4;
            output.thac6 = 3;
            output.thac7 = 2;
            output.thac8 = 1;
            output.thac9 = 0;
            output.thac10 = -1;
          } else {
            // clog('Class level is out of range.');
          }
          output.toggle_matrixhd = 0;
        }
        // fighters table
        if (classSelected === 2) {
          if (levelSelected === 0) {
            output[`thac-10`] = 26;
            output[`thac-9`] = 25;
            output[`thac-8`] = 24;
            output[`thac-7`] = 23;
            output[`thac-6`] = 22;
            output[`thac-5`] = 21;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 20;
            output.thac2 = 19;
            output.thac3 = 18;
            output.thac4 = 17;
            output.thac5 = 16;
            output.thac6 = 15;
            output.thac7 = 14;
            output.thac8 = 13;
            output.thac9 = 12;
            output.thac10 = 11;
          } else if (levelSelected < 3) {
            output[`thac-10`] = 25;
            output[`thac-9`] = 24;
            output[`thac-8`] = 23;
            output[`thac-7`] = 22;
            output[`thac-6`] = 21;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 19;
            output.thac2 = 18;
            output.thac3 = 17;
            output.thac4 = 16;
            output.thac5 = 15;
            output.thac6 = 14;
            output.thac7 = 13;
            output.thac8 = 12;
            output.thac9 = 11;
            output.thac10 = 10;
          } else if (levelSelected < 5) {
            output[`thac-10`] = 23;
            output[`thac-9`] = 22;
            output[`thac-8`] = 21;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 19;
            output.thac00 = 18;
            output.thac0 = 18;
            output.thac1 = 17;
            output.thac2 = 16;
            output.thac3 = 15;
            output.thac4 = 14;
            output.thac5 = 13;
            output.thac6 = 12;
            output.thac7 = 11;
            output.thac8 = 10;
            output.thac9 = 9;
            output.thac10 = 8;
          } else if (levelSelected < 7) {
            output[`thac-10`] = 21;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 19;
            output[`thac-2`] = 18;
            output[`thac-1`] = 17;
            output.thac00 = 16;
            output.thac0 = 16;
            output.thac1 = 15;
            output.thac2 = 14;
            output.thac3 = 13;
            output.thac4 = 12;
            output.thac5 = 11;
            output.thac6 = 10;
            output.thac7 = 9;
            output.thac8 = 8;
            output.thac9 = 7;
            output.thac10 = 6;
          } else if (levelSelected < 9) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 19;
            output[`thac-4`] = 18;
            output[`thac-3`] = 17;
            output[`thac-2`] = 16;
            output[`thac-1`] = 15;
            output.thac00 = 14;
            output.thac0 = 14;
            output.thac1 = 13;
            output.thac2 = 12;
            output.thac3 = 11;
            output.thac4 = 10;
            output.thac5 = 9;
            output.thac6 = 8;
            output.thac7 = 7;
            output.thac8 = 6;
            output.thac9 = 5;
            output.thac10 = 4;
          } else if (levelSelected < 11) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 19;
            output[`thac-6`] = 18;
            output[`thac-5`] = 17;
            output[`thac-4`] = 16;
            output[`thac-3`] = 15;
            output[`thac-2`] = 14;
            output[`thac-1`] = 13;
            output.thac00 = 12;
            output.thac0 = 12;
            output.thac1 = 11;
            output.thac2 = 10;
            output.thac3 = 9;
            output.thac4 = 8;
            output.thac5 = 7;
            output.thac6 = 6;
            output.thac7 = 5;
            output.thac8 = 4;
            output.thac9 = 3;
            output.thac10 = 2;
          } else if (levelSelected < 13) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 19;
            output[`thac-8`] = 18;
            output[`thac-7`] = 17;
            output[`thac-6`] = 16;
            output[`thac-5`] = 15;
            output[`thac-4`] = 14;
            output[`thac-3`] = 13;
            output[`thac-2`] = 12;
            output[`thac-1`] = 11;
            output.thac00 = 10;
            output.thac0 = 10;
            output.thac1 = 9;
            output.thac2 = 8;
            output.thac3 = 7;
            output.thac4 = 6;
            output.thac5 = 5;
            output.thac6 = 4;
            output.thac7 = 3;
            output.thac8 = 2;
            output.thac9 = 1;
            output.thac10 = 0;
          } else if (levelSelected < 15) {
            output[`thac-10`] = 18;
            output[`thac-9`] = 17;
            output[`thac-8`] = 16;
            output[`thac-7`] = 15;
            output[`thac-6`] = 14;
            output[`thac-5`] = 13;
            output[`thac-4`] = 12;
            output[`thac-3`] = 11;
            output[`thac-2`] = 10;
            output[`thac-1`] = 9;
            output.thac00 = 8;
            output.thac0 = 8;
            output.thac1 = 7;
            output.thac2 = 6;
            output.thac3 = 5;
            output.thac4 = 4;
            output.thac5 = 3;
            output.thac6 = 2;
            output.thac7 = 1;
            output.thac8 = 0;
            output.thac9 = -1;
            output.thac10 = -2;
          } else if (levelSelected < 17) {
            output[`thac-10`] = 16;
            output[`thac-9`] = 15;
            output[`thac-8`] = 14;
            output[`thac-7`] = 13;
            output[`thac-6`] = 12;
            output[`thac-5`] = 11;
            output[`thac-4`] = 10;
            output[`thac-3`] = 9;
            output[`thac-2`] = 8;
            output[`thac-1`] = 7;
            output.thac00 = 6;
            output.thac0 = 6;
            output.thac1 = 5;
            output.thac2 = 4;
            output.thac3 = 3;
            output.thac4 = 2;
            output.thac5 = 1;
            output.thac6 = 0;
            output.thac7 = -1;
            output.thac8 = -2;
            output.thac9 = -3;
            output.thac10 = -4;
          } else if (levelSelected >= 17) {
            output[`thac-10`] = 14;
            output[`thac-9`] = 13;
            output[`thac-8`] = 12;
            output[`thac-7`] = 11;
            output[`thac-6`] = 10;
            output[`thac-5`] = 9;
            output[`thac-4`] = 8;
            output[`thac-3`] = 7;
            output[`thac-2`] = 6;
            output[`thac-1`] = 5;
            output.thac00 = 4;
            output.thac0 = 4;
            output.thac1 = 3;
            output.thac2 = 2;
            output.thac3 = 1;
            output.thac4 = 0;
            output.thac5 = -1;
            output.thac6 = -2;
            output.thac7 = -3;
            output.thac8 = -4;
            output.thac9 = -5;
            output.thac10 = -6;
          } else {
            // clog('Class level is out of range.');
          }
          output.toggle_matrixhd = 0;
        }
        // magic-users table
        if (classSelected === 3) {
          if (levelSelected === 0) {
            // clog('Need to choose a class level greater than 0 to continue.');
          } else if (levelSelected < 6) {
            output[`thac-10`] = 26;
            output[`thac-9`] = 25;
            output[`thac-8`] = 24;
            output[`thac-7`] = 23;
            output[`thac-6`] = 22;
            output[`thac-5`] = 21;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 20;
            output.thac2 = 19;
            output.thac3 = 18;
            output.thac4 = 17;
            output.thac5 = 16;
            output.thac6 = 15;
            output.thac7 = 14;
            output.thac8 = 13;
            output.thac9 = 12;
            output.thac10 = 11;
          } else if (levelSelected < 11) {
            output[`thac-10`] = 24;
            output[`thac-9`] = 23;
            output[`thac-8`] = 22;
            output[`thac-7`] = 21;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 19;
            output.thac0 = 19;
            output.thac1 = 18;
            output.thac2 = 17;
            output.thac3 = 16;
            output.thac4 = 15;
            output.thac5 = 14;
            output.thac6 = 13;
            output.thac7 = 12;
            output.thac8 = 11;
            output.thac9 = 10;
            output.thac10 = 9;
          } else if (levelSelected < 16) {
            output[`thac-10`] = 21;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 19;
            output[`thac-2`] = 18;
            output[`thac-1`] = 17;
            output.thac00 = 16;
            output.thac0 = 16;
            output.thac1 = 15;
            output.thac2 = 14;
            output.thac3 = 13;
            output.thac4 = 12;
            output.thac5 = 11;
            output.thac6 = 10;
            output.thac7 = 9;
            output.thac8 = 8;
            output.thac9 = 7;
            output.thac10 = 6;
          } else if (levelSelected < 21) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 19;
            output[`thac-5`] = 18;
            output[`thac-4`] = 17;
            output[`thac-3`] = 16;
            output[`thac-2`] = 15;
            output[`thac-1`] = 14;
            output.thac00 = 13;
            output.thac0 = 13;
            output.thac1 = 12;
            output.thac2 = 11;
            output.thac3 = 10;
            output.thac4 = 9;
            output.thac5 = 8;
            output.thac6 = 7;
            output.thac7 = 6;
            output.thac8 = 5;
            output.thac9 = 4;
            output.thac10 = 3;
          } else if (levelSelected >= 21) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 19;
            output[`thac-7`] = 18;
            output[`thac-6`] = 17;
            output[`thac-5`] = 16;
            output[`thac-4`] = 15;
            output[`thac-3`] = 14;
            output[`thac-2`] = 13;
            output[`thac-1`] = 12;
            output.thac00 = 11;
            output.thac0 = 11;
            output.thac1 = 10;
            output.thac2 = 9;
            output.thac3 = 8;
            output.thac4 = 7;
            output.thac5 = 6;
            output.thac6 = 5;
            output.thac7 = 4;
            output.thac8 = 3;
            output.thac9 = 2;
            output.thac10 = 1;
          } else {
            // clog('Class level is out of range.');
          }
          output.toggle_matrixhd = 0;
        }
        // thieves table
        if (classSelected === 4) {
          if (levelSelected === 0) {
            // clog('Need to choose a class level greater than 0 to continue.');
          } else if (levelSelected < 5) {
            output[`thac-10`] = 26;
            output[`thac-9`] = 25;
            output[`thac-8`] = 24;
            output[`thac-7`] = 23;
            output[`thac-6`] = 22;
            output[`thac-5`] = 21;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 20;
            output.thac2 = 19;
            output.thac3 = 18;
            output.thac4 = 17;
            output.thac5 = 16;
            output.thac6 = 15;
            output.thac7 = 14;
            output.thac8 = 13;
            output.thac9 = 12;
            output.thac10 = 11;
          } else if (levelSelected < 9) {
            output[`thac-10`] = 24;
            output[`thac-9`] = 23;
            output[`thac-8`] = 22;
            output[`thac-7`] = 21;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 19;
            output.thac0 = 19;
            output.thac1 = 18;
            output.thac2 = 17;
            output.thac3 = 16;
            output.thac4 = 15;
            output.thac5 = 14;
            output.thac6 = 13;
            output.thac7 = 12;
            output.thac8 = 11;
            output.thac9 = 10;
            output.thac10 = 9;
          } else if (levelSelected < 13) {
            output[`thac-10`] = 21;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 19;
            output[`thac-2`] = 18;
            output[`thac-1`] = 17;
            output.thac00 = 16;
            output.thac0 = 16;
            output.thac1 = 15;
            output.thac2 = 14;
            output.thac3 = 13;
            output.thac4 = 12;
            output.thac5 = 11;
            output.thac6 = 10;
            output.thac7 = 9;
            output.thac8 = 8;
            output.thac9 = 7;
            output.thac10 = 6;
          } else if (levelSelected < 17) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 19;
            output[`thac-4`] = 18;
            output[`thac-3`] = 17;
            output[`thac-2`] = 16;
            output[`thac-1`] = 15;
            output.thac00 = 14;
            output.thac0 = 14;
            output.thac1 = 13;
            output.thac2 = 12;
            output.thac3 = 11;
            output.thac4 = 10;
            output.thac5 = 9;
            output.thac6 = 8;
            output.thac7 = 7;
            output.thac8 = 6;
            output.thac9 = 5;
            output.thac10 = 4;
          } else if (levelSelected < 21) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 19;
            output[`thac-6`] = 18;
            output[`thac-5`] = 17;
            output[`thac-4`] = 16;
            output[`thac-3`] = 15;
            output[`thac-2`] = 14;
            output[`thac-1`] = 13;
            output.thac00 = 12;
            output.thac0 = 12;
            output.thac1 = 11;
            output.thac2 = 10;
            output.thac3 = 9;
            output.thac4 = 8;
            output.thac5 = 7;
            output.thac6 = 6;
            output.thac7 = 5;
            output.thac8 = 4;
            output.thac9 = 3;
            output.thac10 = 2;
          } else if (levelSelected >= 21) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 19;
            output[`thac-8`] = 18;
            output[`thac-7`] = 17;
            output[`thac-6`] = 16;
            output[`thac-5`] = 15;
            output[`thac-4`] = 14;
            output[`thac-3`] = 13;
            output[`thac-2`] = 12;
            output[`thac-1`] = 11;
            output.thac00 = 10;
            output.thac0 = 10;
            output.thac1 = 9;
            output.thac2 = 8;
            output.thac3 = 7;
            output.thac4 = 6;
            output.thac5 = 5;
            output.thac6 = 4;
            output.thac7 = 3;
            output.thac8 = 2;
            output.thac9 = 1;
            output.thac10 = 0;
          } else {
            // clog('Class level is out of range.');
          }
          output.toggle_matrixhd = 0;
        }
        // monsters table
        if (classSelected === 5) {
          if (hitdiceSelected === 0) {
            // clog('Need to select HD to continue.');
          } else if (hitdiceSelected === 1) {
            output[`thac-10`] = 26;
            output[`thac-9`] = 25;
            output[`thac-8`] = 24;
            output[`thac-7`] = 23;
            output[`thac-6`] = 22;
            output[`thac-5`] = 21;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 20;
            output.thac2 = 19;
            output.thac3 = 18;
            output.thac4 = 17;
            output.thac5 = 16;
            output.thac6 = 15;
            output.thac7 = 14;
            output.thac8 = 13;
            output.thac9 = 12;
            output.thac10 = 11;
          } else if (hitdiceSelected === 2) {
            output[`thac-10`] = 25;
            output[`thac-9`] = 24;
            output[`thac-8`] = 23;
            output[`thac-7`] = 22;
            output[`thac-6`] = 21;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 20;
            output.thac0 = 20;
            output.thac1 = 19;
            output.thac2 = 18;
            output.thac3 = 17;
            output.thac4 = 16;
            output.thac5 = 15;
            output.thac6 = 14;
            output.thac7 = 13;
            output.thac8 = 12;
            output.thac9 = 11;
            output.thac10 = 10;
          } else if (hitdiceSelected === 3) {
            output[`thac-10`] = 24;
            output[`thac-9`] = 23;
            output[`thac-8`] = 22;
            output[`thac-7`] = 21;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 20;
            output.thac00 = 19;
            output.thac0 = 19;
            output.thac1 = 18;
            output.thac2 = 17;
            output.thac3 = 16;
            output.thac4 = 15;
            output.thac5 = 14;
            output.thac6 = 13;
            output.thac7 = 12;
            output.thac8 = 11;
            output.thac9 = 10;
            output.thac10 = 9;
          } else if (hitdiceSelected === 4) {
            output[`thac-10`] = 23;
            output[`thac-9`] = 22;
            output[`thac-8`] = 21;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 20;
            output[`thac-2`] = 20;
            output[`thac-1`] = 19;
            output.thac00 = 18;
            output.thac0 = 18;
            output.thac1 = 17;
            output.thac2 = 16;
            output.thac3 = 15;
            output.thac4 = 14;
            output.thac5 = 13;
            output.thac6 = 12;
            output.thac7 = 11;
            output.thac8 = 10;
            output.thac9 = 9;
            output.thac10 = 8;
          } else if (hitdiceSelected === 5) {
            output[`thac-10`] = 21;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 20;
            output[`thac-3`] = 19;
            output[`thac-2`] = 18;
            output[`thac-1`] = 17;
            output.thac00 = 16;
            output.thac0 = 16;
            output.thac1 = 15;
            output.thac2 = 14;
            output.thac3 = 13;
            output.thac4 = 12;
            output.thac5 = 11;
            output.thac6 = 10;
            output.thac7 = 9;
            output.thac8 = 8;
            output.thac9 = 7;
            output.thac10 = 6;
          } else if (hitdiceSelected === 6) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 20;
            output[`thac-5`] = 20;
            output[`thac-4`] = 19;
            output[`thac-3`] = 18;
            output[`thac-2`] = 17;
            output[`thac-1`] = 16;
            output.thac00 = 15;
            output.thac0 = 15;
            output.thac1 = 14;
            output.thac2 = 13;
            output.thac3 = 12;
            output.thac4 = 11;
            output.thac5 = 10;
            output.thac6 = 9;
            output.thac7 = 8;
            output.thac8 = 7;
            output.thac9 = 6;
            output.thac10 = 5;
          } else if (hitdiceSelected === 7) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 20;
            output[`thac-6`] = 19;
            output[`thac-5`] = 18;
            output[`thac-4`] = 17;
            output[`thac-3`] = 16;
            output[`thac-2`] = 15;
            output[`thac-1`] = 14;
            output.thac00 = 13;
            output.thac0 = 13;
            output.thac1 = 12;
            output.thac2 = 11;
            output.thac3 = 10;
            output.thac4 = 9;
            output.thac5 = 8;
            output.thac6 = 7;
            output.thac7 = 6;
            output.thac8 = 5;
            output.thac9 = 4;
            output.thac10 = 3;
          } else if (hitdiceSelected === 8) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 20;
            output[`thac-8`] = 20;
            output[`thac-7`] = 19;
            output[`thac-6`] = 18;
            output[`thac-5`] = 17;
            output[`thac-4`] = 16;
            output[`thac-3`] = 15;
            output[`thac-2`] = 14;
            output[`thac-1`] = 13;
            output.thac00 = 12;
            output.thac0 = 12;
            output.thac1 = 11;
            output.thac2 = 10;
            output.thac3 = 9;
            output.thac4 = 8;
            output.thac5 = 7;
            output.thac6 = 6;
            output.thac7 = 5;
            output.thac8 = 4;
            output.thac9 = 3;
            output.thac10 = 2;
          } else if (hitdiceSelected === 9) {
            output[`thac-10`] = 20;
            output[`thac-9`] = 19;
            output[`thac-8`] = 18;
            output[`thac-7`] = 17;
            output[`thac-6`] = 16;
            output[`thac-5`] = 15;
            output[`thac-4`] = 14;
            output[`thac-3`] = 13;
            output[`thac-2`] = 12;
            output[`thac-1`] = 11;
            output.thac00 = 10;
            output.thac0 = 10;
            output.thac1 = 9;
            output.thac2 = 8;
            output.thac3 = 7;
            output.thac4 = 6;
            output.thac5 = 5;
            output.thac6 = 4;
            output.thac7 = 3;
            output.thac8 = 2;
            output.thac9 = 1;
            output.thac10 = 0;
          } else if (hitdiceSelected === 10) {
            output[`thac-10`] = 19;
            output[`thac-9`] = 18;
            output[`thac-8`] = 17;
            output[`thac-7`] = 16;
            output[`thac-6`] = 15;
            output[`thac-5`] = 14;
            output[`thac-4`] = 13;
            output[`thac-3`] = 12;
            output[`thac-2`] = 11;
            output[`thac-1`] = 10;
            output.thac00 = 9;
            output.thac0 = 9;
            output.thac1 = 8;
            output.thac2 = 7;
            output.thac3 = 6;
            output.thac4 = 5;
            output.thac5 = 4;
            output.thac6 = 3;
            output.thac7 = 2;
            output.thac8 = 1;
            output.thac9 = 0;
            output.thac10 = -1;
          } else if (hitdiceSelected === 11) {
            output[`thac-10`] = 18;
            output[`thac-9`] = 17;
            output[`thac-8`] = 16;
            output[`thac-7`] = 15;
            output[`thac-6`] = 14;
            output[`thac-5`] = 13;
            output[`thac-4`] = 12;
            output[`thac-3`] = 11;
            output[`thac-2`] = 10;
            output[`thac-1`] = 9;
            output.thac00 = 8;
            output.thac0 = 8;
            output.thac1 = 7;
            output.thac2 = 6;
            output.thac3 = 5;
            output.thac4 = 4;
            output.thac5 = 3;
            output.thac6 = 2;
            output.thac7 = 1;
            output.thac8 = 0;
            output.thac9 = -1;
            output.thac10 = -2;
          } else if (hitdiceSelected === 12) {
            output[`thac-10`] = 17;
            output[`thac-9`] = 16;
            output[`thac-8`] = 15;
            output[`thac-7`] = 14;
            output[`thac-6`] = 13;
            output[`thac-5`] = 12;
            output[`thac-4`] = 11;
            output[`thac-3`] = 10;
            output[`thac-2`] = 9;
            output[`thac-1`] = 8;
            output.thac00 = 7;
            output.thac0 = 7;
            output.thac1 = 6;
            output.thac2 = 5;
            output.thac3 = 4;
            output.thac4 = 3;
            output.thac5 = 2;
            output.thac6 = 1;
            output.thac7 = 0;
            output.thac8 = -1;
            output.thac9 = -2;
            output.thac10 = -3;
          } else {
            // clog('Class level is out of range.');
          }
          output.toggle_matrixhd = 1;
        }
      } else {
        output.toggle_matrixhd = 0;
        // clog('Need to choose a class/monster to continue.');
      }
      setAttrs(output, {
        silent: true,
      });
    });
  });

  // Auto-fill Abilities
  function getValidVariable(str_value, string_type = 'UNDEFINED', lower_bound = 3, higher_bound = 25) {
    if (str_value < 3) {
      console.log(`Error: ${string_type} value is not a number or out of range. [${str_value}].\nDefaulting to ${lower_bound}.`);
      return lower_bound;
    }
    if (str_value > 25) {
      console.log(`Error: ${string_type} value is out of range. [${str_value}].\nDefaulting to ${higher_bound}.`);
      return higher_bound;
    }
    // Keep value between lowerbound and higherbound.
    return Math.min(Math.max(str_value, lower_bound), higher_bound);
  }

  // Strength Table Entry
  class StrengthCheck {
    constructor(meleebonus, dmgbonus, majorstrengthfeat, minorstrengthfeat, minorstrengthfeat_locked, encumbrancebonus) {
      this.meleebonus = meleebonus;
      this.dmgbonus = dmgbonus;
      this.majorstrengthfeat = majorstrengthfeat;
      this.minorstrengthfeat = minorstrengthfeat;
      this.minorstrengthfeat_locked = minorstrengthfeat_locked;
      this.encumbrancebonus = encumbrancebonus;
    }

    getMeleeAttackBonus() {
      return this.meleebonus;
    }

    getMeleeDamageBonus() {
      return this.dmgbonus;
    }

    getMajorStrengthCheck() {
      return this.majorstrengthfeat;
    }

    getMinorStrengthCheck(locked = false) {
      if (!locked) return this.minorstrengthfeat;
      return this.minorstrengthfeat_locked;
    }

    getEncumbranceBonus() {
      return this.encumbrancebonus;
    }
  }

  class StrengthAdjustmentTable {
    constructor() {
      // MeleeAttackBonus, MeleeDamageBonus, MajorStrengthCheck, MinorStrengthCheck, MinorStrengthCheck(locked), EncumbranceBonus
      this.strength_dict = {
        3: new StrengthCheck(-3, -1, 15, 1, 0, -350),
        4: new StrengthCheck(-2, -1, 15, 1, 0, -250),
        5: new StrengthCheck(-2, -1, 15, 1, 0, -250),
        6: new StrengthCheck(-1, 0, 15, 1, 0, -150),
        7: new StrengthCheck(-1, 0, 15, 1, 0, -150),
        8: new StrengthCheck(0, 0, 30, 2, 0, 0),
        9: new StrengthCheck(0, 0, 30, 2, 0, 0),
        10: new StrengthCheck(0, 0, 30, 2, 0, 0),
        11: new StrengthCheck(0, 0, 30, 2, 0, 0),
        12: new StrengthCheck(0, 0, 30, 2, 0, 100),
        13: new StrengthCheck(0, 0, 30, 2, 0, 100),
        14: new StrengthCheck(0, 0, 30, 2, 0, 200),
        15: new StrengthCheck(0, 0, 30, 2, 0, 200),
        16: new StrengthCheck(0, 1, 50, 3, 0, 350),
        17: new StrengthCheck(1, 1, 50, 3, 0, 500),
        18: {
          None: new StrengthCheck(1, 2, 50, 3, 0, 750),
          '01-50': new StrengthCheck(1, 3, 50, 3, 0, 1000),
          '51-75': new StrengthCheck(2, 3, 70, 4, 0, 1250),
          '76-90': new StrengthCheck(2, 4, 70, 4, 0, 1500),
          '91-99': new StrengthCheck(2, 5, 70, 4, 1, 2000),
          '00': new StrengthCheck(3, 6, 85, 5, 1, 3000),
        },
        19: new StrengthCheck(3, 7, 90, 7, 3, 4500),
        20: new StrengthCheck(3, 8, 90, 7, 3, 5000),
        21: new StrengthCheck(4, 9, 90, 9, 4, 6000),
        22: new StrengthCheck(4, 10, 90, 11, 4, 7500),
        23: new StrengthCheck(5, 11, 90, 11, 5, 9000),
        24: new StrengthCheck(6, 12, 95, 19, 7, 12000),
        25: new StrengthCheck(7, 14, 95, 23, 9, 15000),
      };
    }

    // Grab the correct data row corresponding to Strength
    getEntry(str_value, str_per_value) {
      const str_value_STR = getValidVariable(str_value, 'strength', 3, 25);
      // Get the normal [1-17],[19-25] table entries.
      if (str_value_STR !== 18) return this.strength_dict[str_value_STR];
      // Get the 18 + percentile table entries
      if (str_per_value <= 0) return this.strength_dict[str_value_STR].None;
      if (str_per_value <= 50) return this.strength_dict[str_value_STR]['01-50'];
      if (str_per_value <= 75) return this.strength_dict[str_value_STR]['51-75'];
      if (str_per_value <= 90) return this.strength_dict[str_value_STR]['76-90'];
      if (str_per_value <= 99) return this.strength_dict[str_value_STR]['91-99'];
      return this.strength_dict[str_value_STR]['00'];
    }

    getStrengthValue(type, str_value_STR, str_per_value = 0, lock_flag = false) {
      switch (type) {
        case 'Attack':
          return this.getEntry(str_value_STR, str_per_value).getMeleeAttackBonus();
        case 'Damage':
          return this.getEntry(str_value_STR, str_per_value).getMeleeDamageBonus();
        case 'Major':
          return this.getEntry(str_value_STR, str_per_value).getMajorStrengthCheck();
        case 'Minor':
          return this.getEntry(str_value_STR, str_per_value).getMinorStrengthCheck(lock_flag);
        case 'Encumbrance':
          return this.getEntry(str_value_STR, str_per_value).getEncumbranceBonus();
        default:
          return 'Invalid Test';
      }
    }
  }

  // Intelligence Table Entry
  class IntelligenceEntry {
    constructor(bonuslanguages, knowspell, minspells, maxspells) {
      this.bonuslanguages = bonuslanguages;
      this.knowspell = knowspell;
      this.minspells = minspells;
      this.maxspells = maxspells;
    }

    getBonusLanguages() {
      return this.bonuslanguages;
    }

    getKnowSpell() {
      return this.knowspell;
    }

    getMinSpells() {
      return this.minspells;
    }

    getMaxSpells() {
      return this.maxspells;
    }
  }

  class IntelligenceAdjustmentTable {
    constructor() {
      // bonuslanguages, knowspell, minspells, maxspells
      this.intelligence_dict = {
        8: new IntelligenceEntry(1, 0, 0, 0),
        9: new IntelligenceEntry(1, 35, 4, 6),
        10: new IntelligenceEntry(2, 45, 5, 7),
        11: new IntelligenceEntry(2, 45, 5, 7),
        12: new IntelligenceEntry(3, 45, 5, 7),
        13: new IntelligenceEntry(3, 55, 6, 9),
        14: new IntelligenceEntry(4, 55, 6, 9),
        15: new IntelligenceEntry(4, 65, 7, 11),
        16: new IntelligenceEntry(5, 65, 7, 11),
        17: new IntelligenceEntry(6, 75, 8, 14),
        18: new IntelligenceEntry(7, 85, 9, 18),
        19: new IntelligenceEntry(8, 95, 10, 99),
        20: new IntelligenceEntry(9, 96, 11, 99),
        21: new IntelligenceEntry(10, 97, 12, 99),
        22: new IntelligenceEntry(11, 98, 13, 99),
        23: new IntelligenceEntry(12, 99, 14, 99),
        24: new IntelligenceEntry(13, 100, 15, 99),
        25: new IntelligenceEntry(14, 100, 16, 99),
      };
    }

    getEntry(str_value) {
      return this.intelligence_dict[getValidVariable(str_value, 'intelligence', 8, 25)];
    }
  }

  // Wisdom Table Entry
  class WisdomEntry {
    constructor(mentalsavebonus, spellbonus, spellfailure) {
      this.mentalsavebonus = mentalsavebonus;
      this.spellbonus = spellbonus;
      this.spellfailure = spellfailure;
    }

    getMentalSaveBonus() {
      return this.mentalsavebonus;
    }

    getSpellBonus() {
      return this.spellbonus;
    }

    getSpellFailure() {
      return this.spellfailure;
    }
  }

  class WisdomAdjustmentTable {
    constructor() {
      // mentalsavebonus, spellbonus, spellfailure
      this.wisdom_dict = {
        3: new WisdomEntry('-3', 'None', 20),
        4: new WisdomEntry('-2', 'None', 20),
        5: new WisdomEntry('-1', 'None', 20),
        6: new WisdomEntry('-1', 'None', 20),
        7: new WisdomEntry('-1', 'None', 20),
        8: new WisdomEntry('0', 'None', 20),
        9: new WisdomEntry('0', 'None', 20),
        10: new WisdomEntry('0', 'None', 15),
        11: new WisdomEntry('0', 'None', 10),
        12: new WisdomEntry('0', 'None', 5),
        13: new WisdomEntry('0', '1/0/0/0/0/0/0', 0),
        14: new WisdomEntry('0', '2/0/0/0/0/0/0', 0),
        15: new WisdomEntry('1', '2/1/0/0/0/0/0', 0),
        16: new WisdomEntry('2', '2/2/0/0/0/0/0', 0),
        17: new WisdomEntry('3', '2/2/1/0/0/0/0', 0),
        18: new WisdomEntry('4', '2/2/1/1/0/0/0', 0),
        19: new WisdomEntry('4', '3/2/1/2/0/0/0', 0),
        20: new WisdomEntry('4', '3/3/1/3/0/0/0', 0),
        21: new WisdomEntry('4', '3/3/2/3/1/0/0', 0),
        22: new WisdomEntry('4', '3/3/2/4/2/0/0', 0),
        23: new WisdomEntry('4', '3/3/2/4/4/0/0', 0),
        24: new WisdomEntry('4', '3/3/2/4/4/2/1', 0),
        25: new WisdomEntry('4', '3/3/2/4/4/3/1', 0),
      };
    }

    getEntry(str_value) {
      return this.wisdom_dict[getValidVariable(str_value, 'wisdom', 3, 25)];
    }
  }

  // Dexterity Class Entry
  class DexterityEntry {
    constructor(surprisebonus, rangedbonus, armorbonus) {
      this.surprisebonus = surprisebonus;
      this.rangedbonus = rangedbonus;
      this.armorbonus = armorbonus;
    }

    getSurpriseBonus() {
      return this.surprisebonus;
    }

    getRangedBonus() {
      return this.rangedbonus;
    }

    getArmorBonus() {
      return this.armorbonus;
    }
  }

  class DexterityAdjustmentTable {
    constructor() {
      // surprisebonus rangedbonus armorbonus
      this.dexterity_dict = {
        3: new DexterityEntry(3, -3, 4),
        4: new DexterityEntry(2, -2, 3),
        5: new DexterityEntry(1, -1, 2),
        6: new DexterityEntry(0, 0, 1),
        7: new DexterityEntry(0, 0, 0),
        8: new DexterityEntry(0, 0, 0),
        9: new DexterityEntry(0, 0, 0),
        10: new DexterityEntry(0, 0, 0),
        11: new DexterityEntry(0, 0, 0),
        12: new DexterityEntry(0, 0, 0),
        13: new DexterityEntry(0, 0, 0),
        14: new DexterityEntry(0, 0, 0),
        15: new DexterityEntry(0, 0, -1),
        16: new DexterityEntry(-1, 1, -2),
        17: new DexterityEntry(-2, 2, -3),
        18: new DexterityEntry(-3, 3, -4),
        19: new DexterityEntry(-3, 3, -4),
        20: new DexterityEntry(-3, 3, -4),
        21: new DexterityEntry(-4, 4, -5),
        22: new DexterityEntry(-4, 4, -5),
        23: new DexterityEntry(-4, 4, -5),
        24: new DexterityEntry(-5, 5, -6),
        25: new DexterityEntry(-5, 5, -6),
      };
    }

    getEntry(str_value) {
      return this.dexterity_dict[getValidVariable(str_value, 'dexterity', 3, 25)];
    }
  }

  class ConstitutionEntry {
    constructor(hitpointbonus, systemshock, resurrectionsurvival) {
      this.hitpointbonus = hitpointbonus;
      this.systemshock = systemshock;
      this.resurrectionsurvival = resurrectionsurvival;
    }

    getHitpointBonus() {
      return this.hitpointbonus;
    }

    getSystemShock() {
      return this.systemshock;
    }

    getResurrectionSurvival() {
      return this.resurrectionsurvival;
    }
  }

  class ConstitutionAdjustmentTable {
    constructor() {
      // hitpointbonus systemshock resurrectionsurvival
      this.constitution_dict = {
        3: new ConstitutionEntry('-2', 35, 40),
        4: new ConstitutionEntry('-1', 40, 45),
        5: new ConstitutionEntry('-1', 45, 50),
        6: new ConstitutionEntry('0', 50, 55),
        7: new ConstitutionEntry('0', 55, 60),
        8: new ConstitutionEntry('0', 60, 65),
        9: new ConstitutionEntry('0', 65, 70),
        10: new ConstitutionEntry('0', 70, 85),
        11: new ConstitutionEntry('0', 75, 90),
        12: new ConstitutionEntry('0', 80, 92),
        13: new ConstitutionEntry('0', 85, 94),
        14: new ConstitutionEntry('0', 88, 96),
        15: new ConstitutionEntry('1', 91, 98),
        16: new ConstitutionEntry('2', 95, 100),
        17: new ConstitutionEntry('3', 97, 100),
        18: new ConstitutionEntry('4', 99, 100),
        19: new ConstitutionEntry('5', 99, 100),
        20: new ConstitutionEntry('5', 99, 100),
        21: new ConstitutionEntry('6', 99, 100),
        22: new ConstitutionEntry('6', 99, 100),
        23: new ConstitutionEntry('6', 99, 100),
        24: new ConstitutionEntry('7', 99, 100),
        25: new ConstitutionEntry('7', 99, 100),
      };
    }

    getEntry(str_value) {
      return this.constitution_dict[getValidVariable(str_value, 'constitution', 3, 25)];
    }
  }

  class CharismaEntry {
    constructor(maximumhenchmen, loyaltybonus, reactionbonus, comeliness_cha_adj) {
      this.maximumhenchmen = maximumhenchmen;
      this.loyaltybonus = loyaltybonus;
      this.reactionbonus = reactionbonus;
      this.comeliness = comeliness_cha_adj;
    }

    MaximumHenchmen() {
      return this.maximumhenchmen;
    }

    getLoyaltyBonus() {
      return this.loyaltybonus;
    }

    getReactionBonus() {
      return this.reactionbonus;
    }

    getComeliness() {
      return this.comeliness;
    }
  }

  class CharismaAdjustmentTable {
    constructor() {
      // maximumhenchmen loyaltybonus reactionbonus comeliness_cha_adj
      this.charisma_dict = {
        3: new CharismaEntry(1, -30, -25, -5),
        4: new CharismaEntry(1, -25, -20, -3),
        5: new CharismaEntry(2, -20, -15, -3),
        6: new CharismaEntry(2, -15, -10, -1),
        7: new CharismaEntry(3, -10, -5, -1),
        8: new CharismaEntry(3, -5, 0, -1),
        9: new CharismaEntry(4, 0, 0, 0),
        10: new CharismaEntry(4, 0, 0, 0),
        11: new CharismaEntry(4, 0, 0, 0),
        12: new CharismaEntry(5, 0, 0, 0),
        13: new CharismaEntry(5, 0, 5, 1),
        14: new CharismaEntry(6, 5, 10, 1),
        15: new CharismaEntry(7, 15, 15, 1),
        16: new CharismaEntry(8, 20, 25, 2),
        17: new CharismaEntry(10, 30, 30, 2),
        18: new CharismaEntry(15, 40, 35, 3),
        19: new CharismaEntry(20, 50, 40, 5),
        20: new CharismaEntry(25, 60, 45, 5),
        21: new CharismaEntry(30, 70, 50, 5),
        22: new CharismaEntry(35, 80, 55, 5),
        23: new CharismaEntry(40, 90, 60, 5),
        24: new CharismaEntry(45, 100, 65, 5),
        25: new CharismaEntry(50, 100, 70, 5),
      };
    }

    getEntry(str_value) {
      return this.charisma_dict[getValidVariable(str_value, 'charisma', 3, 25)];
    }
  }

  // Globals
  const AT_STR = new StrengthAdjustmentTable();
  const AT_INT = new IntelligenceAdjustmentTable();
  const AT_WIS = new WisdomAdjustmentTable();
  const AT_DEX = new DexterityAdjustmentTable();
  const AT_CON = new ConstitutionAdjustmentTable();
  const AT_CHA = new CharismaAdjustmentTable();

  // Allows easy modification of variables
  const parseValues = (values, stat, type = 'int') => {
    if (type === 'int') return parseInt(values[stat]) || 0;
    if (type === 'float') return parseFloat(values[stat]) || 0;
    if (type === 'str') return values[stat];
    return null;
  };

  // Ability Row Calculations
  strengthCalcs = () => {
    getAttrs(['strength', 'exceptionalstrength'], (values) => {
      const output = {};
      const stat_str = parseValues(values, 'strength', 'int');
      let stat_str_per = parseValues(values, 'exceptionalstrength');
      // Special check for perfect strength
      if (parseValues(values, 'exceptionalstrength', 'str') === '00') stat_str_per = 100;
      output.exceptionalstrength = stat_str_per;
      output.meleebonus = (AT_STR.getStrengthValue('Attack', stat_str, stat_str_per) <= 0 ? '' : '+') + AT_STR.getStrengthValue('Attack', stat_str, stat_str_per);
      output.dmgbonus = (AT_STR.getStrengthValue('Damage', stat_str, stat_str_per) <= 0 ? '' : '+') + AT_STR.getStrengthValue('Damage', stat_str, stat_str_per);
      output.majorstrengthfeat = AT_STR.getStrengthValue('Major', stat_str, stat_str_per);
      output.minorstrengthfeat = AT_STR.getStrengthValue('Minor', stat_str, stat_str_per);
      output.minorstrengthfeat_locked = AT_STR.getStrengthValue('Minor', stat_str, stat_str_per, true);
      output.encumbrancebonus = (AT_STR.getStrengthValue('Encumbrance', stat_str, stat_str_per) <= 0 ? '' : '+') + AT_STR.getStrengthValue('Encumbrance', stat_str, stat_str_per);
      setAttrs(output, {
        silent: true,
      });
    });
  };

  intelligenceCalcs = () => {
    getAttrs(['intelligence', 'bonuslanguages', 'race'], (values) => {
      const output = {};
      const stat_int = parseValues(values, 'intelligence', 'int');
      // set bonus languages if human
      const race_value = parseValues(values, 'race', 'str');
      if (/human/gi.test(race_value)) {
        output.bonuslanguages = AT_INT.getEntry(stat_int).getBonusLanguages();
      } else {
        // clog('Demi-Human: Bonus Languages Not Set');
        return;
      }
      output.knowspell = AT_INT.getEntry(stat_int).getKnowSpell();
      output.minspells = AT_INT.getEntry(stat_int).getMinSpells();
      output.maxspells = AT_INT.getEntry(stat_int).getMaxSpells();
      setAttrs(output, {
        silent: true,
      });
    });
  };

  wisdomCalcs = () => {
    getAttrs(['wisdom'], (values) => {
      const output = {};
      const stat_wis = parseValues(values, 'wisdom', 'int');
      output.mentalsavebonus = (AT_WIS.getEntry(stat_wis).getMentalSaveBonus() <= 0 ? '' : '+') + AT_WIS.getEntry(stat_wis).getMentalSaveBonus();
      output.spellbonus = AT_WIS.getEntry(stat_wis).getSpellBonus();
      output.spellfailure = AT_WIS.getEntry(stat_wis).getSpellFailure();
      setAttrs(output, {
        silent: true,
      });
    });
  };

  dexterityCalcs = () => {
    getAttrs(['dexterity'], (values) => {
      const output = {};
      const stat_dex = parseValues(values, 'dexterity', 'int');
      const surpriseBon = AT_DEX.getEntry(stat_dex).getSurpriseBonus();
      const surprisebonus_add_sign = (-1 * surpriseBon <= 0 ? '' : '+') + -1 * surpriseBon;
      output.surprisebonus = AT_DEX.getEntry(stat_dex).getSurpriseBonus();
      output.surprisebonus_inverted = surprisebonus_add_sign;
      output.rangedbonus = (AT_DEX.getEntry(stat_dex).getRangedBonus() <= 0 ? '' : '+') + AT_DEX.getEntry(stat_dex).getRangedBonus();
      output.armorbonus = (AT_DEX.getEntry(stat_dex).getArmorBonus() <= 0 ? '' : '+') + AT_DEX.getEntry(stat_dex).getArmorBonus();
      setAttrs(output, {
        silent: true,
      });
    });
  };

  constitutionCalcs = () => {
    getAttrs(['constitution', 'class', 'secondclass', 'thirdclass'], (values) => {
      const output = {};
      const stat_con = parseValues(values, 'constitution', 'int');
      // check classes for FRP otherwise cap at HP bonus at +2
      const classes = [values.class, values.secondclass, values.thirdclass];
      if (/fighter/gi.test(classes) || /paladin/gi.test(classes) || /ranger/gi.test(classes)) {
        // clog(`${classes.join(' ')} class. Using expanded HP bonus.`);
        output.hitpointbonus = (AT_CON.getEntry(stat_con).getHitpointBonus() <= 0 ? '' : '+') + AT_CON.getEntry(stat_con).getHitpointBonus();
      } else {
        output.hitpointbonus = (Math.min(AT_CON.getEntry(stat_con).getHitpointBonus(), 2) <= 0 ? '' : '+') + Math.min(AT_CON.getEntry(stat_con).getHitpointBonus(), 2);
      }
      output.systemshock = AT_CON.getEntry(stat_con).getSystemShock();
      output.resurrectionsurvival = AT_CON.getEntry(stat_con).getResurrectionSurvival();
      setAttrs(output, {
        silent: true,
      });
    });
  };

  charismaCalcs = () => {
    getAttrs(['charisma'], (values) => {
      const output = {};
      const stat_cha = parseValues(values, 'charisma', 'int');
      output.maximumhenchmen = AT_CHA.getEntry(stat_cha).MaximumHenchmen();
      output.loyaltybonus = (AT_CHA.getEntry(stat_cha).getLoyaltyBonus() <= 0 ? '' : '+') + AT_CHA.getEntry(stat_cha).getLoyaltyBonus();
      output.reactionbonus = (AT_CHA.getEntry(stat_cha).getReactionBonus() <= 0 ? '' : '+') + AT_CHA.getEntry(stat_cha).getReactionBonus();
      output.comeliness_cha_adj = (AT_CHA.getEntry(stat_cha).getComeliness() <= 0 ? '' : '+') + AT_CHA.getEntry(stat_cha).getComeliness();
      setAttrs(output, {
        silent: true,
      });
    });
  };

  // One-time update: Auto Calc Ability rows
  autoCalcAbilityRows = (current_version, final_version) => {
    const output = {};
    stat_functions();
    output.sheet_version = current_version;
    clog(`VERSION UPDATE: autoCalcAbilityRows completed`);
    setAttrs(output, versionator(current_version, final_version));
  };

  on('change:strength change:exceptionalstrength', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    strengthCalcs();
  });

  // Intelligence Calculations
  on('change:intelligence change:race', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    intelligenceCalcs();
  });

  // Wisdom Calculations
  on('change:wisdom', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    wisdomCalcs();
  });

  // Dexterity Calculations
  on('change:dexterity', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    dexterityCalcs();
  });

  // Constitution Calculations
  on('change:constitution change:class change:secondclass change:thirdclass', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    constitutionCalcs();
  });

  // Charisma Calculations
  on('change:charisma change:comeliness', (eventInfo) => {
    // clog(`Change Detected:${eventInfo.sourceAttribute}`);
    charismaCalcs();
  });
</script>
